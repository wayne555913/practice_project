ARM GAS  /tmp/cc17XZfc.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f1xx_hal_uart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_UART_Init,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_UART_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	HAL_UART_Init:
  25              	.LFB65:
  26              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @file    stm32f1xx_hal_uart.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Peripheral Control functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           + Peripheral State and Errors functions
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @attention
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * Copyright (c) 2016 STMicroelectronics.
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * All rights reserved.
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * This software is licensed under terms that can be found in the LICENSE file
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * in the root directory of this software component.
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   @verbatim
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                         ##### How to use this driver #####
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
ARM GAS  /tmp/cc17XZfc.s 			page 2


  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) Enable the USARTx interface clock.
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) UART pins configuration:
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the UART TX/RX pins as alternate function pull-up.
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (##) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   Tx/Rx parameters.
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx channel.
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority and enable the NVIC USART IRQ handle
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         flow control and Mode(Receiver/Transmitter) in the huart Init structure.
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_UART_Init() API.
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the LIN mode, initialize the UART registers by calling the HAL_LIN_Init() API.
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For the Multi-Processor mode, initialize the UART registers by calling
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         the HAL_MultiProcessor_Init() API.
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) The specific UART interrupts (Transmission complete interrupt,
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             RXNE interrupt and Error Interrupts) will be managed using the macros
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             and receive process.
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) These APIs (HAL_UART_Init() and HAL_HalfDuplex_Init()) configure also the
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             low level Hardware GPIO, CLOCK, CORTEX...etc) by calling the customized
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             HAL_UART_MspInit() API.
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ##### Callback registration #####
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ==================================
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Use Function HAL_UART_RegisterCallback() to register a user callback.
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Function HAL_UART_RegisterCallback() allows to register following callbacks:
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
ARM GAS  /tmp/cc17XZfc.s 			page 3


  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and a pointer to the user callback function.
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Use function HAL_UART_UnRegisterCallback() to reset a callback to the default
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     weak (surcharged) function.
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and the Callback ID.
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This function allows to reset following callbacks:
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     For specific callback RxEventCallback, use dedicated registration/reset functions:
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     respectively HAL_UART_RegisterRxEventCallback() , HAL_UART_UnRegisterRxEventCallback().
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     By default, after the HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     examples HAL_UART_TxCpltCallback(), HAL_UART_RxHalfCpltCallback().
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the HAL_UART_Init()
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the HAL_UART_Init() and HAL_UART_DeInit()
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     using HAL_UART_RegisterCallback() before calling HAL_UART_DeInit()
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     or HAL_UART_Init() function.
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     not defined, the callback registration feature is not available
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/cc17XZfc.s 			page 4


 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         Three operation modes are available within this driver :
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** Polling mode IO operation ***
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      =================================
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit()
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** Interrupt mode IO operation ***
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      ===================================
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT()
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT()
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** DMA mode IO operation ***
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      ==============================
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA()
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA()
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..] This subsection also provides a set of additional functions providing enhanced reception
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     services to user. (For example, these functions allow application to handle use cases
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     where number of data to be received is unknown).
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Compared to standard reception services which only consider number of received
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         data elements as reception completion criteria, these functions also consider additional ev
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         as triggers for updating reception status to caller :
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Detection of inactivity period (RX line has not been active for a given period).
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           (++) RX inactivity detected by IDLE event, i.e. RX line has been in idle state (normally 
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                for 1 frame time, after last received byte.
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) There are two mode of transfer:
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Blocking mode: The reception is performed in polling mode, until either expected number 
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            or till IDLE event occurs. Reception is handled only during function execution.
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            When function exits, no data reception could occur. HAL status and number of actually re
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            are returned by function after finishing transfer.
ARM GAS  /tmp/cc17XZfc.s 			page 5


 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Non-Blocking mode: The reception is performed using Interrupts or DMA.
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            These API's return the HAL status.
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The end of the data processing will be indicated through the
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when using DMA mode.
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UARTEx_RxEventCallback() user callback will be executed during Receive process
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a reception error is det
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Blocking mode API:
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle()
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API with Interrupt:
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle_IT()
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API with DMA:
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_ReceiveToIdle_DMA()
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      *** UART HAL driver macros list ***
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      =============================================
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) __HAL_UART_GET_IT_SOURCE: Check whether the specified UART interrupt has occurred or not
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   @endverbatim
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      [..]
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (@) Additional remark: If the parity is enabled, then the MSB bit of the data written
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            in the data register is transmitted but is changed by the parity bit.
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the possible UART frame formats are as listed in the following table:
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |   M bit |  PCE bit  |            UART frame                 |
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------------------|---------------------------------------|
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    0    |    0      |    | SB | 8 bit data | STB |          |
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    1    |    0      |    | SB | 9 bit data | STB |          |
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     +-------------------------------------------------------------+
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ******************************************************************************
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #include "stm32f1xx_hal.h"
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup STM32F1xx_HAL_Driver
ARM GAS  /tmp/cc17XZfc.s 			page 6


 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART UART
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief HAL UART module driver
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Constants
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private macro -------------------------------------------------------------*/
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @addtogroup UART_Private_Functions  UART Private Functions
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart);
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                                                      uint32_t Tickstart, uint32_t Timeout);
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart);
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /* Exported functions ---------------------------------------------------------*/
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
ARM GAS  /tmp/cc17XZfc.s 			page 7


 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     in asynchronous mode.
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       (+) For the asynchronous mode only these parameters can be configured:
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Baud Rate
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Word Length
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Stop Bit
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              please refer to Reference manual for possible UART frame formats.
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Hardware flow control
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Receiver/transmitter modes
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (++) Over Sampling Method
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     [..]
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init() APIs
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, LIN and Multi-Processor configurat
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     procedures (details for the procedures are available in reference manuals
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (RM0008 for STM32F10Xxx MCUs and RM0041 for STM32F100xx MCUs)).
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the UART mode according to the specified parameters in
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the UART_InitTypeDef and create the associated handle.
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
  27              		.loc 1 355 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
  43              		.loc 1 357 6
ARM GAS  /tmp/cc17XZfc.s 			page 8


  44 0008 7B68     		ldr	r3, [r7, #4]
  45 000a 002B     		cmp	r3, #0
  46 000c 01D1     		bne	.L2
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
  47              		.loc 1 359 12
  48 000e 0123     		movs	r3, #1
  49 0010 42E0     		b	.L3
  50              	.L2:
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* The hardware flow control is available only for USART1, USART2 and USART3 */
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
  51              		.loc 1 378 12
  52 0012 7B68     		ldr	r3, [r7, #4]
  53 0014 93F84130 		ldrb	r3, [r3, #65]
  54 0018 DBB2     		uxtb	r3, r3
  55              		.loc 1 378 6
  56 001a 002B     		cmp	r3, #0
  57 001c 06D1     		bne	.L4
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
  58              		.loc 1 381 17
  59 001e 7B68     		ldr	r3, [r7, #4]
  60 0020 0022     		movs	r2, #0
  61 0022 83F84020 		strb	r2, [r3, #64]
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
  62              		.loc 1 395 5
ARM GAS  /tmp/cc17XZfc.s 			page 9


  63 0026 7868     		ldr	r0, [r7, #4]
  64 0028 FFF7FEFF 		bl	HAL_UART_MspInit
  65              	.L4:
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
  66              		.loc 1 399 17
  67 002c 7B68     		ldr	r3, [r7, #4]
  68 002e 2422     		movs	r2, #36
  69 0030 83F84120 		strb	r2, [r3, #65]
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
  70              		.loc 1 402 3
  71 0034 7B68     		ldr	r3, [r7, #4]
  72 0036 1B68     		ldr	r3, [r3]
  73 0038 DA68     		ldr	r2, [r3, #12]
  74 003a 7B68     		ldr	r3, [r7, #4]
  75 003c 1B68     		ldr	r3, [r3]
  76 003e 22F40052 		bic	r2, r2, #8192
  77 0042 DA60     		str	r2, [r3, #12]
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
  78              		.loc 1 405 3
  79 0044 7868     		ldr	r0, [r7, #4]
  80 0046 FFF7FEFF 		bl	UART_SetConfig
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  81              		.loc 1 410 3
  82 004a 7B68     		ldr	r3, [r7, #4]
  83 004c 1B68     		ldr	r3, [r3]
  84 004e 1A69     		ldr	r2, [r3, #16]
  85 0050 7B68     		ldr	r3, [r7, #4]
  86 0052 1B68     		ldr	r3, [r3]
  87 0054 22F49042 		bic	r2, r2, #18432
  88 0058 1A61     		str	r2, [r3, #16]
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
  89              		.loc 1 411 3
  90 005a 7B68     		ldr	r3, [r7, #4]
  91 005c 1B68     		ldr	r3, [r3]
  92 005e 5A69     		ldr	r2, [r3, #20]
  93 0060 7B68     		ldr	r3, [r7, #4]
  94 0062 1B68     		ldr	r3, [r3]
  95 0064 22F02A02 		bic	r2, r2, #42
  96 0068 5A61     		str	r2, [r3, #20]
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
  97              		.loc 1 414 3
  98 006a 7B68     		ldr	r3, [r7, #4]
  99 006c 1B68     		ldr	r3, [r3]
 100 006e DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp/cc17XZfc.s 			page 10


 101 0070 7B68     		ldr	r3, [r7, #4]
 102 0072 1B68     		ldr	r3, [r3]
 103 0074 42F40052 		orr	r2, r2, #8192
 104 0078 DA60     		str	r2, [r3, #12]
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 105              		.loc 1 417 20
 106 007a 7B68     		ldr	r3, [r7, #4]
 107 007c 0022     		movs	r2, #0
 108 007e 5A64     		str	r2, [r3, #68]
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 109              		.loc 1 418 17
 110 0080 7B68     		ldr	r3, [r7, #4]
 111 0082 2022     		movs	r2, #32
 112 0084 83F84120 		strb	r2, [r3, #65]
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 113              		.loc 1 419 18
 114 0088 7B68     		ldr	r3, [r7, #4]
 115 008a 2022     		movs	r2, #32
 116 008c 83F84220 		strb	r2, [r3, #66]
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 117              		.loc 1 420 22
 118 0090 7B68     		ldr	r3, [r7, #4]
 119 0092 0022     		movs	r2, #0
 120 0094 5A63     		str	r2, [r3, #52]
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 121              		.loc 1 422 10
 122 0096 0023     		movs	r3, #0
 123              	.L3:
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 124              		.loc 1 423 1
 125 0098 1846     		mov	r0, r3
 126 009a 0837     		adds	r7, r7, #8
 127              	.LCFI3:
 128              		.cfi_def_cfa_offset 8
 129 009c BD46     		mov	sp, r7
 130              	.LCFI4:
 131              		.cfi_def_cfa_register 13
 132              		@ sp needed
 133 009e 80BD     		pop	{r7, pc}
 134              		.cfi_endproc
 135              	.LFE65:
 137              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 138              		.align	1
 139              		.global	HAL_HalfDuplex_Init
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 144              	HAL_HalfDuplex_Init:
 145              	.LFB66:
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the half-duplex mode according to the specified
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
ARM GAS  /tmp/cc17XZfc.s 			page 11


 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 146              		.loc 1 433 1
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 8
 149              		@ frame_needed = 1, uses_anonymous_args = 0
 150 0000 80B5     		push	{r7, lr}
 151              	.LCFI5:
 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 7, -8
 154              		.cfi_offset 14, -4
 155 0002 82B0     		sub	sp, sp, #8
 156              	.LCFI6:
 157              		.cfi_def_cfa_offset 16
 158 0004 00AF     		add	r7, sp, #0
 159              	.LCFI7:
 160              		.cfi_def_cfa_register 7
 161 0006 7860     		str	r0, [r7, #4]
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 162              		.loc 1 435 6
 163 0008 7B68     		ldr	r3, [r7, #4]
 164 000a 002B     		cmp	r3, #0
 165 000c 01D1     		bne	.L6
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 166              		.loc 1 437 12
 167 000e 0123     		movs	r3, #1
 168 0010 4AE0     		b	.L7
 169              	.L6:
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 170              		.loc 1 447 12
 171 0012 7B68     		ldr	r3, [r7, #4]
 172 0014 93F84130 		ldrb	r3, [r3, #65]
 173 0018 DBB2     		uxtb	r3, r3
 174              		.loc 1 447 6
 175 001a 002B     		cmp	r3, #0
 176 001c 06D1     		bne	.L8
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 177              		.loc 1 450 17
 178 001e 7B68     		ldr	r3, [r7, #4]
 179 0020 0022     		movs	r2, #0
 180 0022 83F84020 		strb	r2, [r3, #64]
ARM GAS  /tmp/cc17XZfc.s 			page 12


 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 181              		.loc 1 464 5
 182 0026 7868     		ldr	r0, [r7, #4]
 183 0028 FFF7FEFF 		bl	HAL_UART_MspInit
 184              	.L8:
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 185              		.loc 1 468 17
 186 002c 7B68     		ldr	r3, [r7, #4]
 187 002e 2422     		movs	r2, #36
 188 0030 83F84120 		strb	r2, [r3, #65]
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 189              		.loc 1 471 3
 190 0034 7B68     		ldr	r3, [r7, #4]
 191 0036 1B68     		ldr	r3, [r3]
 192 0038 DA68     		ldr	r2, [r3, #12]
 193 003a 7B68     		ldr	r3, [r7, #4]
 194 003c 1B68     		ldr	r3, [r3]
 195 003e 22F40052 		bic	r2, r2, #8192
 196 0042 DA60     		str	r2, [r3, #12]
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 197              		.loc 1 474 3
 198 0044 7868     		ldr	r0, [r7, #4]
 199 0046 FFF7FEFF 		bl	UART_SetConfig
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 200              		.loc 1 479 3
 201 004a 7B68     		ldr	r3, [r7, #4]
 202 004c 1B68     		ldr	r3, [r3]
 203 004e 1A69     		ldr	r2, [r3, #16]
 204 0050 7B68     		ldr	r3, [r7, #4]
 205 0052 1B68     		ldr	r3, [r3]
 206 0054 22F49042 		bic	r2, r2, #18432
 207 0058 1A61     		str	r2, [r3, #16]
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
ARM GAS  /tmp/cc17XZfc.s 			page 13


 208              		.loc 1 480 3
 209 005a 7B68     		ldr	r3, [r7, #4]
 210 005c 1B68     		ldr	r3, [r3]
 211 005e 5A69     		ldr	r2, [r3, #20]
 212 0060 7B68     		ldr	r3, [r7, #4]
 213 0062 1B68     		ldr	r3, [r3]
 214 0064 22F02202 		bic	r2, r2, #34
 215 0068 5A61     		str	r2, [r3, #20]
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 216              		.loc 1 483 3
 217 006a 7B68     		ldr	r3, [r7, #4]
 218 006c 1B68     		ldr	r3, [r3]
 219 006e 5A69     		ldr	r2, [r3, #20]
 220 0070 7B68     		ldr	r3, [r7, #4]
 221 0072 1B68     		ldr	r3, [r3]
 222 0074 42F00802 		orr	r2, r2, #8
 223 0078 5A61     		str	r2, [r3, #20]
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 224              		.loc 1 486 3
 225 007a 7B68     		ldr	r3, [r7, #4]
 226 007c 1B68     		ldr	r3, [r3]
 227 007e DA68     		ldr	r2, [r3, #12]
 228 0080 7B68     		ldr	r3, [r7, #4]
 229 0082 1B68     		ldr	r3, [r3]
 230 0084 42F40052 		orr	r2, r2, #8192
 231 0088 DA60     		str	r2, [r3, #12]
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 232              		.loc 1 489 20
 233 008a 7B68     		ldr	r3, [r7, #4]
 234 008c 0022     		movs	r2, #0
 235 008e 5A64     		str	r2, [r3, #68]
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 236              		.loc 1 490 17
 237 0090 7B68     		ldr	r3, [r7, #4]
 238 0092 2022     		movs	r2, #32
 239 0094 83F84120 		strb	r2, [r3, #65]
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 240              		.loc 1 491 18
 241 0098 7B68     		ldr	r3, [r7, #4]
 242 009a 2022     		movs	r2, #32
 243 009c 83F84220 		strb	r2, [r3, #66]
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 244              		.loc 1 492 22
 245 00a0 7B68     		ldr	r3, [r7, #4]
 246 00a2 0022     		movs	r2, #0
 247 00a4 5A63     		str	r2, [r3, #52]
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 248              		.loc 1 494 10
 249 00a6 0023     		movs	r3, #0
 250              	.L7:
ARM GAS  /tmp/cc17XZfc.s 			page 14


 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 251              		.loc 1 495 1
 252 00a8 1846     		mov	r0, r3
 253 00aa 0837     		adds	r7, r7, #8
 254              	.LCFI8:
 255              		.cfi_def_cfa_offset 8
 256 00ac BD46     		mov	sp, r7
 257              	.LCFI9:
 258              		.cfi_def_cfa_register 13
 259              		@ sp needed
 260 00ae 80BD     		pop	{r7, pc}
 261              		.cfi_endproc
 262              	.LFE66:
 264              		.section	.text.HAL_LIN_Init,"ax",%progbits
 265              		.align	1
 266              		.global	HAL_LIN_Init
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 271              	HAL_LIN_Init:
 272              	.LFB67:
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the LIN mode according to the specified
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  BreakDetectLength Specifies the LIN break detection length.
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 273              		.loc 1 509 1
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 8
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277 0000 80B5     		push	{r7, lr}
 278              	.LCFI10:
 279              		.cfi_def_cfa_offset 8
 280              		.cfi_offset 7, -8
 281              		.cfi_offset 14, -4
 282 0002 82B0     		sub	sp, sp, #8
 283              	.LCFI11:
 284              		.cfi_def_cfa_offset 16
 285 0004 00AF     		add	r7, sp, #0
 286              	.LCFI12:
 287              		.cfi_def_cfa_register 7
 288 0006 7860     		str	r0, [r7, #4]
 289 0008 3960     		str	r1, [r7]
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 290              		.loc 1 511 6
 291 000a 7B68     		ldr	r3, [r7, #4]
 292 000c 002B     		cmp	r3, #0
ARM GAS  /tmp/cc17XZfc.s 			page 15


 293 000e 01D1     		bne	.L10
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 294              		.loc 1 513 12
 295 0010 0123     		movs	r3, #1
 296 0012 5AE0     		b	.L11
 297              	.L10:
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the LIN UART instance */
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Break detection length parameter */
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 298              		.loc 1 526 12
 299 0014 7B68     		ldr	r3, [r7, #4]
 300 0016 93F84130 		ldrb	r3, [r3, #65]
 301 001a DBB2     		uxtb	r3, r3
 302              		.loc 1 526 6
 303 001c 002B     		cmp	r3, #0
 304 001e 06D1     		bne	.L12
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 305              		.loc 1 529 17
 306 0020 7B68     		ldr	r3, [r7, #4]
 307 0022 0022     		movs	r2, #0
 308 0024 83F84020 		strb	r2, [r3, #64]
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 309              		.loc 1 543 5
 310 0028 7868     		ldr	r0, [r7, #4]
 311 002a FFF7FEFF 		bl	HAL_UART_MspInit
 312              	.L12:
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 313              		.loc 1 547 17
ARM GAS  /tmp/cc17XZfc.s 			page 16


 314 002e 7B68     		ldr	r3, [r7, #4]
 315 0030 2422     		movs	r2, #36
 316 0032 83F84120 		strb	r2, [r3, #65]
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 317              		.loc 1 550 3
 318 0036 7B68     		ldr	r3, [r7, #4]
 319 0038 1B68     		ldr	r3, [r3]
 320 003a DA68     		ldr	r2, [r3, #12]
 321 003c 7B68     		ldr	r3, [r7, #4]
 322 003e 1B68     		ldr	r3, [r3]
 323 0040 22F40052 		bic	r2, r2, #8192
 324 0044 DA60     		str	r2, [r3, #12]
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 325              		.loc 1 553 3
 326 0046 7868     		ldr	r0, [r7, #4]
 327 0048 FFF7FEFF 		bl	UART_SetConfig
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - CLKEN bits in the USART_CR2 register,
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 328              		.loc 1 558 3
 329 004c 7B68     		ldr	r3, [r7, #4]
 330 004e 1B68     		ldr	r3, [r3]
 331 0050 1A69     		ldr	r2, [r3, #16]
 332 0052 7B68     		ldr	r3, [r7, #4]
 333 0054 1B68     		ldr	r3, [r3]
 334 0056 22F40062 		bic	r2, r2, #2048
 335 005a 1A61     		str	r2, [r3, #16]
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 336              		.loc 1 559 3
 337 005c 7B68     		ldr	r3, [r7, #4]
 338 005e 1B68     		ldr	r3, [r3]
 339 0060 5A69     		ldr	r2, [r3, #20]
 340 0062 7B68     		ldr	r3, [r7, #4]
 341 0064 1B68     		ldr	r3, [r3]
 342 0066 22F02A02 		bic	r2, r2, #42
 343 006a 5A61     		str	r2, [r3, #20]
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 344              		.loc 1 562 3
 345 006c 7B68     		ldr	r3, [r7, #4]
 346 006e 1B68     		ldr	r3, [r3]
 347 0070 1A69     		ldr	r2, [r3, #16]
 348 0072 7B68     		ldr	r3, [r7, #4]
 349 0074 1B68     		ldr	r3, [r3]
 350 0076 42F48042 		orr	r2, r2, #16384
 351 007a 1A61     		str	r2, [r3, #16]
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 352              		.loc 1 565 3
ARM GAS  /tmp/cc17XZfc.s 			page 17


 353 007c 7B68     		ldr	r3, [r7, #4]
 354 007e 1B68     		ldr	r3, [r3]
 355 0080 1A69     		ldr	r2, [r3, #16]
 356 0082 7B68     		ldr	r3, [r7, #4]
 357 0084 1B68     		ldr	r3, [r3]
 358 0086 22F02002 		bic	r2, r2, #32
 359 008a 1A61     		str	r2, [r3, #16]
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, BreakDetectLength);
 360              		.loc 1 566 3
 361 008c 7B68     		ldr	r3, [r7, #4]
 362 008e 1B68     		ldr	r3, [r3]
 363 0090 1969     		ldr	r1, [r3, #16]
 364 0092 7B68     		ldr	r3, [r7, #4]
 365 0094 1B68     		ldr	r3, [r3]
 366 0096 3A68     		ldr	r2, [r7]
 367 0098 0A43     		orrs	r2, r2, r1
 368 009a 1A61     		str	r2, [r3, #16]
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 369              		.loc 1 569 3
 370 009c 7B68     		ldr	r3, [r7, #4]
 371 009e 1B68     		ldr	r3, [r3]
 372 00a0 DA68     		ldr	r2, [r3, #12]
 373 00a2 7B68     		ldr	r3, [r7, #4]
 374 00a4 1B68     		ldr	r3, [r3]
 375 00a6 42F40052 		orr	r2, r2, #8192
 376 00aa DA60     		str	r2, [r3, #12]
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state*/
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 377              		.loc 1 572 20
 378 00ac 7B68     		ldr	r3, [r7, #4]
 379 00ae 0022     		movs	r2, #0
 380 00b0 5A64     		str	r2, [r3, #68]
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 381              		.loc 1 573 17
 382 00b2 7B68     		ldr	r3, [r7, #4]
 383 00b4 2022     		movs	r2, #32
 384 00b6 83F84120 		strb	r2, [r3, #65]
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 385              		.loc 1 574 18
 386 00ba 7B68     		ldr	r3, [r7, #4]
 387 00bc 2022     		movs	r2, #32
 388 00be 83F84220 		strb	r2, [r3, #66]
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 389              		.loc 1 575 22
 390 00c2 7B68     		ldr	r3, [r7, #4]
 391 00c4 0022     		movs	r2, #0
 392 00c6 5A63     		str	r2, [r3, #52]
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 393              		.loc 1 577 10
 394 00c8 0023     		movs	r3, #0
 395              	.L11:
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 396              		.loc 1 578 1
ARM GAS  /tmp/cc17XZfc.s 			page 18


 397 00ca 1846     		mov	r0, r3
 398 00cc 0837     		adds	r7, r7, #8
 399              	.LCFI13:
 400              		.cfi_def_cfa_offset 8
 401 00ce BD46     		mov	sp, r7
 402              	.LCFI14:
 403              		.cfi_def_cfa_register 13
 404              		@ sp needed
 405 00d0 80BD     		pop	{r7, pc}
 406              		.cfi_endproc
 407              	.LFE67:
 409              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 410              		.align	1
 411              		.global	HAL_MultiProcessor_Init
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 416              	HAL_MultiProcessor_Init:
 417              	.LFB68:
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initializes the Multi-Processor mode according to the specified
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Address USART address
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  WakeUpMethod specifies the USART wake-up method.
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 418              		.loc 1 593 1
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 16
 421              		@ frame_needed = 1, uses_anonymous_args = 0
 422 0000 80B5     		push	{r7, lr}
 423              	.LCFI15:
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 7, -8
 426              		.cfi_offset 14, -4
 427 0002 84B0     		sub	sp, sp, #16
 428              	.LCFI16:
 429              		.cfi_def_cfa_offset 24
 430 0004 00AF     		add	r7, sp, #0
 431              	.LCFI17:
 432              		.cfi_def_cfa_register 7
 433 0006 F860     		str	r0, [r7, #12]
 434 0008 0B46     		mov	r3, r1
 435 000a 7A60     		str	r2, [r7, #4]
 436 000c FB72     		strb	r3, [r7, #11]
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 437              		.loc 1 595 6
 438 000e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc17XZfc.s 			page 19


 439 0010 002B     		cmp	r3, #0
 440 0012 01D1     		bne	.L14
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 441              		.loc 1 597 12
 442 0014 0123     		movs	r3, #1
 443 0016 62E0     		b	.L15
 444              	.L14:
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the Address & wake up method parameters */
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_ADDRESS(Address));
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 445              		.loc 1 611 12
 446 0018 FB68     		ldr	r3, [r7, #12]
 447 001a 93F84130 		ldrb	r3, [r3, #65]
 448 001e DBB2     		uxtb	r3, r3
 449              		.loc 1 611 6
 450 0020 002B     		cmp	r3, #0
 451 0022 06D1     		bne	.L16
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 452              		.loc 1 614 17
 453 0024 FB68     		ldr	r3, [r7, #12]
 454 0026 0022     		movs	r2, #0
 455 0028 83F84020 		strb	r2, [r3, #64]
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware */
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 456              		.loc 1 628 5
 457 002c F868     		ldr	r0, [r7, #12]
 458 002e FFF7FEFF 		bl	HAL_UART_MspInit
 459              	.L16:
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/cc17XZfc.s 			page 20


 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 460              		.loc 1 632 17
 461 0032 FB68     		ldr	r3, [r7, #12]
 462 0034 2422     		movs	r2, #36
 463 0036 83F84120 		strb	r2, [r3, #65]
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the peripheral */
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 464              		.loc 1 635 3
 465 003a FB68     		ldr	r3, [r7, #12]
 466 003c 1B68     		ldr	r3, [r3]
 467 003e DA68     		ldr	r2, [r3, #12]
 468 0040 FB68     		ldr	r3, [r7, #12]
 469 0042 1B68     		ldr	r3, [r3]
 470 0044 22F40052 		bic	r2, r2, #8192
 471 0048 DA60     		str	r2, [r3, #12]
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_SetConfig(huart);
 472              		.loc 1 638 3
 473 004a F868     		ldr	r0, [r7, #12]
 474 004c FFF7FEFF 		bl	UART_SetConfig
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In Multi-Processor mode, the following bits must be kept cleared:
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 475              		.loc 1 643 3
 476 0050 FB68     		ldr	r3, [r7, #12]
 477 0052 1B68     		ldr	r3, [r3]
 478 0054 1A69     		ldr	r2, [r3, #16]
 479 0056 FB68     		ldr	r3, [r7, #12]
 480 0058 1B68     		ldr	r3, [r3]
 481 005a 22F49042 		bic	r2, r2, #18432
 482 005e 1A61     		str	r2, [r3, #16]
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 483              		.loc 1 644 3
 484 0060 FB68     		ldr	r3, [r7, #12]
 485 0062 1B68     		ldr	r3, [r3]
 486 0064 5A69     		ldr	r2, [r3, #20]
 487 0066 FB68     		ldr	r3, [r7, #12]
 488 0068 1B68     		ldr	r3, [r3]
 489 006a 22F02A02 		bic	r2, r2, #42
 490 006e 5A61     		str	r2, [r3, #20]
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the USART address node */
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 491              		.loc 1 647 3
 492 0070 FB68     		ldr	r3, [r7, #12]
 493 0072 1B68     		ldr	r3, [r3]
 494 0074 1A69     		ldr	r2, [r3, #16]
 495 0076 FB68     		ldr	r3, [r7, #12]
 496 0078 1B68     		ldr	r3, [r3]
 497 007a 22F00F02 		bic	r2, r2, #15
 498 007e 1A61     		str	r2, [r3, #16]
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, Address);
 499              		.loc 1 648 3
ARM GAS  /tmp/cc17XZfc.s 			page 21


 500 0080 FB68     		ldr	r3, [r7, #12]
 501 0082 1B68     		ldr	r3, [r3]
 502 0084 1969     		ldr	r1, [r3, #16]
 503 0086 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 504 0088 FB68     		ldr	r3, [r7, #12]
 505 008a 1B68     		ldr	r3, [r3]
 506 008c 0A43     		orrs	r2, r2, r1
 507 008e 1A61     		str	r2, [r3, #16]
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 508              		.loc 1 651 3
 509 0090 FB68     		ldr	r3, [r7, #12]
 510 0092 1B68     		ldr	r3, [r3]
 511 0094 DA68     		ldr	r2, [r3, #12]
 512 0096 FB68     		ldr	r3, [r7, #12]
 513 0098 1B68     		ldr	r3, [r3]
 514 009a 22F40062 		bic	r2, r2, #2048
 515 009e DA60     		str	r2, [r3, #12]
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, WakeUpMethod);
 516              		.loc 1 652 3
 517 00a0 FB68     		ldr	r3, [r7, #12]
 518 00a2 1B68     		ldr	r3, [r3]
 519 00a4 D968     		ldr	r1, [r3, #12]
 520 00a6 FB68     		ldr	r3, [r7, #12]
 521 00a8 1B68     		ldr	r3, [r3]
 522 00aa 7A68     		ldr	r2, [r7, #4]
 523 00ac 0A43     		orrs	r2, r2, r1
 524 00ae DA60     		str	r2, [r3, #12]
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the peripheral */
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 525              		.loc 1 655 3
 526 00b0 FB68     		ldr	r3, [r7, #12]
 527 00b2 1B68     		ldr	r3, [r3]
 528 00b4 DA68     		ldr	r2, [r3, #12]
 529 00b6 FB68     		ldr	r3, [r7, #12]
 530 00b8 1B68     		ldr	r3, [r3]
 531 00ba 42F40052 		orr	r2, r2, #8192
 532 00be DA60     		str	r2, [r3, #12]
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize the UART state */
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 533              		.loc 1 658 20
 534 00c0 FB68     		ldr	r3, [r7, #12]
 535 00c2 0022     		movs	r2, #0
 536 00c4 5A64     		str	r2, [r3, #68]
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 537              		.loc 1 659 17
 538 00c6 FB68     		ldr	r3, [r7, #12]
 539 00c8 2022     		movs	r2, #32
 540 00ca 83F84120 		strb	r2, [r3, #65]
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 541              		.loc 1 660 18
 542 00ce FB68     		ldr	r3, [r7, #12]
 543 00d0 2022     		movs	r2, #32
 544 00d2 83F84220 		strb	r2, [r3, #66]
ARM GAS  /tmp/cc17XZfc.s 			page 22


 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 545              		.loc 1 661 22
 546 00d6 FB68     		ldr	r3, [r7, #12]
 547 00d8 0022     		movs	r2, #0
 548 00da 5A63     		str	r2, [r3, #52]
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 549              		.loc 1 663 10
 550 00dc 0023     		movs	r3, #0
 551              	.L15:
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 552              		.loc 1 664 1
 553 00de 1846     		mov	r0, r3
 554 00e0 1037     		adds	r7, r7, #16
 555              	.LCFI18:
 556              		.cfi_def_cfa_offset 8
 557 00e2 BD46     		mov	sp, r7
 558              	.LCFI19:
 559              		.cfi_def_cfa_register 13
 560              		@ sp needed
 561 00e4 80BD     		pop	{r7, pc}
 562              		.cfi_endproc
 563              	.LFE68:
 565              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 566              		.align	1
 567              		.global	HAL_UART_DeInit
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 572              	HAL_UART_DeInit:
 573              	.LFB69:
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DeInitializes the UART peripheral.
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 574              		.loc 1 673 1
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 8
 577              		@ frame_needed = 1, uses_anonymous_args = 0
 578 0000 80B5     		push	{r7, lr}
 579              	.LCFI20:
 580              		.cfi_def_cfa_offset 8
 581              		.cfi_offset 7, -8
 582              		.cfi_offset 14, -4
 583 0002 82B0     		sub	sp, sp, #8
 584              	.LCFI21:
 585              		.cfi_def_cfa_offset 16
 586 0004 00AF     		add	r7, sp, #0
 587              	.LCFI22:
 588              		.cfi_def_cfa_register 7
 589 0006 7860     		str	r0, [r7, #4]
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the UART handle allocation */
ARM GAS  /tmp/cc17XZfc.s 			page 23


 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart == NULL)
 590              		.loc 1 675 6
 591 0008 7B68     		ldr	r3, [r7, #4]
 592 000a 002B     		cmp	r3, #0
 593 000c 01D1     		bne	.L18
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 594              		.loc 1 677 12
 595 000e 0123     		movs	r3, #1
 596 0010 24E0     		b	.L19
 597              	.L18:
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 598              		.loc 1 683 17
 599 0012 7B68     		ldr	r3, [r7, #4]
 600 0014 2422     		movs	r2, #36
 601 0016 83F84120 		strb	r2, [r3, #65]
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the Peripheral */
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 602              		.loc 1 686 3
 603 001a 7B68     		ldr	r3, [r7, #4]
 604 001c 1B68     		ldr	r3, [r3]
 605 001e DA68     		ldr	r2, [r3, #12]
 606 0020 7B68     		ldr	r3, [r7, #4]
 607 0022 1B68     		ldr	r3, [r3]
 608 0024 22F40052 		bic	r2, r2, #8192
 609 0028 DA60     		str	r2, [r3, #12]
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DeInit the low level hardware */
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 610              		.loc 1 697 3
 611 002a 7868     		ldr	r0, [r7, #4]
 612 002c FFF7FEFF 		bl	HAL_UART_MspDeInit
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 613              		.loc 1 700 20
 614 0030 7B68     		ldr	r3, [r7, #4]
 615 0032 0022     		movs	r2, #0
 616 0034 5A64     		str	r2, [r3, #68]
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 617              		.loc 1 701 17
 618 0036 7B68     		ldr	r3, [r7, #4]
 619 0038 0022     		movs	r2, #0
ARM GAS  /tmp/cc17XZfc.s 			page 24


 620 003a 83F84120 		strb	r2, [r3, #65]
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 621              		.loc 1 702 18
 622 003e 7B68     		ldr	r3, [r7, #4]
 623 0040 0022     		movs	r2, #0
 624 0042 83F84220 		strb	r2, [r3, #66]
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 625              		.loc 1 703 24
 626 0046 7B68     		ldr	r3, [r7, #4]
 627 0048 0022     		movs	r2, #0
 628 004a 1A63     		str	r2, [r3, #48]
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 629              		.loc 1 704 22
 630 004c 7B68     		ldr	r3, [r7, #4]
 631 004e 0022     		movs	r2, #0
 632 0050 5A63     		str	r2, [r3, #52]
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlock */
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 633              		.loc 1 707 3
 634 0052 7B68     		ldr	r3, [r7, #4]
 635 0054 0022     		movs	r2, #0
 636 0056 83F84020 		strb	r2, [r3, #64]
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 637              		.loc 1 709 10
 638 005a 0023     		movs	r3, #0
 639              	.L19:
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 640              		.loc 1 710 1
 641 005c 1846     		mov	r0, r3
 642 005e 0837     		adds	r7, r7, #8
 643              	.LCFI23:
 644              		.cfi_def_cfa_offset 8
 645 0060 BD46     		mov	sp, r7
 646              	.LCFI24:
 647              		.cfi_def_cfa_register 13
 648              		@ sp needed
 649 0062 80BD     		pop	{r7, pc}
 650              		.cfi_endproc
 651              	.LFE69:
 653              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 654              		.align	1
 655              		.weak	HAL_UART_MspInit
 656              		.syntax unified
 657              		.thumb
 658              		.thumb_func
 660              	HAL_UART_MspInit:
 661              	.LFB70:
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP Init.
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
ARM GAS  /tmp/cc17XZfc.s 			page 25


 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 662              		.loc 1 719 1
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 8
 665              		@ frame_needed = 1, uses_anonymous_args = 0
 666              		@ link register save eliminated.
 667 0000 80B4     		push	{r7}
 668              	.LCFI25:
 669              		.cfi_def_cfa_offset 4
 670              		.cfi_offset 7, -4
 671 0002 83B0     		sub	sp, sp, #12
 672              	.LCFI26:
 673              		.cfi_def_cfa_offset 16
 674 0004 00AF     		add	r7, sp, #0
 675              	.LCFI27:
 676              		.cfi_def_cfa_register 7
 677 0006 7860     		str	r0, [r7, #4]
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspInit could be implemented in the user file
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 678              		.loc 1 725 1
 679 0008 00BF     		nop
 680 000a 0C37     		adds	r7, r7, #12
 681              	.LCFI28:
 682              		.cfi_def_cfa_offset 4
 683 000c BD46     		mov	sp, r7
 684              	.LCFI29:
 685              		.cfi_def_cfa_register 13
 686              		@ sp needed
 687 000e 80BC     		pop	{r7}
 688              	.LCFI30:
 689              		.cfi_restore 7
 690              		.cfi_def_cfa_offset 0
 691 0010 7047     		bx	lr
 692              		.cfi_endproc
 693              	.LFE70:
 695              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 696              		.align	1
 697              		.weak	HAL_UART_MspDeInit
 698              		.syntax unified
 699              		.thumb
 700              		.thumb_func
 702              	HAL_UART_MspDeInit:
 703              	.LFB71:
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART MSP DeInit.
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 704              		.loc 1 734 1
ARM GAS  /tmp/cc17XZfc.s 			page 26


 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 8
 707              		@ frame_needed = 1, uses_anonymous_args = 0
 708              		@ link register save eliminated.
 709 0000 80B4     		push	{r7}
 710              	.LCFI31:
 711              		.cfi_def_cfa_offset 4
 712              		.cfi_offset 7, -4
 713 0002 83B0     		sub	sp, sp, #12
 714              	.LCFI32:
 715              		.cfi_def_cfa_offset 16
 716 0004 00AF     		add	r7, sp, #0
 717              	.LCFI33:
 718              		.cfi_def_cfa_register 7
 719 0006 7860     		str	r0, [r7, #4]
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_MspDeInit could be implemented in the user file
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 720              		.loc 1 740 1
 721 0008 00BF     		nop
 722 000a 0C37     		adds	r7, r7, #12
 723              	.LCFI34:
 724              		.cfi_def_cfa_offset 4
 725 000c BD46     		mov	sp, r7
 726              	.LCFI35:
 727              		.cfi_def_cfa_register 13
 728              		@ sp needed
 729 000e 80BC     		pop	{r7}
 730              	.LCFI36:
 731              		.cfi_restore 7
 732              		.cfi_def_cfa_offset 0
 733 0010 7047     		bx	lr
 734              		.cfi_endproc
 735              	.LFE71:
 737              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 738              		.align	1
 739              		.global	HAL_UART_Transmit
 740              		.syntax unified
 741              		.thumb
 742              		.thumb_func
 744              	HAL_UART_Transmit:
 745              	.LFB72:
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Register a User UART Callback
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   The HAL_UART_RegisterCallback() may be called before HAL_UART_Init(), HAL_HalfDuplex_In
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_MultiProcessor_Init() to register callbacks for HAL_UART_MSPINIT_CB_ID and HAL_UART
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart uart handle
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
ARM GAS  /tmp/cc17XZfc.s 			page 27


 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                                             pUART_CallbackTypeDef pCallback)
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (pCallback == NULL)
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
ARM GAS  /tmp/cc17XZfc.s 			page 28


 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Return error status */
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Unregister an UART Callback
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   The HAL_UART_UnRegisterCallback() may be called before HAL_UART_Init(), HAL_HalfDuplex_
ARM GAS  /tmp/cc17XZfc.s 			page 29


 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_LIN_Init(), HAL_MultiProcessor_Init() to un-register callbacks for HAL_UART_MSPINIT
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and HAL_UART_MSPDEINIT_CB_ID
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart uart handle
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak Abort
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak Abort
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/cc17XZfc.s 			page 30


 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     switch (CallbackID)
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       default :
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Update the error code */
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Return error status */
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status =  HAL_ERROR;
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         break;
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Update the error code */
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Return error status */
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Register a User UART Rx Event Callback
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart     Uart handle
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pCallback Pointer to the Rx Event Callback function
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  /tmp/cc17XZfc.s 			page 31


 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallback
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (pCallback == NULL)
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_ERROR;
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback = pCallback;
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UnRegister the UART Rx Event Callback
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Rx Event Callback is redirected to the weak HAL_UARTEx_RxEventCallback() predefine
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart     Uart handle
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterRxEventCallback(UART_HandleTypeDef *huart)
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process locked */
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback = HAL_UARTEx_RxEventCallback; /* Legacy weak UART Rx Event Callback  */
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  HAL_ERROR;
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Release Lock */
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
ARM GAS  /tmp/cc17XZfc.s 			page 32


1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return status;
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief UART Transmit and Receive functions
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                       ##### IO operation functions #####
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  ===============================================================================
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     and Half duplex data transfers.
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) There are two modes of transfer:
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            after finishing transfer.
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            or DMA, these API's return the HAL status.
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The end of the data processing will be indicated through the
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            using DMA mode.
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            will be executed respectively at the end of the transmit or receive process
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Blocking mode API's are :
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit()
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive()
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Abort()
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
ARM GAS  /tmp/cc17XZfc.s 			page 33


1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) A Rx Event Reception Callback (Rx event notification) is available for Non_Blocking modes o
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         (+) HAL_UARTEx_RxEventCallback()
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         Errors are handled as follows :
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Inte
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UART
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() use
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in blocking mode.
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size,
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 746              		.loc 1 1139 1
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 32
 749              		@ frame_needed = 1, uses_anonymous_args = 0
 750 0000 80B5     		push	{r7, lr}
 751              	.LCFI37:
 752              		.cfi_def_cfa_offset 8
 753              		.cfi_offset 7, -8
 754              		.cfi_offset 14, -4
 755 0002 8AB0     		sub	sp, sp, #40
 756              	.LCFI38:
 757              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/cc17XZfc.s 			page 34


 758 0004 02AF     		add	r7, sp, #8
 759              	.LCFI39:
 760              		.cfi_def_cfa 7, 40
 761 0006 F860     		str	r0, [r7, #12]
 762 0008 B960     		str	r1, [r7, #8]
 763 000a 3B60     		str	r3, [r7]
 764 000c 1346     		mov	r3, r2	@ movhi
 765 000e FB80     		strh	r3, [r7, #6]	@ movhi
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   const uint8_t  *pdata8bits;
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   const uint16_t *pdata16bits;
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
 766              		.loc 1 1142 12
 767 0010 0023     		movs	r3, #0
 768 0012 7B61     		str	r3, [r7, #20]
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 769              		.loc 1 1145 12
 770 0014 FB68     		ldr	r3, [r7, #12]
 771 0016 93F84130 		ldrb	r3, [r3, #65]
 772 001a DBB2     		uxtb	r3, r3
 773              		.loc 1 1145 6
 774 001c 202B     		cmp	r3, #32
 775 001e 6DD1     		bne	.L23
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 776              		.loc 1 1147 8
 777 0020 BB68     		ldr	r3, [r7, #8]
 778 0022 002B     		cmp	r3, #0
 779 0024 02D0     		beq	.L24
 780              		.loc 1 1147 25 discriminator 1
 781 0026 FB88     		ldrh	r3, [r7, #6]
 782 0028 002B     		cmp	r3, #0
 783 002a 01D1     		bne	.L25
 784              	.L24:
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 785              		.loc 1 1149 15
 786 002c 0123     		movs	r3, #1
 787 002e 66E0     		b	.L26
 788              	.L25:
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 789              		.loc 1 1152 22
 790 0030 FB68     		ldr	r3, [r7, #12]
 791 0032 0022     		movs	r2, #0
 792 0034 5A64     		str	r2, [r3, #68]
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 793              		.loc 1 1153 19
 794 0036 FB68     		ldr	r3, [r7, #12]
 795 0038 2122     		movs	r2, #33
 796 003a 83F84120 		strb	r2, [r3, #65]
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 797              		.loc 1 1156 17
ARM GAS  /tmp/cc17XZfc.s 			page 35


 798 003e FFF7FEFF 		bl	HAL_GetTick
 799 0042 7861     		str	r0, [r7, #20]
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 800              		.loc 1 1158 23
 801 0044 FB68     		ldr	r3, [r7, #12]
 802 0046 FA88     		ldrh	r2, [r7, #6]	@ movhi
 803 0048 9A84     		strh	r2, [r3, #36]	@ movhi
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 804              		.loc 1 1159 24
 805 004a FB68     		ldr	r3, [r7, #12]
 806 004c FA88     		ldrh	r2, [r7, #6]	@ movhi
 807 004e DA84     		strh	r2, [r3, #38]	@ movhi
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 808              		.loc 1 1162 21
 809 0050 FB68     		ldr	r3, [r7, #12]
 810 0052 9B68     		ldr	r3, [r3, #8]
 811              		.loc 1 1162 8
 812 0054 B3F5805F 		cmp	r3, #4096
 813 0058 08D1     		bne	.L27
 814              		.loc 1 1162 71 discriminator 1
 815 005a FB68     		ldr	r3, [r7, #12]
 816 005c 1B69     		ldr	r3, [r3, #16]
 817              		.loc 1 1162 56 discriminator 1
 818 005e 002B     		cmp	r3, #0
 819 0060 04D1     		bne	.L27
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 820              		.loc 1 1164 19
 821 0062 0023     		movs	r3, #0
 822 0064 FB61     		str	r3, [r7, #28]
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (const uint16_t *) pData;
 823              		.loc 1 1165 19
 824 0066 BB68     		ldr	r3, [r7, #8]
 825 0068 BB61     		str	r3, [r7, #24]
 826 006a 03E0     		b	.L28
 827              	.L27:
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 828              		.loc 1 1169 19
 829 006c BB68     		ldr	r3, [r7, #8]
 830 006e FB61     		str	r3, [r7, #28]
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 831              		.loc 1 1170 19
 832 0070 0023     		movs	r3, #0
 833 0072 BB61     		str	r3, [r7, #24]
 834              	.L28:
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
 835              		.loc 1 1173 11
 836 0074 2AE0     		b	.L29
 837              	.L33:
ARM GAS  /tmp/cc17XZfc.s 			page 36


1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 838              		.loc 1 1175 11
 839 0076 3B68     		ldr	r3, [r7]
 840 0078 0093     		str	r3, [sp]
 841 007a 7B69     		ldr	r3, [r7, #20]
 842 007c 0022     		movs	r2, #0
 843 007e 8021     		movs	r1, #128
 844 0080 F868     		ldr	r0, [r7, #12]
 845 0082 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 846 0086 0346     		mov	r3, r0
 847              		.loc 1 1175 10
 848 0088 002B     		cmp	r3, #0
 849 008a 01D0     		beq	.L30
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 850              		.loc 1 1177 16
 851 008c 0323     		movs	r3, #3
 852 008e 36E0     		b	.L26
 853              	.L30:
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (pdata8bits == NULL)
 854              		.loc 1 1179 10
 855 0090 FB69     		ldr	r3, [r7, #28]
 856 0092 002B     		cmp	r3, #0
 857 0094 0BD1     		bne	.L31
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 858              		.loc 1 1181 42
 859 0096 BB69     		ldr	r3, [r7, #24]
 860 0098 1B88     		ldrh	r3, [r3]
 861              		.loc 1 1181 31
 862 009a 1A46     		mov	r2, r3
 863              		.loc 1 1181 14
 864 009c FB68     		ldr	r3, [r7, #12]
 865 009e 1B68     		ldr	r3, [r3]
 866              		.loc 1 1181 31
 867 00a0 C2F30802 		ubfx	r2, r2, #0, #9
 868              		.loc 1 1181 29
 869 00a4 5A60     		str	r2, [r3, #4]
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata16bits++;
 870              		.loc 1 1182 20
 871 00a6 BB69     		ldr	r3, [r7, #24]
 872 00a8 0233     		adds	r3, r3, #2
 873 00aa BB61     		str	r3, [r7, #24]
 874 00ac 07E0     		b	.L32
 875              	.L31:
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 876              		.loc 1 1186 41
 877 00ae FB69     		ldr	r3, [r7, #28]
 878 00b0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 879              		.loc 1 1186 14
 880 00b2 FB68     		ldr	r3, [r7, #12]
 881 00b4 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc17XZfc.s 			page 37


 882              		.loc 1 1186 29
 883 00b6 5A60     		str	r2, [r3, #4]
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata8bits++;
 884              		.loc 1 1187 19
 885 00b8 FB69     		ldr	r3, [r7, #28]
 886 00ba 0133     		adds	r3, r3, #1
 887 00bc FB61     		str	r3, [r7, #28]
 888              	.L32:
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->TxXferCount--;
 889              		.loc 1 1189 12
 890 00be FB68     		ldr	r3, [r7, #12]
 891 00c0 DB8C     		ldrh	r3, [r3, #38]	@ movhi
 892 00c2 9BB2     		uxth	r3, r3
 893              		.loc 1 1189 25
 894 00c4 013B     		subs	r3, r3, #1
 895 00c6 9AB2     		uxth	r2, r3
 896 00c8 FB68     		ldr	r3, [r7, #12]
 897 00ca DA84     		strh	r2, [r3, #38]	@ movhi
 898              	.L29:
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 899              		.loc 1 1173 17
 900 00cc FB68     		ldr	r3, [r7, #12]
 901 00ce DB8C     		ldrh	r3, [r3, #38]	@ movhi
 902 00d0 9BB2     		uxth	r3, r3
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 903              		.loc 1 1173 11
 904 00d2 002B     		cmp	r3, #0
 905 00d4 CFD1     		bne	.L33
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 906              		.loc 1 1192 9
 907 00d6 3B68     		ldr	r3, [r7]
 908 00d8 0093     		str	r3, [sp]
 909 00da 7B69     		ldr	r3, [r7, #20]
 910 00dc 0022     		movs	r2, #0
 911 00de 4021     		movs	r1, #64
 912 00e0 F868     		ldr	r0, [r7, #12]
 913 00e2 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 914 00e6 0346     		mov	r3, r0
 915              		.loc 1 1192 8
 916 00e8 002B     		cmp	r3, #0
 917 00ea 01D0     		beq	.L34
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_TIMEOUT;
 918              		.loc 1 1194 14
 919 00ec 0323     		movs	r3, #3
 920 00ee 06E0     		b	.L26
 921              	.L34:
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 922              		.loc 1 1198 19
 923 00f0 FB68     		ldr	r3, [r7, #12]
 924 00f2 2022     		movs	r2, #32
ARM GAS  /tmp/cc17XZfc.s 			page 38


 925 00f4 83F84120 		strb	r2, [r3, #65]
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 926              		.loc 1 1200 12
 927 00f8 0023     		movs	r3, #0
 928 00fa 00E0     		b	.L26
 929              	.L23:
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 930              		.loc 1 1204 12
 931 00fc 0223     		movs	r3, #2
 932              	.L26:
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 933              		.loc 1 1206 1
 934 00fe 1846     		mov	r0, r3
 935 0100 2037     		adds	r7, r7, #32
 936              	.LCFI40:
 937              		.cfi_def_cfa_offset 8
 938 0102 BD46     		mov	sp, r7
 939              	.LCFI41:
 940              		.cfi_def_cfa_register 13
 941              		@ sp needed
 942 0104 80BD     		pop	{r7, pc}
 943              		.cfi_endproc
 944              	.LFE72:
 946              		.section	.text.HAL_UART_Receive,"ax",%progbits
 947              		.align	1
 948              		.global	HAL_UART_Receive
 949              		.syntax unified
 950              		.thumb
 951              		.thumb_func
 953              	HAL_UART_Receive:
 954              	.LFB73:
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in blocking mode.
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 955              		.loc 1 1221 1
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 32
 958              		@ frame_needed = 1, uses_anonymous_args = 0
 959 0000 80B5     		push	{r7, lr}
 960              	.LCFI42:
ARM GAS  /tmp/cc17XZfc.s 			page 39


 961              		.cfi_def_cfa_offset 8
 962              		.cfi_offset 7, -8
 963              		.cfi_offset 14, -4
 964 0002 8AB0     		sub	sp, sp, #40
 965              	.LCFI43:
 966              		.cfi_def_cfa_offset 48
 967 0004 02AF     		add	r7, sp, #8
 968              	.LCFI44:
 969              		.cfi_def_cfa 7, 40
 970 0006 F860     		str	r0, [r7, #12]
 971 0008 B960     		str	r1, [r7, #8]
 972 000a 3B60     		str	r3, [r7]
 973 000c 1346     		mov	r3, r2	@ movhi
 974 000e FB80     		strh	r3, [r7, #6]	@ movhi
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart = 0U;
 975              		.loc 1 1224 12
 976 0010 0023     		movs	r3, #0
 977 0012 7B61     		str	r3, [r7, #20]
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 978              		.loc 1 1227 12
 979 0014 FB68     		ldr	r3, [r7, #12]
 980 0016 93F84230 		ldrb	r3, [r3, #66]
 981 001a DBB2     		uxtb	r3, r3
 982              		.loc 1 1227 6
 983 001c 202B     		cmp	r3, #32
 984 001e 7CD1     		bne	.L36
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 985              		.loc 1 1229 8
 986 0020 BB68     		ldr	r3, [r7, #8]
 987 0022 002B     		cmp	r3, #0
 988 0024 02D0     		beq	.L37
 989              		.loc 1 1229 25 discriminator 1
 990 0026 FB88     		ldrh	r3, [r7, #6]
 991 0028 002B     		cmp	r3, #0
 992 002a 01D1     		bne	.L38
 993              	.L37:
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 994              		.loc 1 1231 15
 995 002c 0123     		movs	r3, #1
 996 002e 75E0     		b	.L39
 997              	.L38:
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 998              		.loc 1 1234 22
 999 0030 FB68     		ldr	r3, [r7, #12]
 1000 0032 0022     		movs	r2, #0
 1001 0034 5A64     		str	r2, [r3, #68]
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1002              		.loc 1 1235 20
 1003 0036 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc17XZfc.s 			page 40


 1004 0038 2222     		movs	r2, #34
 1005 003a 83F84220 		strb	r2, [r3, #66]
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1006              		.loc 1 1236 26
 1007 003e FB68     		ldr	r3, [r7, #12]
 1008 0040 0022     		movs	r2, #0
 1009 0042 1A63     		str	r2, [r3, #48]
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 1010              		.loc 1 1239 17
 1011 0044 FFF7FEFF 		bl	HAL_GetTick
 1012 0048 7861     		str	r0, [r7, #20]
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize = Size;
 1013              		.loc 1 1241 23
 1014 004a FB68     		ldr	r3, [r7, #12]
 1015 004c FA88     		ldrh	r2, [r7, #6]	@ movhi
 1016 004e 9A85     		strh	r2, [r3, #44]	@ movhi
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 1017              		.loc 1 1242 24
 1018 0050 FB68     		ldr	r3, [r7, #12]
 1019 0052 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1020 0054 DA85     		strh	r2, [r3, #46]	@ movhi
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1021              		.loc 1 1245 21
 1022 0056 FB68     		ldr	r3, [r7, #12]
 1023 0058 9B68     		ldr	r3, [r3, #8]
 1024              		.loc 1 1245 8
 1025 005a B3F5805F 		cmp	r3, #4096
 1026 005e 08D1     		bne	.L40
 1027              		.loc 1 1245 71 discriminator 1
 1028 0060 FB68     		ldr	r3, [r7, #12]
 1029 0062 1B69     		ldr	r3, [r3, #16]
 1030              		.loc 1 1245 56 discriminator 1
 1031 0064 002B     		cmp	r3, #0
 1032 0066 04D1     		bne	.L40
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 1033              		.loc 1 1247 19
 1034 0068 0023     		movs	r3, #0
 1035 006a FB61     		str	r3, [r7, #28]
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 1036              		.loc 1 1248 19
 1037 006c BB68     		ldr	r3, [r7, #8]
 1038 006e BB61     		str	r3, [r7, #24]
 1039 0070 03E0     		b	.L41
 1040              	.L40:
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 1041              		.loc 1 1252 19
 1042 0072 BB68     		ldr	r3, [r7, #8]
 1043 0074 FB61     		str	r3, [r7, #28]
ARM GAS  /tmp/cc17XZfc.s 			page 41


1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 1044              		.loc 1 1253 19
 1045 0076 0023     		movs	r3, #0
 1046 0078 BB61     		str	r3, [r7, #24]
 1047              	.L41:
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check the remain data to be received */
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
 1048              		.loc 1 1257 11
 1049 007a 43E0     		b	.L42
 1050              	.L49:
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1051              		.loc 1 1259 11
 1052 007c 3B68     		ldr	r3, [r7]
 1053 007e 0093     		str	r3, [sp]
 1054 0080 7B69     		ldr	r3, [r7, #20]
 1055 0082 0022     		movs	r2, #0
 1056 0084 2021     		movs	r1, #32
 1057 0086 F868     		ldr	r0, [r7, #12]
 1058 0088 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1059 008c 0346     		mov	r3, r0
 1060              		.loc 1 1259 10
 1061 008e 002B     		cmp	r3, #0
 1062 0090 01D0     		beq	.L43
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 1063              		.loc 1 1261 16
 1064 0092 0323     		movs	r3, #3
 1065 0094 42E0     		b	.L39
 1066              	.L43:
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (pdata8bits == NULL)
 1067              		.loc 1 1263 10
 1068 0096 FB69     		ldr	r3, [r7, #28]
 1069 0098 002B     		cmp	r3, #0
 1070 009a 0CD1     		bne	.L44
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 1071              		.loc 1 1265 40
 1072 009c FB68     		ldr	r3, [r7, #12]
 1073 009e 1B68     		ldr	r3, [r3]
 1074              		.loc 1 1265 50
 1075 00a0 5B68     		ldr	r3, [r3, #4]
 1076              		.loc 1 1265 24
 1077 00a2 9BB2     		uxth	r3, r3
 1078 00a4 C3F30803 		ubfx	r3, r3, #0, #9
 1079 00a8 9AB2     		uxth	r2, r3
 1080              		.loc 1 1265 22
 1081 00aa BB69     		ldr	r3, [r7, #24]
 1082 00ac 1A80     		strh	r2, [r3]	@ movhi
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata16bits++;
 1083              		.loc 1 1266 20
 1084 00ae BB69     		ldr	r3, [r7, #24]
 1085 00b0 0233     		adds	r3, r3, #2
 1086 00b2 BB61     		str	r3, [r7, #24]
ARM GAS  /tmp/cc17XZfc.s 			page 42


 1087 00b4 1FE0     		b	.L45
 1088              	.L44:
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORD
 1089              		.loc 1 1270 25
 1090 00b6 FB68     		ldr	r3, [r7, #12]
 1091 00b8 9B68     		ldr	r3, [r3, #8]
 1092              		.loc 1 1270 12
 1093 00ba B3F5805F 		cmp	r3, #4096
 1094 00be 07D0     		beq	.L46
 1095              		.loc 1 1270 76 discriminator 1
 1096 00c0 FB68     		ldr	r3, [r7, #12]
 1097 00c2 9B68     		ldr	r3, [r3, #8]
 1098              		.loc 1 1270 60 discriminator 1
 1099 00c4 002B     		cmp	r3, #0
 1100 00c6 0AD1     		bne	.L47
 1101              		.loc 1 1270 126 discriminator 2
 1102 00c8 FB68     		ldr	r3, [r7, #12]
 1103 00ca 1B69     		ldr	r3, [r3, #16]
 1104              		.loc 1 1270 111 discriminator 2
 1105 00cc 002B     		cmp	r3, #0
 1106 00ce 06D1     		bne	.L47
 1107              	.L46:
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 1108              		.loc 1 1272 40
 1109 00d0 FB68     		ldr	r3, [r7, #12]
 1110 00d2 1B68     		ldr	r3, [r3]
 1111              		.loc 1 1272 50
 1112 00d4 5B68     		ldr	r3, [r3, #4]
 1113              		.loc 1 1272 25
 1114 00d6 DAB2     		uxtb	r2, r3
 1115              		.loc 1 1272 23
 1116 00d8 FB69     		ldr	r3, [r7, #28]
 1117 00da 1A70     		strb	r2, [r3]
 1118 00dc 08E0     		b	.L48
 1119              	.L47:
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 1120              		.loc 1 1276 40
 1121 00de FB68     		ldr	r3, [r7, #12]
 1122 00e0 1B68     		ldr	r3, [r3]
 1123              		.loc 1 1276 50
 1124 00e2 5B68     		ldr	r3, [r3, #4]
 1125              		.loc 1 1276 25
 1126 00e4 DBB2     		uxtb	r3, r3
 1127 00e6 03F07F03 		and	r3, r3, #127
 1128 00ea DAB2     		uxtb	r2, r3
 1129              		.loc 1 1276 23
 1130 00ec FB69     		ldr	r3, [r7, #28]
 1131 00ee 1A70     		strb	r2, [r3]
 1132              	.L48:
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
ARM GAS  /tmp/cc17XZfc.s 			page 43


1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         pdata8bits++;
 1133              		.loc 1 1278 19
 1134 00f0 FB69     		ldr	r3, [r7, #28]
 1135 00f2 0133     		adds	r3, r3, #1
 1136 00f4 FB61     		str	r3, [r7, #28]
 1137              	.L45:
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxXferCount--;
 1138              		.loc 1 1280 12
 1139 00f6 FB68     		ldr	r3, [r7, #12]
 1140 00f8 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1141 00fa 9BB2     		uxth	r3, r3
 1142              		.loc 1 1280 25
 1143 00fc 013B     		subs	r3, r3, #1
 1144 00fe 9AB2     		uxth	r2, r3
 1145 0100 FB68     		ldr	r3, [r7, #12]
 1146 0102 DA85     		strh	r2, [r3, #46]	@ movhi
 1147              	.L42:
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1148              		.loc 1 1257 17
 1149 0104 FB68     		ldr	r3, [r7, #12]
 1150 0106 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1151 0108 9BB2     		uxth	r3, r3
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 1152              		.loc 1 1257 11
 1153 010a 002B     		cmp	r3, #0
 1154 010c B6D1     		bne	.L49
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1155              		.loc 1 1284 20
 1156 010e FB68     		ldr	r3, [r7, #12]
 1157 0110 2022     		movs	r2, #32
 1158 0112 83F84220 		strb	r2, [r3, #66]
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1159              		.loc 1 1286 12
 1160 0116 0023     		movs	r3, #0
 1161 0118 00E0     		b	.L39
 1162              	.L36:
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1163              		.loc 1 1290 12
 1164 011a 0223     		movs	r3, #2
 1165              	.L39:
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1166              		.loc 1 1292 1
 1167 011c 1846     		mov	r0, r3
 1168 011e 2037     		adds	r7, r7, #32
 1169              	.LCFI45:
 1170              		.cfi_def_cfa_offset 8
 1171 0120 BD46     		mov	sp, r7
 1172              	.LCFI46:
ARM GAS  /tmp/cc17XZfc.s 			page 44


 1173              		.cfi_def_cfa_register 13
 1174              		@ sp needed
 1175 0122 80BD     		pop	{r7, pc}
 1176              		.cfi_endproc
 1177              	.LFE73:
 1179              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 1180              		.align	1
 1181              		.global	HAL_UART_Transmit_IT
 1182              		.syntax unified
 1183              		.thumb
 1184              		.thumb_func
 1186              	HAL_UART_Transmit_IT:
 1187              	.LFB74:
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Si
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1188              		.loc 1 1306 1
 1189              		.cfi_startproc
 1190              		@ args = 0, pretend = 0, frame = 16
 1191              		@ frame_needed = 1, uses_anonymous_args = 0
 1192              		@ link register save eliminated.
 1193 0000 80B4     		push	{r7}
 1194              	.LCFI47:
 1195              		.cfi_def_cfa_offset 4
 1196              		.cfi_offset 7, -4
 1197 0002 85B0     		sub	sp, sp, #20
 1198              	.LCFI48:
 1199              		.cfi_def_cfa_offset 24
 1200 0004 00AF     		add	r7, sp, #0
 1201              	.LCFI49:
 1202              		.cfi_def_cfa_register 7
 1203 0006 F860     		str	r0, [r7, #12]
 1204 0008 B960     		str	r1, [r7, #8]
 1205 000a 1346     		mov	r3, r2
 1206 000c FB80     		strh	r3, [r7, #6]	@ movhi
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1207              		.loc 1 1308 12
 1208 000e FB68     		ldr	r3, [r7, #12]
 1209 0010 93F84130 		ldrb	r3, [r3, #65]
 1210 0014 DBB2     		uxtb	r3, r3
 1211              		.loc 1 1308 6
 1212 0016 202B     		cmp	r3, #32
 1213 0018 21D1     		bne	.L51
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
ARM GAS  /tmp/cc17XZfc.s 			page 45


 1214              		.loc 1 1310 8
 1215 001a BB68     		ldr	r3, [r7, #8]
 1216 001c 002B     		cmp	r3, #0
 1217 001e 02D0     		beq	.L52
 1218              		.loc 1 1310 25 discriminator 1
 1219 0020 FB88     		ldrh	r3, [r7, #6]
 1220 0022 002B     		cmp	r3, #0
 1221 0024 01D1     		bne	.L53
 1222              	.L52:
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1223              		.loc 1 1312 14
 1224 0026 0123     		movs	r3, #1
 1225 0028 1AE0     		b	.L54
 1226              	.L53:
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1227              		.loc 1 1315 23
 1228 002a FB68     		ldr	r3, [r7, #12]
 1229 002c BA68     		ldr	r2, [r7, #8]
 1230 002e 1A62     		str	r2, [r3, #32]
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1231              		.loc 1 1316 23
 1232 0030 FB68     		ldr	r3, [r7, #12]
 1233 0032 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1234 0034 9A84     		strh	r2, [r3, #36]	@ movhi
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1235              		.loc 1 1317 24
 1236 0036 FB68     		ldr	r3, [r7, #12]
 1237 0038 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1238 003a DA84     		strh	r2, [r3, #38]	@ movhi
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1239              		.loc 1 1319 22
 1240 003c FB68     		ldr	r3, [r7, #12]
 1241 003e 0022     		movs	r2, #0
 1242 0040 5A64     		str	r2, [r3, #68]
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1243              		.loc 1 1320 19
 1244 0042 FB68     		ldr	r3, [r7, #12]
 1245 0044 2122     		movs	r2, #33
 1246 0046 83F84120 		strb	r2, [r3, #65]
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit data register empty Interrupt */
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 1247              		.loc 1 1323 5
 1248 004a FB68     		ldr	r3, [r7, #12]
 1249 004c 1B68     		ldr	r3, [r3]
 1250 004e DA68     		ldr	r2, [r3, #12]
 1251 0050 FB68     		ldr	r3, [r7, #12]
 1252 0052 1B68     		ldr	r3, [r3]
 1253 0054 42F08002 		orr	r2, r2, #128
 1254 0058 DA60     		str	r2, [r3, #12]
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1255              		.loc 1 1325 12
ARM GAS  /tmp/cc17XZfc.s 			page 46


 1256 005a 0023     		movs	r3, #0
 1257 005c 00E0     		b	.L54
 1258              	.L51:
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1259              		.loc 1 1329 12
 1260 005e 0223     		movs	r3, #2
 1261              	.L54:
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1262              		.loc 1 1331 1
 1263 0060 1846     		mov	r0, r3
 1264 0062 1437     		adds	r7, r7, #20
 1265              	.LCFI50:
 1266              		.cfi_def_cfa_offset 4
 1267 0064 BD46     		mov	sp, r7
 1268              	.LCFI51:
 1269              		.cfi_def_cfa_register 13
 1270              		@ sp needed
 1271 0066 80BC     		pop	{r7}
 1272              	.LCFI52:
 1273              		.cfi_restore 7
 1274              		.cfi_def_cfa_offset 0
 1275 0068 7047     		bx	lr
 1276              		.cfi_endproc
 1277              	.LFE74:
 1279              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1280              		.align	1
 1281              		.global	HAL_UART_Receive_IT
 1282              		.syntax unified
 1283              		.thumb
 1284              		.thumb_func
 1286              	HAL_UART_Receive_IT:
 1287              	.LFB75:
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode.
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1288              		.loc 1 1345 1
 1289              		.cfi_startproc
 1290              		@ args = 0, pretend = 0, frame = 16
 1291              		@ frame_needed = 1, uses_anonymous_args = 0
 1292 0000 80B5     		push	{r7, lr}
 1293              	.LCFI53:
 1294              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc17XZfc.s 			page 47


 1295              		.cfi_offset 7, -8
 1296              		.cfi_offset 14, -4
 1297 0002 84B0     		sub	sp, sp, #16
 1298              	.LCFI54:
 1299              		.cfi_def_cfa_offset 24
 1300 0004 00AF     		add	r7, sp, #0
 1301              	.LCFI55:
 1302              		.cfi_def_cfa_register 7
 1303 0006 F860     		str	r0, [r7, #12]
 1304 0008 B960     		str	r1, [r7, #8]
 1305 000a 1346     		mov	r3, r2
 1306 000c FB80     		strh	r3, [r7, #6]	@ movhi
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1307              		.loc 1 1347 12
 1308 000e FB68     		ldr	r3, [r7, #12]
 1309 0010 93F84230 		ldrb	r3, [r3, #66]
 1310 0014 DBB2     		uxtb	r3, r3
 1311              		.loc 1 1347 6
 1312 0016 202B     		cmp	r3, #32
 1313 0018 12D1     		bne	.L56
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1314              		.loc 1 1349 8
 1315 001a BB68     		ldr	r3, [r7, #8]
 1316 001c 002B     		cmp	r3, #0
 1317 001e 02D0     		beq	.L57
 1318              		.loc 1 1349 25 discriminator 1
 1319 0020 FB88     		ldrh	r3, [r7, #6]
 1320 0022 002B     		cmp	r3, #0
 1321 0024 01D1     		bne	.L58
 1322              	.L57:
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1323              		.loc 1 1351 14
 1324 0026 0123     		movs	r3, #1
 1325 0028 0BE0     		b	.L59
 1326              	.L58:
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1327              		.loc 1 1355 26
 1328 002a FB68     		ldr	r3, [r7, #12]
 1329 002c 0022     		movs	r2, #0
 1330 002e 1A63     		str	r2, [r3, #48]
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return (UART_Start_Receive_IT(huart, pData, Size));
 1331              		.loc 1 1357 13
 1332 0030 FB88     		ldrh	r3, [r7, #6]
 1333 0032 1A46     		mov	r2, r3
 1334 0034 B968     		ldr	r1, [r7, #8]
 1335 0036 F868     		ldr	r0, [r7, #12]
 1336 0038 FFF7FEFF 		bl	UART_Start_Receive_IT
 1337 003c 0346     		mov	r3, r0
 1338 003e 00E0     		b	.L59
 1339              	.L56:
ARM GAS  /tmp/cc17XZfc.s 			page 48


1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1340              		.loc 1 1361 12
 1341 0040 0223     		movs	r3, #2
 1342              	.L59:
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1343              		.loc 1 1363 1
 1344 0042 1846     		mov	r0, r3
 1345 0044 1037     		adds	r7, r7, #16
 1346              	.LCFI56:
 1347              		.cfi_def_cfa_offset 8
 1348 0046 BD46     		mov	sp, r7
 1349              	.LCFI57:
 1350              		.cfi_def_cfa_register 13
 1351              		@ sp needed
 1352 0048 80BD     		pop	{r7, pc}
 1353              		.cfi_endproc
 1354              	.LFE75:
 1356              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 1357              		.align	1
 1358              		.global	HAL_UART_Transmit_DMA
 1359              		.syntax unified
 1360              		.thumb
 1361              		.thumb_func
 1363              	HAL_UART_Transmit_DMA:
 1364              	.LFB76:
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in DMA mode.
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 provided through pData.
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be sent
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t S
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1365              		.loc 1 1377 1
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 48
 1368              		@ frame_needed = 1, uses_anonymous_args = 0
 1369 0000 80B5     		push	{r7, lr}
 1370              	.LCFI58:
 1371              		.cfi_def_cfa_offset 8
 1372              		.cfi_offset 7, -8
 1373              		.cfi_offset 14, -4
 1374 0002 8CB0     		sub	sp, sp, #48
 1375              	.LCFI59:
 1376              		.cfi_def_cfa_offset 56
 1377 0004 00AF     		add	r7, sp, #0
 1378              	.LCFI60:
ARM GAS  /tmp/cc17XZfc.s 			page 49


 1379              		.cfi_def_cfa_register 7
 1380 0006 F860     		str	r0, [r7, #12]
 1381 0008 B960     		str	r1, [r7, #8]
 1382 000a 1346     		mov	r3, r2
 1383 000c FB80     		strh	r3, [r7, #6]	@ movhi
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   const uint32_t *tmp;
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1384              		.loc 1 1381 12
 1385 000e FB68     		ldr	r3, [r7, #12]
 1386 0010 93F84130 		ldrb	r3, [r3, #65]
 1387 0014 DBB2     		uxtb	r3, r3
 1388              		.loc 1 1381 6
 1389 0016 202B     		cmp	r3, #32
 1390 0018 56D1     		bne	.L61
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1391              		.loc 1 1383 16
 1392 001a BB68     		ldr	r3, [r7, #8]
 1393              		.loc 1 1383 8
 1394 001c 002B     		cmp	r3, #0
 1395 001e 02D0     		beq	.L62
 1396              		.loc 1 1383 25 discriminator 1
 1397 0020 FB88     		ldrh	r3, [r7, #6]
 1398 0022 002B     		cmp	r3, #0
 1399 0024 01D1     		bne	.L63
 1400              	.L62:
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1401              		.loc 1 1385 14
 1402 0026 0123     		movs	r3, #1
 1403 0028 4FE0     		b	.L64
 1404              	.L63:
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1405              		.loc 1 1388 23
 1406 002a BA68     		ldr	r2, [r7, #8]
 1407 002c FB68     		ldr	r3, [r7, #12]
 1408 002e 1A62     		str	r2, [r3, #32]
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1409              		.loc 1 1389 23
 1410 0030 FB68     		ldr	r3, [r7, #12]
 1411 0032 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1412 0034 9A84     		strh	r2, [r3, #36]	@ movhi
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1413              		.loc 1 1390 24
 1414 0036 FB68     		ldr	r3, [r7, #12]
 1415 0038 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1416 003a DA84     		strh	r2, [r3, #38]	@ movhi
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1417              		.loc 1 1392 22
 1418 003c FB68     		ldr	r3, [r7, #12]
 1419 003e 0022     		movs	r2, #0
 1420 0040 5A64     		str	r2, [r3, #68]
ARM GAS  /tmp/cc17XZfc.s 			page 50


1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1421              		.loc 1 1393 19
 1422 0042 FB68     		ldr	r3, [r7, #12]
 1423 0044 2122     		movs	r2, #33
 1424 0046 83F84120 		strb	r2, [r3, #65]
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 1425              		.loc 1 1396 10
 1426 004a FB68     		ldr	r3, [r7, #12]
 1427 004c 9B6B     		ldr	r3, [r3, #56]
 1428              		.loc 1 1396 37
 1429 004e 214A     		ldr	r2, .L68
 1430 0050 9A62     		str	r2, [r3, #40]
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 1431              		.loc 1 1399 10
 1432 0052 FB68     		ldr	r3, [r7, #12]
 1433 0054 9B6B     		ldr	r3, [r3, #56]
 1434              		.loc 1 1399 41
 1435 0056 204A     		ldr	r2, .L68+4
 1436 0058 DA62     		str	r2, [r3, #44]
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA error callback */
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
 1437              		.loc 1 1402 10
 1438 005a FB68     		ldr	r3, [r7, #12]
 1439 005c 9B6B     		ldr	r3, [r3, #56]
 1440              		.loc 1 1402 38
 1441 005e 1F4A     		ldr	r2, .L68+8
 1442 0060 1A63     		str	r2, [r3, #48]
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set the DMA abort callback */
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->hdmatx->XferAbortCallback = NULL;
 1443              		.loc 1 1405 10
 1444 0062 FB68     		ldr	r3, [r7, #12]
 1445 0064 9B6B     		ldr	r3, [r3, #56]
 1446              		.loc 1 1405 38
 1447 0066 0022     		movs	r2, #0
 1448 0068 5A63     		str	r2, [r3, #52]
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART transmit DMA channel */
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tmp = (const uint32_t *)&pData;
 1449              		.loc 1 1408 9
 1450 006a 07F10803 		add	r3, r7, #8
 1451 006e FB62     		str	r3, [r7, #44]
1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 1452              		.loc 1 1409 5
 1453 0070 FB68     		ldr	r3, [r7, #12]
 1454 0072 986B     		ldr	r0, [r3, #56]
 1455 0074 FB6A     		ldr	r3, [r7, #44]
 1456 0076 1968     		ldr	r1, [r3]
 1457              		.loc 1 1409 77
 1458 0078 FB68     		ldr	r3, [r7, #12]
 1459 007a 1B68     		ldr	r3, [r3]
 1460              		.loc 1 1409 71
ARM GAS  /tmp/cc17XZfc.s 			page 51


 1461 007c 0433     		adds	r3, r3, #4
 1462              		.loc 1 1409 5
 1463 007e 1A46     		mov	r2, r3
 1464 0080 FB88     		ldrh	r3, [r7, #6]
 1465 0082 FFF7FEFF 		bl	HAL_DMA_Start_IT
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 1466              		.loc 1 1412 5
 1467 0086 FB68     		ldr	r3, [r7, #12]
 1468 0088 1B68     		ldr	r3, [r3]
 1469 008a 6FF04002 		mvn	r2, #64
 1470 008e 1A60     		str	r2, [r3]
 1471              	.L67:
 1472              	.LBB320:
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1473              		.loc 1 1416 5 discriminator 1
 1474 0090 FB68     		ldr	r3, [r7, #12]
 1475 0092 1B68     		ldr	r3, [r3]
 1476 0094 1433     		adds	r3, r3, #20
 1477 0096 BB61     		str	r3, [r7, #24]
 1478              	.LBB321:
 1479              	.LBB322:
 1480              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
ARM GAS  /tmp/cc17XZfc.s 			page 52


  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/cc17XZfc.s 			page 53


  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc17XZfc.s 			page 54


 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
ARM GAS  /tmp/cc17XZfc.s 			page 55


 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
ARM GAS  /tmp/cc17XZfc.s 			page 56


 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc17XZfc.s 			page 57


 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
ARM GAS  /tmp/cc17XZfc.s 			page 58


 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc17XZfc.s 			page 59


 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc17XZfc.s 			page 60


 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc17XZfc.s 			page 61


 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
ARM GAS  /tmp/cc17XZfc.s 			page 62


 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc17XZfc.s 			page 63


 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc17XZfc.s 			page 64


 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
ARM GAS  /tmp/cc17XZfc.s 			page 65


 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
ARM GAS  /tmp/cc17XZfc.s 			page 66


 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
ARM GAS  /tmp/cc17XZfc.s 			page 67


 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
ARM GAS  /tmp/cc17XZfc.s 			page 68


 943:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 982:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 984:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 995:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
ARM GAS  /tmp/cc17XZfc.s 			page 69


1000:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1002:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1003:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1004:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1005:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1006:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1007:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1008:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1009:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1010:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1011:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CLZ             (uint8_t)__builtin_clz
1012:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1013:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1014:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1015:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1016:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1017:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
1018:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1019:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
1020:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
1021:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1022:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1023:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1024:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
1025:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1026:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1027:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1028:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1029:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
1030:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1031:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1032:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1033:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1034:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1035:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1036:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
1037:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1038:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1039:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1040:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1041:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
1042:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
1043:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1044:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1045:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1046:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
1047:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1048:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1049:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1050:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1051:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
1052:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1053:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1054:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1055:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1056:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
ARM GAS  /tmp/cc17XZfc.s 			page 70


1057:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1058:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
1059:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1060:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1061:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1062:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1063:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
1064:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
1065:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1066:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1067:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
1069:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1070:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1071:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 1481              		.loc 2 1072 4 discriminator 1
 1482 0098 BB69     		ldr	r3, [r7, #24]
 1483              		.syntax unified
 1484              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1485 009a 53E8003F 		ldrex r3, [r3]
 1486              	@ 0 "" 2
 1487              		.thumb
 1488              		.syntax unified
 1489 009e 7B61     		str	r3, [r7, #20]
1073:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1490              		.loc 2 1073 10 discriminator 1
 1491 00a0 7B69     		ldr	r3, [r7, #20]
 1492              	.LBE322:
 1493              	.LBE321:
 1494              		.loc 1 1416 5 discriminator 1
 1495 00a2 43F08003 		orr	r3, r3, #128
 1496 00a6 BB62     		str	r3, [r7, #40]
 1497 00a8 FB68     		ldr	r3, [r7, #12]
 1498 00aa 1B68     		ldr	r3, [r3]
 1499 00ac 1433     		adds	r3, r3, #20
 1500 00ae BA6A     		ldr	r2, [r7, #40]
 1501 00b0 7A62     		str	r2, [r7, #36]
 1502 00b2 3B62     		str	r3, [r7, #32]
 1503              	.LBB323:
 1504              	.LBB324:
1074:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1075:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1076:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1077:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1078:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
1079:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
1080:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1081:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1082:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1083:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1084:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1085:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
1086:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1087:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1088:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
ARM GAS  /tmp/cc17XZfc.s 			page 71


1090:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1091:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1092:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1093:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1094:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1095:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
1096:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
1097:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1098:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1099:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1100:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1101:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1102:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
1103:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1104:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1105:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1106:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1107:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1108:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1109:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1110:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1111:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1112:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
1113:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
1114:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1119:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
1120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1121:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 1505              		.loc 2 1123 4 discriminator 1
 1506 00b4 396A     		ldr	r1, [r7, #32]
 1507 00b6 7A6A     		ldr	r2, [r7, #36]
 1508              		.syntax unified
 1509              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1510 00b8 41E80023 		strex r3, r2, [r1]
 1511              	@ 0 "" 2
 1512              		.thumb
 1513              		.syntax unified
 1514 00bc FB61     		str	r3, [r7, #28]
1124:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1515              		.loc 2 1124 10 discriminator 1
 1516 00be FB69     		ldr	r3, [r7, #28]
 1517              	.LBE324:
 1518              	.LBE323:
 1519              		.loc 1 1416 5 discriminator 1
 1520 00c0 002B     		cmp	r3, #0
 1521 00c2 E5D1     		bne	.L67
 1522              	.LBE320:
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 1523              		.loc 1 1418 12
 1524 00c4 0023     		movs	r3, #0
ARM GAS  /tmp/cc17XZfc.s 			page 72


 1525 00c6 00E0     		b	.L64
 1526              	.L61:
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1527              		.loc 1 1422 12
 1528 00c8 0223     		movs	r3, #2
 1529              	.L64:
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1530              		.loc 1 1424 1
 1531 00ca 1846     		mov	r0, r3
 1532 00cc 3037     		adds	r7, r7, #48
 1533              	.LCFI61:
 1534              		.cfi_def_cfa_offset 8
 1535 00ce BD46     		mov	sp, r7
 1536              	.LCFI62:
 1537              		.cfi_def_cfa_register 13
 1538              		@ sp needed
 1539 00d0 80BD     		pop	{r7, pc}
 1540              	.L69:
 1541 00d2 00BF     		.align	2
 1542              	.L68:
 1543 00d4 00000000 		.word	UART_DMATransmitCplt
 1544 00d8 00000000 		.word	UART_DMATxHalfCplt
 1545 00dc 00000000 		.word	UART_DMAError
 1546              		.cfi_endproc
 1547              	.LFE76:
 1549              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1550              		.align	1
 1551              		.global	HAL_UART_Receive_DMA
 1552              		.syntax unified
 1553              		.thumb
 1554              		.thumb_func
 1556              	HAL_UART_Receive_DMA:
 1557              	.LFB77:
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in DMA mode.
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of u16 available through pData.
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART module.
1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1558              		.loc 1 1439 1
 1559              		.cfi_startproc
 1560              		@ args = 0, pretend = 0, frame = 16
 1561              		@ frame_needed = 1, uses_anonymous_args = 0
 1562 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/cc17XZfc.s 			page 73


 1563              	.LCFI63:
 1564              		.cfi_def_cfa_offset 8
 1565              		.cfi_offset 7, -8
 1566              		.cfi_offset 14, -4
 1567 0002 84B0     		sub	sp, sp, #16
 1568              	.LCFI64:
 1569              		.cfi_def_cfa_offset 24
 1570 0004 00AF     		add	r7, sp, #0
 1571              	.LCFI65:
 1572              		.cfi_def_cfa_register 7
 1573 0006 F860     		str	r0, [r7, #12]
 1574 0008 B960     		str	r1, [r7, #8]
 1575 000a 1346     		mov	r3, r2
 1576 000c FB80     		strh	r3, [r7, #6]	@ movhi
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1577              		.loc 1 1441 12
 1578 000e FB68     		ldr	r3, [r7, #12]
 1579 0010 93F84230 		ldrb	r3, [r3, #66]
 1580 0014 DBB2     		uxtb	r3, r3
 1581              		.loc 1 1441 6
 1582 0016 202B     		cmp	r3, #32
 1583 0018 12D1     		bne	.L71
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1584              		.loc 1 1443 8
 1585 001a BB68     		ldr	r3, [r7, #8]
 1586 001c 002B     		cmp	r3, #0
 1587 001e 02D0     		beq	.L72
 1588              		.loc 1 1443 25 discriminator 1
 1589 0020 FB88     		ldrh	r3, [r7, #6]
 1590 0022 002B     		cmp	r3, #0
 1591 0024 01D1     		bne	.L73
 1592              	.L72:
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 1593              		.loc 1 1445 14
 1594 0026 0123     		movs	r3, #1
 1595 0028 0BE0     		b	.L74
 1596              	.L73:
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1597              		.loc 1 1449 26
 1598 002a FB68     		ldr	r3, [r7, #12]
 1599 002c 0022     		movs	r2, #0
 1600 002e 1A63     		str	r2, [r3, #48]
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return (UART_Start_Receive_DMA(huart, pData, Size));
 1601              		.loc 1 1451 13
 1602 0030 FB88     		ldrh	r3, [r7, #6]
 1603 0032 1A46     		mov	r2, r3
 1604 0034 B968     		ldr	r1, [r7, #8]
 1605 0036 F868     		ldr	r0, [r7, #12]
 1606 0038 FFF7FEFF 		bl	UART_Start_Receive_DMA
 1607 003c 0346     		mov	r3, r0
ARM GAS  /tmp/cc17XZfc.s 			page 74


 1608 003e 00E0     		b	.L74
 1609              	.L71:
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 1610              		.loc 1 1455 12
 1611 0040 0223     		movs	r3, #2
 1612              	.L74:
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1613              		.loc 1 1457 1
 1614 0042 1846     		mov	r0, r3
 1615 0044 1037     		adds	r7, r7, #16
 1616              	.LCFI66:
 1617              		.cfi_def_cfa_offset 8
 1618 0046 BD46     		mov	sp, r7
 1619              	.LCFI67:
 1620              		.cfi_def_cfa_register 13
 1621              		@ sp needed
 1622 0048 80BD     		pop	{r7, pc}
 1623              		.cfi_endproc
 1624              	.LFE77:
 1626              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 1627              		.align	1
 1628              		.global	HAL_UART_DMAPause
 1629              		.syntax unified
 1630              		.thumb
 1631              		.thumb_func
 1633              	HAL_UART_DMAPause:
 1634              	.LFB78:
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Pauses the DMA Transfer.
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1635              		.loc 1 1466 1
 1636              		.cfi_startproc
 1637              		@ args = 0, pretend = 0, frame = 112
 1638              		@ frame_needed = 1, uses_anonymous_args = 0
 1639              		@ link register save eliminated.
 1640 0000 80B4     		push	{r7}
 1641              	.LCFI68:
 1642              		.cfi_def_cfa_offset 4
 1643              		.cfi_offset 7, -4
 1644 0002 9DB0     		sub	sp, sp, #116
 1645              	.LCFI69:
 1646              		.cfi_def_cfa_offset 120
 1647 0004 00AF     		add	r7, sp, #0
 1648              	.LCFI70:
 1649              		.cfi_def_cfa_register 7
 1650 0006 7860     		str	r0, [r7, #4]
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
ARM GAS  /tmp/cc17XZfc.s 			page 75


 1651              		.loc 1 1467 12
 1652 0008 0023     		movs	r3, #0
 1653 000a FB66     		str	r3, [r7, #108]
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 1654              		.loc 1 1469 16
 1655 000c 7B68     		ldr	r3, [r7, #4]
 1656 000e 1B68     		ldr	r3, [r3]
 1657 0010 5B69     		ldr	r3, [r3, #20]
 1658 0012 03F08003 		and	r3, r3, #128
 1659 0016 002B     		cmp	r3, #0
 1660 0018 14BF     		ite	ne
 1661 001a 0123     		movne	r3, #1
 1662 001c 0023     		moveq	r3, #0
 1663 001e DBB2     		uxtb	r3, r3
 1664              		.loc 1 1469 14
 1665 0020 FB66     		str	r3, [r7, #108]
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1666              		.loc 1 1470 13
 1667 0022 7B68     		ldr	r3, [r7, #4]
 1668 0024 93F84130 		ldrb	r3, [r3, #65]
 1669 0028 DBB2     		uxtb	r3, r3
 1670              		.loc 1 1470 6
 1671 002a 212B     		cmp	r3, #33
 1672 002c 1CD1     		bne	.L76
 1673              		.loc 1 1470 49 discriminator 1
 1674 002e FB6E     		ldr	r3, [r7, #108]
 1675 0030 002B     		cmp	r3, #0
 1676 0032 19D0     		beq	.L76
 1677              	.L79:
 1678              	.LBB325:
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1679              		.loc 1 1473 5 discriminator 1
 1680 0034 7B68     		ldr	r3, [r7, #4]
 1681 0036 1B68     		ldr	r3, [r3]
 1682 0038 1433     		adds	r3, r3, #20
 1683 003a FB64     		str	r3, [r7, #76]
 1684              	.LBB326:
 1685              	.LBB327:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1686              		.loc 2 1072 4 discriminator 1
 1687 003c FB6C     		ldr	r3, [r7, #76]
 1688              		.syntax unified
 1689              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1690 003e 53E8003F 		ldrex r3, [r3]
 1691              	@ 0 "" 2
 1692              		.thumb
 1693              		.syntax unified
 1694 0042 BB64     		str	r3, [r7, #72]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1695              		.loc 2 1073 10 discriminator 1
 1696 0044 BB6C     		ldr	r3, [r7, #72]
 1697              	.LBE327:
 1698              	.LBE326:
 1699              		.loc 1 1473 5 discriminator 1
ARM GAS  /tmp/cc17XZfc.s 			page 76


 1700 0046 23F08003 		bic	r3, r3, #128
 1701 004a BB66     		str	r3, [r7, #104]
 1702 004c 7B68     		ldr	r3, [r7, #4]
 1703 004e 1B68     		ldr	r3, [r3]
 1704 0050 1433     		adds	r3, r3, #20
 1705 0052 BA6E     		ldr	r2, [r7, #104]
 1706 0054 BA65     		str	r2, [r7, #88]
 1707 0056 7B65     		str	r3, [r7, #84]
 1708              	.LBB328:
 1709              	.LBB329:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1710              		.loc 2 1123 4 discriminator 1
 1711 0058 796D     		ldr	r1, [r7, #84]
 1712 005a BA6D     		ldr	r2, [r7, #88]
 1713              		.syntax unified
 1714              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1715 005c 41E80023 		strex r3, r2, [r1]
 1716              	@ 0 "" 2
 1717              		.thumb
 1718              		.syntax unified
 1719 0060 3B65     		str	r3, [r7, #80]
 1720              		.loc 2 1124 10 discriminator 1
 1721 0062 3B6D     		ldr	r3, [r7, #80]
 1722              	.LBE329:
 1723              	.LBE328:
 1724              		.loc 1 1473 5 discriminator 1
 1725 0064 002B     		cmp	r3, #0
 1726 0066 E5D1     		bne	.L79
 1727              	.L76:
 1728              	.LBE325:
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 1729              		.loc 1 1476 16
 1730 0068 7B68     		ldr	r3, [r7, #4]
 1731 006a 1B68     		ldr	r3, [r3]
 1732 006c 5B69     		ldr	r3, [r3, #20]
 1733 006e 03F04003 		and	r3, r3, #64
 1734 0072 002B     		cmp	r3, #0
 1735 0074 14BF     		ite	ne
 1736 0076 0123     		movne	r3, #1
 1737 0078 0023     		moveq	r3, #0
 1738 007a DBB2     		uxtb	r3, r3
 1739              		.loc 1 1476 14
 1740 007c FB66     		str	r3, [r7, #108]
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1741              		.loc 1 1477 13
 1742 007e 7B68     		ldr	r3, [r7, #4]
 1743 0080 93F84230 		ldrb	r3, [r3, #66]
 1744 0084 DBB2     		uxtb	r3, r3
 1745              		.loc 1 1477 6
 1746 0086 222B     		cmp	r3, #34
 1747 0088 50D1     		bne	.L80
 1748              		.loc 1 1477 50 discriminator 1
 1749 008a FB6E     		ldr	r3, [r7, #108]
 1750 008c 002B     		cmp	r3, #0
 1751 008e 4DD0     		beq	.L80
ARM GAS  /tmp/cc17XZfc.s 			page 77


 1752              	.L83:
 1753              	.LBB330:
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1754              		.loc 1 1480 5 discriminator 1
 1755 0090 7B68     		ldr	r3, [r7, #4]
 1756 0092 1B68     		ldr	r3, [r3]
 1757 0094 0C33     		adds	r3, r3, #12
 1758 0096 BB63     		str	r3, [r7, #56]
 1759              	.LBB331:
 1760              	.LBB332:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1761              		.loc 2 1072 4 discriminator 1
 1762 0098 BB6B     		ldr	r3, [r7, #56]
 1763              		.syntax unified
 1764              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1765 009a 53E8003F 		ldrex r3, [r3]
 1766              	@ 0 "" 2
 1767              		.thumb
 1768              		.syntax unified
 1769 009e 7B63     		str	r3, [r7, #52]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1770              		.loc 2 1073 10 discriminator 1
 1771 00a0 7B6B     		ldr	r3, [r7, #52]
 1772              	.LBE332:
 1773              	.LBE331:
 1774              		.loc 1 1480 5 discriminator 1
 1775 00a2 23F48073 		bic	r3, r3, #256
 1776 00a6 7B66     		str	r3, [r7, #100]
 1777 00a8 7B68     		ldr	r3, [r7, #4]
 1778 00aa 1B68     		ldr	r3, [r3]
 1779 00ac 0C33     		adds	r3, r3, #12
 1780 00ae 7A6E     		ldr	r2, [r7, #100]
 1781 00b0 7A64     		str	r2, [r7, #68]
 1782 00b2 3B64     		str	r3, [r7, #64]
 1783              	.LBB333:
 1784              	.LBB334:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1785              		.loc 2 1123 4 discriminator 1
 1786 00b4 396C     		ldr	r1, [r7, #64]
 1787 00b6 7A6C     		ldr	r2, [r7, #68]
 1788              		.syntax unified
 1789              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1790 00b8 41E80023 		strex r3, r2, [r1]
 1791              	@ 0 "" 2
 1792              		.thumb
 1793              		.syntax unified
 1794 00bc FB63     		str	r3, [r7, #60]
 1795              		.loc 2 1124 10 discriminator 1
 1796 00be FB6B     		ldr	r3, [r7, #60]
 1797              	.LBE334:
 1798              	.LBE333:
 1799              		.loc 1 1480 5 discriminator 1
 1800 00c0 002B     		cmp	r3, #0
 1801 00c2 E5D1     		bne	.L83
 1802              	.L86:
ARM GAS  /tmp/cc17XZfc.s 			page 78


 1803              	.LBE330:
 1804              	.LBB335:
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1805              		.loc 1 1481 5 discriminator 1
 1806 00c4 7B68     		ldr	r3, [r7, #4]
 1807 00c6 1B68     		ldr	r3, [r3]
 1808 00c8 1433     		adds	r3, r3, #20
 1809 00ca 7B62     		str	r3, [r7, #36]
 1810              	.LBB336:
 1811              	.LBB337:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1812              		.loc 2 1072 4 discriminator 1
 1813 00cc 7B6A     		ldr	r3, [r7, #36]
 1814              		.syntax unified
 1815              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1816 00ce 53E8003F 		ldrex r3, [r3]
 1817              	@ 0 "" 2
 1818              		.thumb
 1819              		.syntax unified
 1820 00d2 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1821              		.loc 2 1073 10 discriminator 1
 1822 00d4 3B6A     		ldr	r3, [r7, #32]
 1823              	.LBE337:
 1824              	.LBE336:
 1825              		.loc 1 1481 5 discriminator 1
 1826 00d6 23F00103 		bic	r3, r3, #1
 1827 00da 3B66     		str	r3, [r7, #96]
 1828 00dc 7B68     		ldr	r3, [r7, #4]
 1829 00de 1B68     		ldr	r3, [r3]
 1830 00e0 1433     		adds	r3, r3, #20
 1831 00e2 3A6E     		ldr	r2, [r7, #96]
 1832 00e4 3A63     		str	r2, [r7, #48]
 1833 00e6 FB62     		str	r3, [r7, #44]
 1834              	.LBB338:
 1835              	.LBB339:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1836              		.loc 2 1123 4 discriminator 1
 1837 00e8 F96A     		ldr	r1, [r7, #44]
 1838 00ea 3A6B     		ldr	r2, [r7, #48]
 1839              		.syntax unified
 1840              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1841 00ec 41E80023 		strex r3, r2, [r1]
 1842              	@ 0 "" 2
 1843              		.thumb
 1844              		.syntax unified
 1845 00f0 BB62     		str	r3, [r7, #40]
 1846              		.loc 2 1124 10 discriminator 1
 1847 00f2 BB6A     		ldr	r3, [r7, #40]
 1848              	.LBE339:
 1849              	.LBE338:
 1850              		.loc 1 1481 5 discriminator 1
 1851 00f4 002B     		cmp	r3, #0
 1852 00f6 E5D1     		bne	.L86
 1853              	.L89:
 1854              	.LBE335:
 1855              	.LBB340:
ARM GAS  /tmp/cc17XZfc.s 			page 79


1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1856              		.loc 1 1484 5 discriminator 1
 1857 00f8 7B68     		ldr	r3, [r7, #4]
 1858 00fa 1B68     		ldr	r3, [r3]
 1859 00fc 1433     		adds	r3, r3, #20
 1860 00fe 3B61     		str	r3, [r7, #16]
 1861              	.LBB341:
 1862              	.LBB342:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1863              		.loc 2 1072 4 discriminator 1
 1864 0100 3B69     		ldr	r3, [r7, #16]
 1865              		.syntax unified
 1866              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1867 0102 53E8003F 		ldrex r3, [r3]
 1868              	@ 0 "" 2
 1869              		.thumb
 1870              		.syntax unified
 1871 0106 FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1872              		.loc 2 1073 10 discriminator 1
 1873 0108 FB68     		ldr	r3, [r7, #12]
 1874              	.LBE342:
 1875              	.LBE341:
 1876              		.loc 1 1484 5 discriminator 1
 1877 010a 23F04003 		bic	r3, r3, #64
 1878 010e FB65     		str	r3, [r7, #92]
 1879 0110 7B68     		ldr	r3, [r7, #4]
 1880 0112 1B68     		ldr	r3, [r3]
 1881 0114 1433     		adds	r3, r3, #20
 1882 0116 FA6D     		ldr	r2, [r7, #92]
 1883 0118 FA61     		str	r2, [r7, #28]
 1884 011a BB61     		str	r3, [r7, #24]
 1885              	.LBB343:
 1886              	.LBB344:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1887              		.loc 2 1123 4 discriminator 1
 1888 011c B969     		ldr	r1, [r7, #24]
 1889 011e FA69     		ldr	r2, [r7, #28]
 1890              		.syntax unified
 1891              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1892 0120 41E80023 		strex r3, r2, [r1]
 1893              	@ 0 "" 2
 1894              		.thumb
 1895              		.syntax unified
 1896 0124 7B61     		str	r3, [r7, #20]
 1897              		.loc 2 1124 10 discriminator 1
 1898 0126 7B69     		ldr	r3, [r7, #20]
 1899              	.LBE344:
 1900              	.LBE343:
 1901              		.loc 1 1484 5 discriminator 1
 1902 0128 002B     		cmp	r3, #0
 1903 012a E5D1     		bne	.L89
 1904              	.L80:
 1905              	.LBE340:
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
ARM GAS  /tmp/cc17XZfc.s 			page 80


1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 1906              		.loc 1 1487 10
 1907 012c 0023     		movs	r3, #0
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 1908              		.loc 1 1488 1
 1909 012e 1846     		mov	r0, r3
 1910 0130 7437     		adds	r7, r7, #116
 1911              	.LCFI71:
 1912              		.cfi_def_cfa_offset 4
 1913 0132 BD46     		mov	sp, r7
 1914              	.LCFI72:
 1915              		.cfi_def_cfa_register 13
 1916              		@ sp needed
 1917 0134 80BC     		pop	{r7}
 1918              	.LCFI73:
 1919              		.cfi_restore 7
 1920              		.cfi_def_cfa_offset 0
 1921 0136 7047     		bx	lr
 1922              		.cfi_endproc
 1923              	.LFE78:
 1925              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 1926              		.align	1
 1927              		.global	HAL_UART_DMAResume
 1928              		.syntax unified
 1929              		.thumb
 1930              		.thumb_func
 1932              	HAL_UART_DMAResume:
 1933              	.LFB79:
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Resumes the DMA Transfer.
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 1934              		.loc 1 1497 1
 1935              		.cfi_startproc
 1936              		@ args = 0, pretend = 0, frame = 112
 1937              		@ frame_needed = 1, uses_anonymous_args = 0
 1938              		@ link register save eliminated.
 1939 0000 80B4     		push	{r7}
 1940              	.LCFI74:
 1941              		.cfi_def_cfa_offset 4
 1942              		.cfi_offset 7, -4
 1943 0002 9DB0     		sub	sp, sp, #116
 1944              	.LCFI75:
 1945              		.cfi_def_cfa_offset 120
 1946 0004 00AF     		add	r7, sp, #0
 1947              	.LCFI76:
 1948              		.cfi_def_cfa_register 7
 1949 0006 7860     		str	r0, [r7, #4]
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 1950              		.loc 1 1499 12
ARM GAS  /tmp/cc17XZfc.s 			page 81


 1951 0008 7B68     		ldr	r3, [r7, #4]
 1952 000a 93F84130 		ldrb	r3, [r3, #65]
 1953 000e DBB2     		uxtb	r3, r3
 1954              		.loc 1 1499 6
 1955 0010 212B     		cmp	r3, #33
 1956 0012 19D1     		bne	.L92
 1957              	.L95:
 1958              	.LBB345:
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1959              		.loc 1 1502 5 discriminator 1
 1960 0014 7B68     		ldr	r3, [r7, #4]
 1961 0016 1B68     		ldr	r3, [r3]
 1962 0018 1433     		adds	r3, r3, #20
 1963 001a 3B65     		str	r3, [r7, #80]
 1964              	.LBB346:
 1965              	.LBB347:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1966              		.loc 2 1072 4 discriminator 1
 1967 001c 3B6D     		ldr	r3, [r7, #80]
 1968              		.syntax unified
 1969              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1970 001e 53E8003F 		ldrex r3, [r3]
 1971              	@ 0 "" 2
 1972              		.thumb
 1973              		.syntax unified
 1974 0022 FB64     		str	r3, [r7, #76]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1975              		.loc 2 1073 10 discriminator 1
 1976 0024 FB6C     		ldr	r3, [r7, #76]
 1977              	.LBE347:
 1978              	.LBE346:
 1979              		.loc 1 1502 5 discriminator 1
 1980 0026 43F08003 		orr	r3, r3, #128
 1981 002a FB66     		str	r3, [r7, #108]
 1982 002c 7B68     		ldr	r3, [r7, #4]
 1983 002e 1B68     		ldr	r3, [r3]
 1984 0030 1433     		adds	r3, r3, #20
 1985 0032 FA6E     		ldr	r2, [r7, #108]
 1986 0034 FA65     		str	r2, [r7, #92]
 1987 0036 BB65     		str	r3, [r7, #88]
 1988              	.LBB348:
 1989              	.LBB349:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 1990              		.loc 2 1123 4 discriminator 1
 1991 0038 B96D     		ldr	r1, [r7, #88]
 1992 003a FA6D     		ldr	r2, [r7, #92]
 1993              		.syntax unified
 1994              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1995 003c 41E80023 		strex r3, r2, [r1]
 1996              	@ 0 "" 2
 1997              		.thumb
 1998              		.syntax unified
 1999 0040 7B65     		str	r3, [r7, #84]
 2000              		.loc 2 1124 10 discriminator 1
 2001 0042 7B6D     		ldr	r3, [r7, #84]
ARM GAS  /tmp/cc17XZfc.s 			page 82


 2002              	.LBE349:
 2003              	.LBE348:
 2004              		.loc 1 1502 5 discriminator 1
 2005 0044 002B     		cmp	r3, #0
 2006 0046 E5D1     		bne	.L95
 2007              	.L92:
 2008              	.LBE345:
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 2009              		.loc 1 1505 12
 2010 0048 7B68     		ldr	r3, [r7, #4]
 2011 004a 93F84230 		ldrb	r3, [r3, #66]
 2012 004e DBB2     		uxtb	r3, r3
 2013              		.loc 1 1505 6
 2014 0050 222B     		cmp	r3, #34
 2015 0052 5CD1     		bne	.L96
 2016              	.LBB350:
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer*/
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
 2017              		.loc 1 1508 5
 2018 0054 0023     		movs	r3, #0
 2019 0056 FB60     		str	r3, [r7, #12]
 2020 0058 7B68     		ldr	r3, [r7, #4]
 2021 005a 1B68     		ldr	r3, [r3]
 2022 005c 1B68     		ldr	r3, [r3]
 2023 005e FB60     		str	r3, [r7, #12]
 2024 0060 7B68     		ldr	r3, [r7, #4]
 2025 0062 1B68     		ldr	r3, [r3]
 2026 0064 5B68     		ldr	r3, [r3, #4]
 2027 0066 FB60     		str	r3, [r7, #12]
 2028 0068 FB68     		ldr	r3, [r7, #12]
 2029              	.LBE350:
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->Init.Parity != UART_PARITY_NONE)
 2030              		.loc 1 1511 20
 2031 006a 7B68     		ldr	r3, [r7, #4]
 2032 006c 1B69     		ldr	r3, [r3, #16]
 2033              		.loc 1 1511 8
 2034 006e 002B     		cmp	r3, #0
 2035 0070 19D0     		beq	.L103
 2036              	.L100:
 2037              	.LBB351:
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 2038              		.loc 1 1513 7 discriminator 1
 2039 0072 7B68     		ldr	r3, [r7, #4]
 2040 0074 1B68     		ldr	r3, [r3]
 2041 0076 0C33     		adds	r3, r3, #12
 2042 0078 FB63     		str	r3, [r7, #60]
 2043              	.LBB352:
 2044              	.LBB353:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2045              		.loc 2 1072 4 discriminator 1
 2046 007a FB6B     		ldr	r3, [r7, #60]
ARM GAS  /tmp/cc17XZfc.s 			page 83


 2047              		.syntax unified
 2048              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2049 007c 53E8003F 		ldrex r3, [r3]
 2050              	@ 0 "" 2
 2051              		.thumb
 2052              		.syntax unified
 2053 0080 BB63     		str	r3, [r7, #56]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2054              		.loc 2 1073 10 discriminator 1
 2055 0082 BB6B     		ldr	r3, [r7, #56]
 2056              	.LBE353:
 2057              	.LBE352:
 2058              		.loc 1 1513 7 discriminator 1
 2059 0084 43F48073 		orr	r3, r3, #256
 2060 0088 BB66     		str	r3, [r7, #104]
 2061 008a 7B68     		ldr	r3, [r7, #4]
 2062 008c 1B68     		ldr	r3, [r3]
 2063 008e 0C33     		adds	r3, r3, #12
 2064 0090 BA6E     		ldr	r2, [r7, #104]
 2065 0092 BA64     		str	r2, [r7, #72]
 2066 0094 7B64     		str	r3, [r7, #68]
 2067              	.LBB354:
 2068              	.LBB355:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2069              		.loc 2 1123 4 discriminator 1
 2070 0096 796C     		ldr	r1, [r7, #68]
 2071 0098 BA6C     		ldr	r2, [r7, #72]
 2072              		.syntax unified
 2073              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2074 009a 41E80023 		strex r3, r2, [r1]
 2075              	@ 0 "" 2
 2076              		.thumb
 2077              		.syntax unified
 2078 009e 3B64     		str	r3, [r7, #64]
 2079              		.loc 2 1124 10 discriminator 1
 2080 00a0 3B6C     		ldr	r3, [r7, #64]
 2081              	.LBE355:
 2082              	.LBE354:
 2083              		.loc 1 1513 7 discriminator 1
 2084 00a2 002B     		cmp	r3, #0
 2085 00a4 E5D1     		bne	.L100
 2086              	.L103:
 2087              	.LBE351:
 2088              	.LBB356:
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2089              		.loc 1 1515 5 discriminator 1
 2090 00a6 7B68     		ldr	r3, [r7, #4]
 2091 00a8 1B68     		ldr	r3, [r3]
 2092 00aa 1433     		adds	r3, r3, #20
 2093 00ac BB62     		str	r3, [r7, #40]
 2094              	.LBB357:
 2095              	.LBB358:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2096              		.loc 2 1072 4 discriminator 1
 2097 00ae BB6A     		ldr	r3, [r7, #40]
 2098              		.syntax unified
ARM GAS  /tmp/cc17XZfc.s 			page 84


 2099              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2100 00b0 53E8003F 		ldrex r3, [r3]
 2101              	@ 0 "" 2
 2102              		.thumb
 2103              		.syntax unified
 2104 00b4 7B62     		str	r3, [r7, #36]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2105              		.loc 2 1073 10 discriminator 1
 2106 00b6 7B6A     		ldr	r3, [r7, #36]
 2107              	.LBE358:
 2108              	.LBE357:
 2109              		.loc 1 1515 5 discriminator 1
 2110 00b8 43F00103 		orr	r3, r3, #1
 2111 00bc 7B66     		str	r3, [r7, #100]
 2112 00be 7B68     		ldr	r3, [r7, #4]
 2113 00c0 1B68     		ldr	r3, [r3]
 2114 00c2 1433     		adds	r3, r3, #20
 2115 00c4 7A6E     		ldr	r2, [r7, #100]
 2116 00c6 7A63     		str	r2, [r7, #52]
 2117 00c8 3B63     		str	r3, [r7, #48]
 2118              	.LBB359:
 2119              	.LBB360:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2120              		.loc 2 1123 4 discriminator 1
 2121 00ca 396B     		ldr	r1, [r7, #48]
 2122 00cc 7A6B     		ldr	r2, [r7, #52]
 2123              		.syntax unified
 2124              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2125 00ce 41E80023 		strex r3, r2, [r1]
 2126              	@ 0 "" 2
 2127              		.thumb
 2128              		.syntax unified
 2129 00d2 FB62     		str	r3, [r7, #44]
 2130              		.loc 2 1124 10 discriminator 1
 2131 00d4 FB6A     		ldr	r3, [r7, #44]
 2132              	.LBE360:
 2133              	.LBE359:
 2134              		.loc 1 1515 5 discriminator 1
 2135 00d6 002B     		cmp	r3, #0
 2136 00d8 E5D1     		bne	.L103
 2137              	.L106:
 2138              	.LBE356:
 2139              	.LBB361:
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2140              		.loc 1 1518 5 discriminator 1
 2141 00da 7B68     		ldr	r3, [r7, #4]
 2142 00dc 1B68     		ldr	r3, [r3]
 2143 00de 1433     		adds	r3, r3, #20
 2144 00e0 7B61     		str	r3, [r7, #20]
 2145              	.LBB362:
 2146              	.LBB363:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2147              		.loc 2 1072 4 discriminator 1
 2148 00e2 7B69     		ldr	r3, [r7, #20]
 2149              		.syntax unified
ARM GAS  /tmp/cc17XZfc.s 			page 85


 2150              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2151 00e4 53E8003F 		ldrex r3, [r3]
 2152              	@ 0 "" 2
 2153              		.thumb
 2154              		.syntax unified
 2155 00e8 3B61     		str	r3, [r7, #16]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2156              		.loc 2 1073 10 discriminator 1
 2157 00ea 3B69     		ldr	r3, [r7, #16]
 2158              	.LBE363:
 2159              	.LBE362:
 2160              		.loc 1 1518 5 discriminator 1
 2161 00ec 43F04003 		orr	r3, r3, #64
 2162 00f0 3B66     		str	r3, [r7, #96]
 2163 00f2 7B68     		ldr	r3, [r7, #4]
 2164 00f4 1B68     		ldr	r3, [r3]
 2165 00f6 1433     		adds	r3, r3, #20
 2166 00f8 3A6E     		ldr	r2, [r7, #96]
 2167 00fa 3A62     		str	r2, [r7, #32]
 2168 00fc FB61     		str	r3, [r7, #28]
 2169              	.LBB364:
 2170              	.LBB365:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2171              		.loc 2 1123 4 discriminator 1
 2172 00fe F969     		ldr	r1, [r7, #28]
 2173 0100 3A6A     		ldr	r2, [r7, #32]
 2174              		.syntax unified
 2175              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2176 0102 41E80023 		strex r3, r2, [r1]
 2177              	@ 0 "" 2
 2178              		.thumb
 2179              		.syntax unified
 2180 0106 BB61     		str	r3, [r7, #24]
 2181              		.loc 2 1124 10 discriminator 1
 2182 0108 BB69     		ldr	r3, [r7, #24]
 2183              	.LBE365:
 2184              	.LBE364:
 2185              		.loc 1 1518 5 discriminator 1
 2186 010a 002B     		cmp	r3, #0
 2187 010c E5D1     		bne	.L106
 2188              	.L96:
 2189              	.LBE361:
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2190              		.loc 1 1521 10
 2191 010e 0023     		movs	r3, #0
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2192              		.loc 1 1522 1
 2193 0110 1846     		mov	r0, r3
 2194 0112 7437     		adds	r7, r7, #116
 2195              	.LCFI77:
 2196              		.cfi_def_cfa_offset 4
 2197 0114 BD46     		mov	sp, r7
 2198              	.LCFI78:
 2199              		.cfi_def_cfa_register 13
 2200              		@ sp needed
ARM GAS  /tmp/cc17XZfc.s 			page 86


 2201 0116 80BC     		pop	{r7}
 2202              	.LCFI79:
 2203              		.cfi_restore 7
 2204              		.cfi_def_cfa_offset 0
 2205 0118 7047     		bx	lr
 2206              		.cfi_endproc
 2207              	.LFE79:
 2209              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 2210              		.align	1
 2211              		.global	HAL_UART_DMAStop
 2212              		.syntax unified
 2213              		.thumb
 2214              		.thumb_func
 2216              	HAL_UART_DMAStop:
 2217              	.LFB80:
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Stops the DMA Transfer.
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2218              		.loc 1 1531 1
 2219              		.cfi_startproc
 2220              		@ args = 0, pretend = 0, frame = 64
 2221              		@ frame_needed = 1, uses_anonymous_args = 0
 2222 0000 80B5     		push	{r7, lr}
 2223              	.LCFI80:
 2224              		.cfi_def_cfa_offset 8
 2225              		.cfi_offset 7, -8
 2226              		.cfi_offset 14, -4
 2227 0002 90B0     		sub	sp, sp, #64
 2228              	.LCFI81:
 2229              		.cfi_def_cfa_offset 72
 2230 0004 00AF     		add	r7, sp, #0
 2231              	.LCFI82:
 2232              		.cfi_def_cfa_register 7
 2233 0006 7860     		str	r0, [r7, #4]
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 2234              		.loc 1 1532 12
 2235 0008 0023     		movs	r3, #0
 2236 000a FB63     		str	r3, [r7, #60]
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      */
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 2237              		.loc 1 1540 16
 2238 000c 7B68     		ldr	r3, [r7, #4]
 2239 000e 1B68     		ldr	r3, [r3]
 2240 0010 5B69     		ldr	r3, [r3, #20]
 2241 0012 03F08003 		and	r3, r3, #128
ARM GAS  /tmp/cc17XZfc.s 			page 87


 2242 0016 002B     		cmp	r3, #0
 2243 0018 14BF     		ite	ne
 2244 001a 0123     		movne	r3, #1
 2245 001c 0023     		moveq	r3, #0
 2246 001e DBB2     		uxtb	r3, r3
 2247              		.loc 1 1540 14
 2248 0020 FB63     		str	r3, [r7, #60]
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 2249              		.loc 1 1541 13
 2250 0022 7B68     		ldr	r3, [r7, #4]
 2251 0024 93F84130 		ldrb	r3, [r3, #65]
 2252 0028 DBB2     		uxtb	r3, r3
 2253              		.loc 1 1541 6
 2254 002a 212B     		cmp	r3, #33
 2255 002c 28D1     		bne	.L109
 2256              		.loc 1 1541 49 discriminator 1
 2257 002e FB6B     		ldr	r3, [r7, #60]
 2258 0030 002B     		cmp	r3, #0
 2259 0032 25D0     		beq	.L109
 2260              	.L112:
 2261              	.LBB366:
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2262              		.loc 1 1543 5 discriminator 1
 2263 0034 7B68     		ldr	r3, [r7, #4]
 2264 0036 1B68     		ldr	r3, [r3]
 2265 0038 1433     		adds	r3, r3, #20
 2266 003a 7B62     		str	r3, [r7, #36]
 2267              	.LBB367:
 2268              	.LBB368:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2269              		.loc 2 1072 4 discriminator 1
 2270 003c 7B6A     		ldr	r3, [r7, #36]
 2271              		.syntax unified
 2272              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2273 003e 53E8003F 		ldrex r3, [r3]
 2274              	@ 0 "" 2
 2275              		.thumb
 2276              		.syntax unified
 2277 0042 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2278              		.loc 2 1073 10 discriminator 1
 2279 0044 3B6A     		ldr	r3, [r7, #32]
 2280              	.LBE368:
 2281              	.LBE367:
 2282              		.loc 1 1543 5 discriminator 1
 2283 0046 23F08003 		bic	r3, r3, #128
 2284 004a BB63     		str	r3, [r7, #56]
 2285 004c 7B68     		ldr	r3, [r7, #4]
 2286 004e 1B68     		ldr	r3, [r3]
 2287 0050 1433     		adds	r3, r3, #20
 2288 0052 BA6B     		ldr	r2, [r7, #56]
 2289 0054 3A63     		str	r2, [r7, #48]
 2290 0056 FB62     		str	r3, [r7, #44]
 2291              	.LBB369:
 2292              	.LBB370:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/cc17XZfc.s 			page 88


 2293              		.loc 2 1123 4 discriminator 1
 2294 0058 F96A     		ldr	r1, [r7, #44]
 2295 005a 3A6B     		ldr	r2, [r7, #48]
 2296              		.syntax unified
 2297              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2298 005c 41E80023 		strex r3, r2, [r1]
 2299              	@ 0 "" 2
 2300              		.thumb
 2301              		.syntax unified
 2302 0060 BB62     		str	r3, [r7, #40]
 2303              		.loc 2 1124 10 discriminator 1
 2304 0062 BB6A     		ldr	r3, [r7, #40]
 2305              	.LBE370:
 2306              	.LBE369:
 2307              		.loc 1 1543 5 discriminator 1
 2308 0064 002B     		cmp	r3, #0
 2309 0066 E5D1     		bne	.L112
 2310              	.LBE366:
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2311              		.loc 1 1546 14
 2312 0068 7B68     		ldr	r3, [r7, #4]
 2313 006a 9B6B     		ldr	r3, [r3, #56]
 2314              		.loc 1 1546 8
 2315 006c 002B     		cmp	r3, #0
 2316 006e 04D0     		beq	.L113
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2317              		.loc 1 1548 7
 2318 0070 7B68     		ldr	r3, [r7, #4]
 2319 0072 9B6B     		ldr	r3, [r3, #56]
 2320 0074 1846     		mov	r0, r3
 2321 0076 FFF7FEFF 		bl	HAL_DMA_Abort
 2322              	.L113:
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2323              		.loc 1 1550 5
 2324 007a 7868     		ldr	r0, [r7, #4]
 2325 007c FFF7FEFF 		bl	UART_EndTxTransfer
 2326              	.L109:
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 2327              		.loc 1 1554 16
 2328 0080 7B68     		ldr	r3, [r7, #4]
 2329 0082 1B68     		ldr	r3, [r3]
 2330 0084 5B69     		ldr	r3, [r3, #20]
 2331 0086 03F04003 		and	r3, r3, #64
 2332 008a 002B     		cmp	r3, #0
 2333 008c 14BF     		ite	ne
 2334 008e 0123     		movne	r3, #1
 2335 0090 0023     		moveq	r3, #0
 2336 0092 DBB2     		uxtb	r3, r3
 2337              		.loc 1 1554 14
 2338 0094 FB63     		str	r3, [r7, #60]
ARM GAS  /tmp/cc17XZfc.s 			page 89


1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 2339              		.loc 1 1555 13
 2340 0096 7B68     		ldr	r3, [r7, #4]
 2341 0098 93F84230 		ldrb	r3, [r3, #66]
 2342 009c DBB2     		uxtb	r3, r3
 2343              		.loc 1 1555 6
 2344 009e 222B     		cmp	r3, #34
 2345 00a0 28D1     		bne	.L114
 2346              		.loc 1 1555 50 discriminator 1
 2347 00a2 FB6B     		ldr	r3, [r7, #60]
 2348 00a4 002B     		cmp	r3, #0
 2349 00a6 25D0     		beq	.L114
 2350              	.L117:
 2351              	.LBB371:
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2352              		.loc 1 1557 5 discriminator 1
 2353 00a8 7B68     		ldr	r3, [r7, #4]
 2354 00aa 1B68     		ldr	r3, [r3]
 2355 00ac 1433     		adds	r3, r3, #20
 2356 00ae 3B61     		str	r3, [r7, #16]
 2357              	.LBB372:
 2358              	.LBB373:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2359              		.loc 2 1072 4 discriminator 1
 2360 00b0 3B69     		ldr	r3, [r7, #16]
 2361              		.syntax unified
 2362              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2363 00b2 53E8003F 		ldrex r3, [r3]
 2364              	@ 0 "" 2
 2365              		.thumb
 2366              		.syntax unified
 2367 00b6 FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2368              		.loc 2 1073 10 discriminator 1
 2369 00b8 FB68     		ldr	r3, [r7, #12]
 2370              	.LBE373:
 2371              	.LBE372:
 2372              		.loc 1 1557 5 discriminator 1
 2373 00ba 23F04003 		bic	r3, r3, #64
 2374 00be 7B63     		str	r3, [r7, #52]
 2375 00c0 7B68     		ldr	r3, [r7, #4]
 2376 00c2 1B68     		ldr	r3, [r3]
 2377 00c4 1433     		adds	r3, r3, #20
 2378 00c6 7A6B     		ldr	r2, [r7, #52]
 2379 00c8 FA61     		str	r2, [r7, #28]
 2380 00ca BB61     		str	r3, [r7, #24]
 2381              	.LBB374:
 2382              	.LBB375:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2383              		.loc 2 1123 4 discriminator 1
 2384 00cc B969     		ldr	r1, [r7, #24]
 2385 00ce FA69     		ldr	r2, [r7, #28]
 2386              		.syntax unified
 2387              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2388 00d0 41E80023 		strex r3, r2, [r1]
 2389              	@ 0 "" 2
ARM GAS  /tmp/cc17XZfc.s 			page 90


 2390              		.thumb
 2391              		.syntax unified
 2392 00d4 7B61     		str	r3, [r7, #20]
 2393              		.loc 2 1124 10 discriminator 1
 2394 00d6 7B69     		ldr	r3, [r7, #20]
 2395              	.LBE375:
 2396              	.LBE374:
 2397              		.loc 1 1557 5 discriminator 1
 2398 00d8 002B     		cmp	r3, #0
 2399 00da E5D1     		bne	.L117
 2400              	.LBE371:
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2401              		.loc 1 1560 14
 2402 00dc 7B68     		ldr	r3, [r7, #4]
 2403 00de DB6B     		ldr	r3, [r3, #60]
 2404              		.loc 1 1560 8
 2405 00e0 002B     		cmp	r3, #0
 2406 00e2 04D0     		beq	.L118
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2407              		.loc 1 1562 7
 2408 00e4 7B68     		ldr	r3, [r7, #4]
 2409 00e6 DB6B     		ldr	r3, [r3, #60]
 2410 00e8 1846     		mov	r0, r3
 2411 00ea FFF7FEFF 		bl	HAL_DMA_Abort
 2412              	.L118:
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2413              		.loc 1 1564 5
 2414 00ee 7868     		ldr	r0, [r7, #4]
 2415 00f0 FFF7FEFF 		bl	UART_EndRxTransfer
 2416              	.L114:
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 2417              		.loc 1 1567 10
 2418 00f4 0023     		movs	r3, #0
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2419              		.loc 1 1568 1
 2420 00f6 1846     		mov	r0, r3
 2421 00f8 4037     		adds	r7, r7, #64
 2422              	.LCFI83:
 2423              		.cfi_def_cfa_offset 8
 2424 00fa BD46     		mov	sp, r7
 2425              	.LCFI84:
 2426              		.cfi_def_cfa_register 13
 2427              		@ sp needed
 2428 00fc 80BD     		pop	{r7, pc}
 2429              		.cfi_endproc
 2430              	.LFE80:
 2432              		.section	.text.HAL_UARTEx_ReceiveToIdle,"ax",%progbits
 2433              		.align	1
 2434              		.global	HAL_UARTEx_ReceiveToIdle
 2435              		.syntax unified
 2436              		.thumb
ARM GAS  /tmp/cc17XZfc.s 			page 91


 2437              		.thumb_func
 2439              	HAL_UARTEx_ReceiveToIdle:
 2440              	.LFB81:
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode till either the expected number of data is re
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   HAL_OK is returned if reception is completed (expected number of data has been received
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         or if reception is stopped after IDLE event (less than the expected number of data has 
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         In this case, RxLen output parameter indicates number of data available in reception bu
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart   UART handle.
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData   Pointer to data buffer (uint8_t or uint16_t data elements).
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size    Amount of data elements (uint8_t or uint16_t) to be received.
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param RxLen   Number of data elements finally received (could be lower than Size, in case rece
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                                            uint32_t Timeout)
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2441              		.loc 1 1587 1
 2442              		.cfi_startproc
 2443              		@ args = 4, pretend = 0, frame = 32
 2444              		@ frame_needed = 1, uses_anonymous_args = 0
 2445 0000 80B5     		push	{r7, lr}
 2446              	.LCFI85:
 2447              		.cfi_def_cfa_offset 8
 2448              		.cfi_offset 7, -8
 2449              		.cfi_offset 14, -4
 2450 0002 88B0     		sub	sp, sp, #32
 2451              	.LCFI86:
 2452              		.cfi_def_cfa_offset 40
 2453 0004 00AF     		add	r7, sp, #0
 2454              	.LCFI87:
 2455              		.cfi_def_cfa_register 7
 2456 0006 F860     		str	r0, [r7, #12]
 2457 0008 B960     		str	r1, [r7, #8]
 2458 000a 3B60     		str	r3, [r7]
 2459 000c 1346     		mov	r3, r2	@ movhi
 2460 000e FB80     		strh	r3, [r7, #6]	@ movhi
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tickstart;
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2461              		.loc 1 1593 12
 2462 0010 FB68     		ldr	r3, [r7, #12]
 2463 0012 93F84230 		ldrb	r3, [r3, #66]
 2464 0016 DBB2     		uxtb	r3, r3
 2465              		.loc 1 1593 6
 2466 0018 202B     		cmp	r3, #32
 2467 001a 40F0C080 		bne	.L121
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
ARM GAS  /tmp/cc17XZfc.s 			page 92


 2468              		.loc 1 1595 8
 2469 001e BB68     		ldr	r3, [r7, #8]
 2470 0020 002B     		cmp	r3, #0
 2471 0022 02D0     		beq	.L122
 2472              		.loc 1 1595 25 discriminator 1
 2473 0024 FB88     		ldrh	r3, [r7, #6]
 2474 0026 002B     		cmp	r3, #0
 2475 0028 01D1     		bne	.L123
 2476              	.L122:
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return  HAL_ERROR;
 2477              		.loc 1 1597 15
 2478 002a 0123     		movs	r3, #1
 2479 002c B8E0     		b	.L124
 2480              	.L123:
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2481              		.loc 1 1600 22
 2482 002e FB68     		ldr	r3, [r7, #12]
 2483 0030 0022     		movs	r2, #0
 2484 0032 5A64     		str	r2, [r3, #68]
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 2485              		.loc 1 1601 20
 2486 0034 FB68     		ldr	r3, [r7, #12]
 2487 0036 2222     		movs	r2, #34
 2488 0038 83F84220 		strb	r2, [r3, #66]
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2489              		.loc 1 1602 26
 2490 003c FB68     		ldr	r3, [r7, #12]
 2491 003e 0122     		movs	r2, #1
 2492 0040 1A63     		str	r2, [r3, #48]
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 2493              		.loc 1 1603 24
 2494 0042 FB68     		ldr	r3, [r7, #12]
 2495 0044 0022     		movs	r2, #0
 2496 0046 5A63     		str	r2, [r3, #52]
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Init tickstart for timeout management */
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     tickstart = HAL_GetTick();
 2497              		.loc 1 1606 17
 2498 0048 FFF7FEFF 		bl	HAL_GetTick
 2499 004c 7861     		str	r0, [r7, #20]
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferSize  = Size;
 2500              		.loc 1 1608 24
 2501 004e FB68     		ldr	r3, [r7, #12]
 2502 0050 FA88     		ldrh	r2, [r7, #6]	@ movhi
 2503 0052 9A85     		strh	r2, [r3, #44]	@ movhi
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = Size;
 2504              		.loc 1 1609 24
 2505 0054 FB68     		ldr	r3, [r7, #12]
 2506 0056 FA88     		ldrh	r2, [r7, #6]	@ movhi
 2507 0058 DA85     		strh	r2, [r3, #46]	@ movhi
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
ARM GAS  /tmp/cc17XZfc.s 			page 93


 2508              		.loc 1 1612 21
 2509 005a FB68     		ldr	r3, [r7, #12]
 2510 005c 9B68     		ldr	r3, [r3, #8]
 2511              		.loc 1 1612 8
 2512 005e B3F5805F 		cmp	r3, #4096
 2513 0062 08D1     		bne	.L125
 2514              		.loc 1 1612 71 discriminator 1
 2515 0064 FB68     		ldr	r3, [r7, #12]
 2516 0066 1B69     		ldr	r3, [r3, #16]
 2517              		.loc 1 1612 56 discriminator 1
 2518 0068 002B     		cmp	r3, #0
 2519 006a 04D1     		bne	.L125
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 2520              		.loc 1 1614 19
 2521 006c 0023     		movs	r3, #0
 2522 006e FB61     		str	r3, [r7, #28]
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 2523              		.loc 1 1615 19
 2524 0070 BB68     		ldr	r3, [r7, #8]
 2525 0072 BB61     		str	r3, [r7, #24]
 2526 0074 03E0     		b	.L126
 2527              	.L125:
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = pData;
 2528              		.loc 1 1619 19
 2529 0076 BB68     		ldr	r3, [r7, #8]
 2530 0078 FB61     		str	r3, [r7, #28]
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = NULL;
 2531              		.loc 1 1620 19
 2532 007a 0023     		movs	r3, #0
 2533 007c BB61     		str	r3, [r7, #24]
 2534              	.L126:
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Initialize output number of received elements */
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     *RxLen = 0U;
 2535              		.loc 1 1624 12
 2536 007e 3B68     		ldr	r3, [r7]
 2537 0080 0022     		movs	r2, #0
 2538 0082 1A80     		strh	r2, [r3]	@ movhi
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* as long as data have to be received */
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
 2539              		.loc 1 1627 11
 2540 0084 77E0     		b	.L127
 2541              	.L136:
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check if IDLE flag is set */
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 2542              		.loc 1 1630 11
 2543 0086 FB68     		ldr	r3, [r7, #12]
 2544 0088 1B68     		ldr	r3, [r3]
 2545 008a 1B68     		ldr	r3, [r3]
 2546 008c 03F01003 		and	r3, r3, #16
ARM GAS  /tmp/cc17XZfc.s 			page 94


 2547              		.loc 1 1630 10
 2548 0090 102B     		cmp	r3, #16
 2549 0092 17D1     		bne	.L128
 2550              	.LBB376:
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Clear IDLE flag in ISR */
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 2551              		.loc 1 1633 9
 2552 0094 0023     		movs	r3, #0
 2553 0096 3B61     		str	r3, [r7, #16]
 2554 0098 FB68     		ldr	r3, [r7, #12]
 2555 009a 1B68     		ldr	r3, [r3]
 2556 009c 1B68     		ldr	r3, [r3]
 2557 009e 3B61     		str	r3, [r7, #16]
 2558 00a0 FB68     		ldr	r3, [r7, #12]
 2559 00a2 1B68     		ldr	r3, [r3]
 2560 00a4 5B68     		ldr	r3, [r3, #4]
 2561 00a6 3B61     		str	r3, [r7, #16]
 2562 00a8 3B69     		ldr	r3, [r7, #16]
 2563              	.LBE376:
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* If Set, but no data ever received, clear flag without exiting loop */
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* If Set, and data has already been received, this means Idle Event is valid : End recepti
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (*RxLen > 0U)
 2564              		.loc 1 1637 13
 2565 00aa 3B68     		ldr	r3, [r7]
 2566 00ac 1B88     		ldrh	r3, [r3]
 2567              		.loc 1 1637 12
 2568 00ae 002B     		cmp	r3, #0
 2569 00b0 08D0     		beq	.L128
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 2570              		.loc 1 1639 30
 2571 00b2 FB68     		ldr	r3, [r7, #12]
 2572 00b4 0222     		movs	r2, #2
 2573 00b6 5A63     		str	r2, [r3, #52]
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 2574              		.loc 1 1640 26
 2575 00b8 FB68     		ldr	r3, [r7, #12]
 2576 00ba 2022     		movs	r2, #32
 2577 00bc 83F84220 		strb	r2, [r3, #66]
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_OK;
 2578              		.loc 1 1642 18
 2579 00c0 0023     		movs	r3, #0
 2580 00c2 6DE0     		b	.L124
 2581              	.L128:
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check if RXNE flag is set */
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 2582              		.loc 1 1647 11
 2583 00c4 FB68     		ldr	r3, [r7, #12]
 2584 00c6 1B68     		ldr	r3, [r3]
 2585 00c8 1B68     		ldr	r3, [r3]
 2586 00ca 03F02003 		and	r3, r3, #32
ARM GAS  /tmp/cc17XZfc.s 			page 95


 2587              		.loc 1 1647 10
 2588 00ce 202B     		cmp	r3, #32
 2589 00d0 3CD1     		bne	.L129
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (pdata8bits == NULL)
 2590              		.loc 1 1649 12
 2591 00d2 FB69     		ldr	r3, [r7, #28]
 2592 00d4 002B     		cmp	r3, #0
 2593 00d6 0CD1     		bne	.L130
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 2594              		.loc 1 1651 42
 2595 00d8 FB68     		ldr	r3, [r7, #12]
 2596 00da 1B68     		ldr	r3, [r3]
 2597              		.loc 1 1651 52
 2598 00dc 5B68     		ldr	r3, [r3, #4]
 2599              		.loc 1 1651 26
 2600 00de 9BB2     		uxth	r3, r3
 2601 00e0 C3F30803 		ubfx	r3, r3, #0, #9
 2602 00e4 9AB2     		uxth	r2, r3
 2603              		.loc 1 1651 24
 2604 00e6 BB69     		ldr	r3, [r7, #24]
 2605 00e8 1A80     		strh	r2, [r3]	@ movhi
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pdata16bits++;
 2606              		.loc 1 1652 22
 2607 00ea BB69     		ldr	r3, [r7, #24]
 2608 00ec 0233     		adds	r3, r3, #2
 2609 00ee BB61     		str	r3, [r7, #24]
 2610 00f0 1FE0     		b	.L131
 2611              	.L130:
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WO
 2612              		.loc 1 1656 27
 2613 00f2 FB68     		ldr	r3, [r7, #12]
 2614 00f4 9B68     		ldr	r3, [r3, #8]
 2615              		.loc 1 1656 14
 2616 00f6 B3F5805F 		cmp	r3, #4096
 2617 00fa 07D0     		beq	.L132
 2618              		.loc 1 1656 78 discriminator 1
 2619 00fc FB68     		ldr	r3, [r7, #12]
 2620 00fe 9B68     		ldr	r3, [r3, #8]
 2621              		.loc 1 1656 62 discriminator 1
 2622 0100 002B     		cmp	r3, #0
 2623 0102 0AD1     		bne	.L133
 2624              		.loc 1 1656 128 discriminator 2
 2625 0104 FB68     		ldr	r3, [r7, #12]
 2626 0106 1B69     		ldr	r3, [r3, #16]
 2627              		.loc 1 1656 113 discriminator 2
 2628 0108 002B     		cmp	r3, #0
 2629 010a 06D1     		bne	.L133
 2630              	.L132:
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 2631              		.loc 1 1658 42
 2632 010c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc17XZfc.s 			page 96


 2633 010e 1B68     		ldr	r3, [r3]
 2634              		.loc 1 1658 52
 2635 0110 5B68     		ldr	r3, [r3, #4]
 2636              		.loc 1 1658 27
 2637 0112 DAB2     		uxtb	r2, r3
 2638              		.loc 1 1658 25
 2639 0114 FB69     		ldr	r3, [r7, #28]
 2640 0116 1A70     		strb	r2, [r3]
 2641 0118 08E0     		b	.L134
 2642              	.L133:
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           else
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 2643              		.loc 1 1662 42
 2644 011a FB68     		ldr	r3, [r7, #12]
 2645 011c 1B68     		ldr	r3, [r3]
 2646              		.loc 1 1662 52
 2647 011e 5B68     		ldr	r3, [r3, #4]
 2648              		.loc 1 1662 27
 2649 0120 DBB2     		uxtb	r3, r3
 2650 0122 03F07F03 		and	r3, r3, #127
 2651 0126 DAB2     		uxtb	r2, r3
 2652              		.loc 1 1662 25
 2653 0128 FB69     		ldr	r3, [r7, #28]
 2654 012a 1A70     		strb	r2, [r3]
 2655              	.L134:
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           pdata8bits++;
 2656              		.loc 1 1665 21
 2657 012c FB69     		ldr	r3, [r7, #28]
 2658 012e 0133     		adds	r3, r3, #1
 2659 0130 FB61     		str	r3, [r7, #28]
 2660              	.L131:
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Increment number of received elements */
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *RxLen += 1U;
 2661              		.loc 1 1668 16
 2662 0132 3B68     		ldr	r3, [r7]
 2663 0134 1B88     		ldrh	r3, [r3]
 2664 0136 0133     		adds	r3, r3, #1
 2665 0138 9AB2     		uxth	r2, r3
 2666 013a 3B68     		ldr	r3, [r7]
 2667 013c 1A80     		strh	r2, [r3]	@ movhi
1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxXferCount--;
 2668              		.loc 1 1669 14
 2669 013e FB68     		ldr	r3, [r7, #12]
 2670 0140 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 2671 0142 9BB2     		uxth	r3, r3
 2672              		.loc 1 1669 27
 2673 0144 013B     		subs	r3, r3, #1
 2674 0146 9AB2     		uxth	r2, r3
 2675 0148 FB68     		ldr	r3, [r7, #12]
 2676 014a DA85     		strh	r2, [r3, #46]	@ movhi
 2677              	.L129:
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
ARM GAS  /tmp/cc17XZfc.s 			page 97


1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check for the Timeout */
1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (Timeout != HAL_MAX_DELAY)
 2678              		.loc 1 1673 10
 2679 014c BB6A     		ldr	r3, [r7, #40]
 2680 014e B3F1FF3F 		cmp	r3, #-1
 2681 0152 10D0     		beq	.L127
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 2682              		.loc 1 1675 15
 2683 0154 FFF7FEFF 		bl	HAL_GetTick
 2684 0158 0246     		mov	r2, r0
 2685              		.loc 1 1675 29
 2686 015a 7B69     		ldr	r3, [r7, #20]
 2687 015c D31A     		subs	r3, r2, r3
 2688              		.loc 1 1675 12
 2689 015e BA6A     		ldr	r2, [r7, #40]
 2690 0160 9A42     		cmp	r2, r3
 2691 0162 02D3     		bcc	.L135
 2692              		.loc 1 1675 53 discriminator 1
 2693 0164 BB6A     		ldr	r3, [r7, #40]
 2694 0166 002B     		cmp	r3, #0
 2695 0168 05D1     		bne	.L127
 2696              	.L135:
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 2697              		.loc 1 1677 26
 2698 016a FB68     		ldr	r3, [r7, #12]
 2699 016c 2022     		movs	r2, #32
 2700 016e 83F84220 		strb	r2, [r3, #66]
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 2701              		.loc 1 1679 18
 2702 0172 0323     		movs	r3, #3
 2703 0174 14E0     		b	.L124
 2704              	.L127:
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2705              		.loc 1 1627 17
 2706 0176 FB68     		ldr	r3, [r7, #12]
 2707 0178 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 2708 017a 9BB2     		uxth	r3, r3
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
 2709              		.loc 1 1627 11
 2710 017c 002B     		cmp	r3, #0
 2711 017e 82D1     		bne	.L136
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set number of received elements in output parameter : RxLen */
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     *RxLen = huart->RxXferSize - huart->RxXferCount;
 2712              		.loc 1 1685 19
 2713 0180 FB68     		ldr	r3, [r7, #12]
 2714 0182 9A8D     		ldrh	r2, [r3, #44]
 2715              		.loc 1 1685 39
 2716 0184 FB68     		ldr	r3, [r7, #12]
 2717 0186 DB8D     		ldrh	r3, [r3, #46]	@ movhi
ARM GAS  /tmp/cc17XZfc.s 			page 98


 2718 0188 9BB2     		uxth	r3, r3
 2719              		.loc 1 1685 32
 2720 018a D31A     		subs	r3, r2, r3
 2721 018c 9AB2     		uxth	r2, r3
 2722              		.loc 1 1685 12
 2723 018e 3B68     		ldr	r3, [r7]
 2724 0190 1A80     		strh	r2, [r3]	@ movhi
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2725              		.loc 1 1687 20
 2726 0192 FB68     		ldr	r3, [r7, #12]
 2727 0194 2022     		movs	r2, #32
 2728 0196 83F84220 		strb	r2, [r3, #66]
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 2729              		.loc 1 1689 12
 2730 019a 0023     		movs	r3, #0
 2731 019c 00E0     		b	.L124
 2732              	.L121:
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 2733              		.loc 1 1693 12
 2734 019e 0223     		movs	r3, #2
 2735              	.L124:
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2736              		.loc 1 1695 1
 2737 01a0 1846     		mov	r0, r3
 2738 01a2 2037     		adds	r7, r7, #32
 2739              	.LCFI88:
 2740              		.cfi_def_cfa_offset 8
 2741 01a4 BD46     		mov	sp, r7
 2742              	.LCFI89:
 2743              		.cfi_def_cfa_register 13
 2744              		@ sp needed
 2745 01a6 80BD     		pop	{r7, pc}
 2746              		.cfi_endproc
 2747              	.LFE81:
 2749              		.section	.text.HAL_UARTEx_ReceiveToIdle_IT,"ax",%progbits
 2750              		.align	1
 2751              		.global	HAL_UARTEx_ReceiveToIdle_IT
 2752              		.syntax unified
 2753              		.thumb
 2754              		.thumb_func
 2756              	HAL_UARTEx_ReceiveToIdle_IT:
 2757              	.LFB82:
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode till either the expected number of data is r
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         to UART interrupts raised by RXNE and IDLE events. Callback is called at end of recepti
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         number of received data elements.
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
ARM GAS  /tmp/cc17XZfc.s 			page 99


1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart UART handle.
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t S
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2758              		.loc 1 1711 1
 2759              		.cfi_startproc
 2760              		@ args = 0, pretend = 0, frame = 48
 2761              		@ frame_needed = 1, uses_anonymous_args = 0
 2762 0000 80B5     		push	{r7, lr}
 2763              	.LCFI90:
 2764              		.cfi_def_cfa_offset 8
 2765              		.cfi_offset 7, -8
 2766              		.cfi_offset 14, -4
 2767 0002 8CB0     		sub	sp, sp, #48
 2768              	.LCFI91:
 2769              		.cfi_def_cfa_offset 56
 2770 0004 00AF     		add	r7, sp, #0
 2771              	.LCFI92:
 2772              		.cfi_def_cfa_register 7
 2773 0006 F860     		str	r0, [r7, #12]
 2774 0008 B960     		str	r1, [r7, #8]
 2775 000a 1346     		mov	r3, r2
 2776 000c FB80     		strh	r3, [r7, #6]	@ movhi
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status;
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2777              		.loc 1 1715 12
 2778 000e FB68     		ldr	r3, [r7, #12]
 2779 0010 93F84230 		ldrb	r3, [r3, #66]
 2780 0014 DBB2     		uxtb	r3, r3
 2781              		.loc 1 1715 6
 2782 0016 202B     		cmp	r3, #32
 2783 0018 4AD1     		bne	.L138
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2784              		.loc 1 1717 8
 2785 001a BB68     		ldr	r3, [r7, #8]
 2786 001c 002B     		cmp	r3, #0
 2787 001e 02D0     		beq	.L139
 2788              		.loc 1 1717 25 discriminator 1
 2789 0020 FB88     		ldrh	r3, [r7, #6]
 2790 0022 002B     		cmp	r3, #0
 2791 0024 01D1     		bne	.L140
 2792              	.L139:
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 2793              		.loc 1 1719 14
 2794 0026 0123     		movs	r3, #1
 2795 0028 43E0     		b	.L141
 2796              	.L140:
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to reception till IDLE Event*/
ARM GAS  /tmp/cc17XZfc.s 			page 100


1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2797              		.loc 1 1723 26
 2798 002a FB68     		ldr	r3, [r7, #12]
 2799 002c 0122     		movs	r2, #1
 2800 002e 1A63     		str	r2, [r3, #48]
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 2801              		.loc 1 1724 24
 2802 0030 FB68     		ldr	r3, [r7, #12]
 2803 0032 0022     		movs	r2, #0
 2804 0034 5A63     		str	r2, [r3, #52]
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  UART_Start_Receive_IT(huart, pData, Size);
 2805              		.loc 1 1726 15
 2806 0036 FB88     		ldrh	r3, [r7, #6]
 2807 0038 1A46     		mov	r2, r3
 2808 003a B968     		ldr	r1, [r7, #8]
 2809 003c F868     		ldr	r0, [r7, #12]
 2810 003e FFF7FEFF 		bl	UART_Start_Receive_IT
 2811 0042 0346     		mov	r3, r0
 2812 0044 87F82F30 		strb	r3, [r7, #47]
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check Rx process has been successfully started */
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (status == HAL_OK)
 2813              		.loc 1 1729 8
 2814 0048 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2815 004c 002B     		cmp	r3, #0
 2816 004e 2CD1     		bne	.L142
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2817              		.loc 1 1731 16
 2818 0050 FB68     		ldr	r3, [r7, #12]
 2819 0052 1B6B     		ldr	r3, [r3, #48]
 2820              		.loc 1 1731 10
 2821 0054 012B     		cmp	r3, #1
 2822 0056 25D1     		bne	.L143
 2823              	.LBB377:
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 2824              		.loc 1 1733 9
 2825 0058 0023     		movs	r3, #0
 2826 005a 3B61     		str	r3, [r7, #16]
 2827 005c FB68     		ldr	r3, [r7, #12]
 2828 005e 1B68     		ldr	r3, [r3]
 2829 0060 1B68     		ldr	r3, [r3]
 2830 0062 3B61     		str	r3, [r7, #16]
 2831 0064 FB68     		ldr	r3, [r7, #12]
 2832 0066 1B68     		ldr	r3, [r3]
 2833 0068 5B68     		ldr	r3, [r3, #4]
 2834 006a 3B61     		str	r3, [r7, #16]
 2835 006c 3B69     		ldr	r3, [r7, #16]
 2836              	.L146:
 2837              	.LBE377:
 2838              	.LBB378:
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 2839              		.loc 1 1734 9 discriminator 1
 2840 006e FB68     		ldr	r3, [r7, #12]
 2841 0070 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc17XZfc.s 			page 101


 2842 0072 0C33     		adds	r3, r3, #12
 2843 0074 BB61     		str	r3, [r7, #24]
 2844              	.LBB379:
 2845              	.LBB380:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2846              		.loc 2 1072 4 discriminator 1
 2847 0076 BB69     		ldr	r3, [r7, #24]
 2848              		.syntax unified
 2849              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2850 0078 53E8003F 		ldrex r3, [r3]
 2851              	@ 0 "" 2
 2852              		.thumb
 2853              		.syntax unified
 2854 007c 7B61     		str	r3, [r7, #20]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2855              		.loc 2 1073 10 discriminator 1
 2856 007e 7B69     		ldr	r3, [r7, #20]
 2857              	.LBE380:
 2858              	.LBE379:
 2859              		.loc 1 1734 9 discriminator 1
 2860 0080 43F01003 		orr	r3, r3, #16
 2861 0084 BB62     		str	r3, [r7, #40]
 2862 0086 FB68     		ldr	r3, [r7, #12]
 2863 0088 1B68     		ldr	r3, [r3]
 2864 008a 0C33     		adds	r3, r3, #12
 2865 008c BA6A     		ldr	r2, [r7, #40]
 2866 008e 7A62     		str	r2, [r7, #36]
 2867 0090 3B62     		str	r3, [r7, #32]
 2868              	.LBB381:
 2869              	.LBB382:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 2870              		.loc 2 1123 4 discriminator 1
 2871 0092 396A     		ldr	r1, [r7, #32]
 2872 0094 7A6A     		ldr	r2, [r7, #36]
 2873              		.syntax unified
 2874              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2875 0096 41E80023 		strex r3, r2, [r1]
 2876              	@ 0 "" 2
 2877              		.thumb
 2878              		.syntax unified
 2879 009a FB61     		str	r3, [r7, #28]
 2880              		.loc 2 1124 10 discriminator 1
 2881 009c FB69     		ldr	r3, [r7, #28]
 2882              	.LBE382:
 2883              	.LBE381:
 2884              		.loc 1 1734 9 discriminator 1
 2885 009e 002B     		cmp	r3, #0
 2886 00a0 E5D1     		bne	.L146
 2887 00a2 02E0     		b	.L142
 2888              	.L143:
 2889              	.LBE378:
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* In case of errors already pending when reception is started,
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Interrupts may have already been raised and lead to reception abortion.
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            (Overrun error for instance).
ARM GAS  /tmp/cc17XZfc.s 			page 102


1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status = HAL_ERROR;
 2890              		.loc 1 1742 16
 2891 00a4 0123     		movs	r3, #1
 2892 00a6 87F82F30 		strb	r3, [r7, #47]
 2893              	.L142:
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return status;
 2894              		.loc 1 1746 12
 2895 00aa 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2896 00ae 00E0     		b	.L141
 2897              	.L138:
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 2898              		.loc 1 1750 12
 2899 00b0 0223     		movs	r3, #2
 2900              	.L141:
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 2901              		.loc 1 1752 1
 2902 00b2 1846     		mov	r0, r3
 2903 00b4 3037     		adds	r7, r7, #48
 2904              	.LCFI93:
 2905              		.cfi_def_cfa_offset 8
 2906 00b6 BD46     		mov	sp, r7
 2907              	.LCFI94:
 2908              		.cfi_def_cfa_register 13
 2909              		@ sp needed
 2910 00b8 80BD     		pop	{r7, pc}
 2911              		.cfi_endproc
 2912              	.LFE82:
 2914              		.section	.text.HAL_UARTEx_ReceiveToIdle_DMA,"ax",%progbits
 2915              		.align	1
 2916              		.global	HAL_UARTEx_ReceiveToIdle_DMA
 2917              		.syntax unified
 2918              		.thumb
 2919              		.thumb_func
 2921              	HAL_UARTEx_ReceiveToIdle_DMA:
 2922              	.LFB83:
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode till either the expected number of data is receive
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   Reception is initiated by this function call. Further progress of reception is achieved
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         to DMA services, transferring automatically received data elements in user reception bu
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         calling registered callbacks at half/end of reception. UART IDLE events are also used t
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         reception phase as ended. In all cases, callback execution will indicate number of rece
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the parity bit (MSB position).
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M =
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         the received data is handled as a set of uint16_t. In this case, Size must indicate the
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         of uint16_t available through pData.
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param huart UART handle.
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
ARM GAS  /tmp/cc17XZfc.s 			page 103


1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t 
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 2923              		.loc 1 1771 1
 2924              		.cfi_startproc
 2925              		@ args = 0, pretend = 0, frame = 48
 2926              		@ frame_needed = 1, uses_anonymous_args = 0
 2927 0000 80B5     		push	{r7, lr}
 2928              	.LCFI95:
 2929              		.cfi_def_cfa_offset 8
 2930              		.cfi_offset 7, -8
 2931              		.cfi_offset 14, -4
 2932 0002 8CB0     		sub	sp, sp, #48
 2933              	.LCFI96:
 2934              		.cfi_def_cfa_offset 56
 2935 0004 00AF     		add	r7, sp, #0
 2936              	.LCFI97:
 2937              		.cfi_def_cfa_register 7
 2938 0006 F860     		str	r0, [r7, #12]
 2939 0008 B960     		str	r1, [r7, #8]
 2940 000a 1346     		mov	r3, r2
 2941 000c FB80     		strh	r3, [r7, #6]	@ movhi
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_StatusTypeDef status;
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 2942              		.loc 1 1775 12
 2943 000e FB68     		ldr	r3, [r7, #12]
 2944 0010 93F84230 		ldrb	r3, [r3, #66]
 2945 0014 DBB2     		uxtb	r3, r3
 2946              		.loc 1 1775 6
 2947 0016 202B     		cmp	r3, #32
 2948 0018 4AD1     		bne	.L148
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 2949              		.loc 1 1777 8
 2950 001a BB68     		ldr	r3, [r7, #8]
 2951 001c 002B     		cmp	r3, #0
 2952 001e 02D0     		beq	.L149
 2953              		.loc 1 1777 25 discriminator 1
 2954 0020 FB88     		ldrh	r3, [r7, #6]
 2955 0022 002B     		cmp	r3, #0
 2956 0024 01D1     		bne	.L150
 2957              	.L149:
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_ERROR;
 2958              		.loc 1 1779 14
 2959 0026 0123     		movs	r3, #1
 2960 0028 43E0     		b	.L151
 2961              	.L150:
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set Reception type to reception till IDLE Event*/
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 2962              		.loc 1 1783 26
ARM GAS  /tmp/cc17XZfc.s 			page 104


 2963 002a FB68     		ldr	r3, [r7, #12]
 2964 002c 0122     		movs	r2, #1
 2965 002e 1A63     		str	r2, [r3, #48]
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventType = HAL_UART_RXEVENT_TC;
 2966              		.loc 1 1784 24
 2967 0030 FB68     		ldr	r3, [r7, #12]
 2968 0032 0022     		movs	r2, #0
 2969 0034 5A63     		str	r2, [r3, #52]
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     status =  UART_Start_Receive_DMA(huart, pData, Size);
 2970              		.loc 1 1786 15
 2971 0036 FB88     		ldrh	r3, [r7, #6]
 2972 0038 1A46     		mov	r2, r3
 2973 003a B968     		ldr	r1, [r7, #8]
 2974 003c F868     		ldr	r0, [r7, #12]
 2975 003e FFF7FEFF 		bl	UART_Start_Receive_DMA
 2976 0042 0346     		mov	r3, r0
 2977 0044 87F82F30 		strb	r3, [r7, #47]
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check Rx process has been successfully started */
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (status == HAL_OK)
 2978              		.loc 1 1789 8
 2979 0048 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2980 004c 002B     		cmp	r3, #0
 2981 004e 2CD1     		bne	.L152
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 2982              		.loc 1 1791 16
 2983 0050 FB68     		ldr	r3, [r7, #12]
 2984 0052 1B6B     		ldr	r3, [r3, #48]
 2985              		.loc 1 1791 10
 2986 0054 012B     		cmp	r3, #1
 2987 0056 25D1     		bne	.L153
 2988              	.LBB383:
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UART_CLEAR_IDLEFLAG(huart);
 2989              		.loc 1 1793 9
 2990 0058 0023     		movs	r3, #0
 2991 005a 3B61     		str	r3, [r7, #16]
 2992 005c FB68     		ldr	r3, [r7, #12]
 2993 005e 1B68     		ldr	r3, [r3]
 2994 0060 1B68     		ldr	r3, [r3]
 2995 0062 3B61     		str	r3, [r7, #16]
 2996 0064 FB68     		ldr	r3, [r7, #12]
 2997 0066 1B68     		ldr	r3, [r3]
 2998 0068 5B68     		ldr	r3, [r3, #4]
 2999 006a 3B61     		str	r3, [r7, #16]
 3000 006c 3B69     		ldr	r3, [r7, #16]
 3001              	.L156:
 3002              	.LBE383:
 3003              	.LBB384:
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 3004              		.loc 1 1794 9 discriminator 1
 3005 006e FB68     		ldr	r3, [r7, #12]
 3006 0070 1B68     		ldr	r3, [r3]
 3007 0072 0C33     		adds	r3, r3, #12
 3008 0074 BB61     		str	r3, [r7, #24]
ARM GAS  /tmp/cc17XZfc.s 			page 105


 3009              	.LBB385:
 3010              	.LBB386:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3011              		.loc 2 1072 4 discriminator 1
 3012 0076 BB69     		ldr	r3, [r7, #24]
 3013              		.syntax unified
 3014              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3015 0078 53E8003F 		ldrex r3, [r3]
 3016              	@ 0 "" 2
 3017              		.thumb
 3018              		.syntax unified
 3019 007c 7B61     		str	r3, [r7, #20]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3020              		.loc 2 1073 10 discriminator 1
 3021 007e 7B69     		ldr	r3, [r7, #20]
 3022              	.LBE386:
 3023              	.LBE385:
 3024              		.loc 1 1794 9 discriminator 1
 3025 0080 43F01003 		orr	r3, r3, #16
 3026 0084 BB62     		str	r3, [r7, #40]
 3027 0086 FB68     		ldr	r3, [r7, #12]
 3028 0088 1B68     		ldr	r3, [r3]
 3029 008a 0C33     		adds	r3, r3, #12
 3030 008c BA6A     		ldr	r2, [r7, #40]
 3031 008e 7A62     		str	r2, [r7, #36]
 3032 0090 3B62     		str	r3, [r7, #32]
 3033              	.LBB387:
 3034              	.LBB388:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3035              		.loc 2 1123 4 discriminator 1
 3036 0092 396A     		ldr	r1, [r7, #32]
 3037 0094 7A6A     		ldr	r2, [r7, #36]
 3038              		.syntax unified
 3039              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3040 0096 41E80023 		strex r3, r2, [r1]
 3041              	@ 0 "" 2
 3042              		.thumb
 3043              		.syntax unified
 3044 009a FB61     		str	r3, [r7, #28]
 3045              		.loc 2 1124 10 discriminator 1
 3046 009c FB69     		ldr	r3, [r7, #28]
 3047              	.LBE388:
 3048              	.LBE387:
 3049              		.loc 1 1794 9 discriminator 1
 3050 009e 002B     		cmp	r3, #0
 3051 00a0 E5D1     		bne	.L156
 3052 00a2 02E0     		b	.L152
 3053              	.L153:
 3054              	.LBE384:
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* In case of errors already pending when reception is started,
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Interrupts may have already been raised and lead to reception abortion.
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            (Overrun error for instance).
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         status = HAL_ERROR;
ARM GAS  /tmp/cc17XZfc.s 			page 106


 3055              		.loc 1 1802 16
 3056 00a4 0123     		movs	r3, #1
 3057 00a6 87F82F30 		strb	r3, [r7, #47]
 3058              	.L152:
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return status;
 3059              		.loc 1 1806 12
 3060 00aa 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3061 00ae 00E0     		b	.L151
 3062              	.L148:
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 3063              		.loc 1 1810 12
 3064 00b0 0223     		movs	r3, #2
 3065              	.L151:
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3066              		.loc 1 1812 1
 3067 00b2 1846     		mov	r0, r3
 3068 00b4 3037     		adds	r7, r7, #48
 3069              	.LCFI98:
 3070              		.cfi_def_cfa_offset 8
 3071 00b6 BD46     		mov	sp, r7
 3072              	.LCFI99:
 3073              		.cfi_def_cfa_register 13
 3074              		@ sp needed
 3075 00b8 80BD     		pop	{r7, pc}
 3076              		.cfi_endproc
 3077              	.LFE83:
 3079              		.section	.text.HAL_UARTEx_GetRxEventType,"ax",%progbits
 3080              		.align	1
 3081              		.global	HAL_UARTEx_GetRxEventType
 3082              		.syntax unified
 3083              		.thumb
 3084              		.thumb_func
 3086              	HAL_UARTEx_GetRxEventType:
 3087              	.LFB84:
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief Provide Rx Event type that has lead to RxEvent callback execution.
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note  When HAL_UARTEx_ReceiveToIdle_IT() or HAL_UARTEx_ReceiveToIdle_DMA() API are called, pro
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        of reception process is provided to application through calls of Rx Event callback (eith
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        HAL_UARTEx_RxEventCallback() or user registered one). As several types of events could o
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        Half Transfer, or Transfer Complete), this function allows to retrieve the Rx Event type
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        to Rx Event callback execution.
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note  This function is expected to be called within the user implementation of Rx Event Callba
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        in order to provide the accurate value :
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        In Interrupt Mode :
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - HAL_UART_RXEVENT_TC : when Reception has been completed (expected nb of data has be
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - HAL_UART_RXEVENT_IDLE : when Idle event occurred prior reception has been completed
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *             received data is lower than expected one)
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        In DMA Mode :
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - HAL_UART_RXEVENT_TC : when Reception has been completed (expected nb of data has be
ARM GAS  /tmp/cc17XZfc.s 			page 107


1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - HAL_UART_RXEVENT_HT : when half of expected nb of data has been received
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - HAL_UART_RXEVENT_IDLE : when Idle event occurred prior reception has been completed
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *             received data is lower than expected one).
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        In DMA mode, RxEvent callback could be called several times;
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        When DMA is configured in Normal Mode, HT event does not stop Reception process;
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *        When DMA is configured in Circular Mode, HT, TC or IDLE events don't stop Reception proc
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval Rx Event Type (returned value will be a value of @ref UART_RxEvent_Type_Values)
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_UART_RxEventTypeTypeDef HAL_UARTEx_GetRxEventType(UART_HandleTypeDef *huart)
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3088              		.loc 1 1839 1
 3089              		.cfi_startproc
 3090              		@ args = 0, pretend = 0, frame = 8
 3091              		@ frame_needed = 1, uses_anonymous_args = 0
 3092              		@ link register save eliminated.
 3093 0000 80B4     		push	{r7}
 3094              	.LCFI100:
 3095              		.cfi_def_cfa_offset 4
 3096              		.cfi_offset 7, -4
 3097 0002 83B0     		sub	sp, sp, #12
 3098              	.LCFI101:
 3099              		.cfi_def_cfa_offset 16
 3100 0004 00AF     		add	r7, sp, #0
 3101              	.LCFI102:
 3102              		.cfi_def_cfa_register 7
 3103 0006 7860     		str	r0, [r7, #4]
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Return Rx Event type value, as stored in UART handle */
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return(huart->RxEventType);
 3104              		.loc 1 1841 15
 3105 0008 7B68     		ldr	r3, [r7, #4]
 3106 000a 5B6B     		ldr	r3, [r3, #52]
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3107              		.loc 1 1842 1
 3108 000c 1846     		mov	r0, r3
 3109 000e 0C37     		adds	r7, r7, #12
 3110              	.LCFI103:
 3111              		.cfi_def_cfa_offset 4
 3112 0010 BD46     		mov	sp, r7
 3113              	.LCFI104:
 3114              		.cfi_def_cfa_register 13
 3115              		@ sp needed
 3116 0012 80BC     		pop	{r7}
 3117              	.LCFI105:
 3118              		.cfi_restore 7
 3119              		.cfi_def_cfa_offset 0
 3120 0014 7047     		bx	lr
 3121              		.cfi_endproc
 3122              	.LFE84:
 3124              		.section	.text.HAL_UART_Abort,"ax",%progbits
 3125              		.align	1
 3126              		.global	HAL_UART_Abort
 3127              		.syntax unified
 3128              		.thumb
 3129              		.thumb_func
 3131              	HAL_UART_Abort:
 3132              	.LFB85:
ARM GAS  /tmp/cc17XZfc.s 			page 108


1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3133              		.loc 1 1857 1
 3134              		.cfi_startproc
 3135              		@ args = 0, pretend = 0, frame = 128
 3136              		@ frame_needed = 1, uses_anonymous_args = 0
 3137 0000 80B5     		push	{r7, lr}
 3138              	.LCFI106:
 3139              		.cfi_def_cfa_offset 8
 3140              		.cfi_offset 7, -8
 3141              		.cfi_offset 14, -4
 3142 0002 A0B0     		sub	sp, sp, #128
 3143              	.LCFI107:
 3144              		.cfi_def_cfa_offset 136
 3145 0004 00AF     		add	r7, sp, #0
 3146              	.LCFI108:
 3147              		.cfi_def_cfa_register 7
 3148 0006 7860     		str	r0, [r7, #4]
 3149              	.L162:
 3150              	.LBB389:
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USA
 3151              		.loc 1 1859 3 discriminator 1
 3152 0008 7B68     		ldr	r3, [r7, #4]
 3153 000a 1B68     		ldr	r3, [r3]
 3154 000c 0C33     		adds	r3, r3, #12
 3155 000e FB65     		str	r3, [r7, #92]
 3156              	.LBB390:
 3157              	.LBB391:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3158              		.loc 2 1072 4 discriminator 1
 3159 0010 FB6D     		ldr	r3, [r7, #92]
 3160              		.syntax unified
 3161              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3162 0012 53E8003F 		ldrex r3, [r3]
 3163              	@ 0 "" 2
 3164              		.thumb
 3165              		.syntax unified
 3166 0016 BB65     		str	r3, [r7, #88]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3167              		.loc 2 1073 10 discriminator 1
 3168 0018 BB6D     		ldr	r3, [r7, #88]
 3169              	.LBE391:
 3170              	.LBE390:
ARM GAS  /tmp/cc17XZfc.s 			page 109


 3171              		.loc 1 1859 3 discriminator 1
 3172 001a 23F4F073 		bic	r3, r3, #480
 3173 001e FB67     		str	r3, [r7, #124]
 3174 0020 7B68     		ldr	r3, [r7, #4]
 3175 0022 1B68     		ldr	r3, [r3]
 3176 0024 0C33     		adds	r3, r3, #12
 3177 0026 FA6F     		ldr	r2, [r7, #124]
 3178 0028 BA66     		str	r2, [r7, #104]
 3179 002a 7B66     		str	r3, [r7, #100]
 3180              	.LBB392:
 3181              	.LBB393:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3182              		.loc 2 1123 4 discriminator 1
 3183 002c 796E     		ldr	r1, [r7, #100]
 3184 002e BA6E     		ldr	r2, [r7, #104]
 3185              		.syntax unified
 3186              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3187 0030 41E80023 		strex r3, r2, [r1]
 3188              	@ 0 "" 2
 3189              		.thumb
 3190              		.syntax unified
 3191 0034 3B66     		str	r3, [r7, #96]
 3192              		.loc 2 1124 10 discriminator 1
 3193 0036 3B6E     		ldr	r3, [r7, #96]
 3194              	.LBE393:
 3195              	.LBE392:
 3196              		.loc 1 1859 3 discriminator 1
 3197 0038 002B     		cmp	r3, #0
 3198 003a E5D1     		bne	.L162
 3199              	.L165:
 3200              	.LBE389:
 3201              	.LBB394:
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3202              		.loc 1 1860 3 discriminator 1
 3203 003c 7B68     		ldr	r3, [r7, #4]
 3204 003e 1B68     		ldr	r3, [r3]
 3205 0040 1433     		adds	r3, r3, #20
 3206 0042 BB64     		str	r3, [r7, #72]
 3207              	.LBB395:
 3208              	.LBB396:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3209              		.loc 2 1072 4 discriminator 1
 3210 0044 BB6C     		ldr	r3, [r7, #72]
 3211              		.syntax unified
 3212              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3213 0046 53E8003F 		ldrex r3, [r3]
 3214              	@ 0 "" 2
 3215              		.thumb
 3216              		.syntax unified
 3217 004a 7B64     		str	r3, [r7, #68]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3218              		.loc 2 1073 10 discriminator 1
 3219 004c 7B6C     		ldr	r3, [r7, #68]
 3220              	.LBE396:
 3221              	.LBE395:
 3222              		.loc 1 1860 3 discriminator 1
 3223 004e 23F00103 		bic	r3, r3, #1
ARM GAS  /tmp/cc17XZfc.s 			page 110


 3224 0052 BB67     		str	r3, [r7, #120]
 3225 0054 7B68     		ldr	r3, [r7, #4]
 3226 0056 1B68     		ldr	r3, [r3]
 3227 0058 1433     		adds	r3, r3, #20
 3228 005a BA6F     		ldr	r2, [r7, #120]
 3229 005c 7A65     		str	r2, [r7, #84]
 3230 005e 3B65     		str	r3, [r7, #80]
 3231              	.LBB397:
 3232              	.LBB398:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3233              		.loc 2 1123 4 discriminator 1
 3234 0060 396D     		ldr	r1, [r7, #80]
 3235 0062 7A6D     		ldr	r2, [r7, #84]
 3236              		.syntax unified
 3237              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3238 0064 41E80023 		strex r3, r2, [r1]
 3239              	@ 0 "" 2
 3240              		.thumb
 3241              		.syntax unified
 3242 0068 FB64     		str	r3, [r7, #76]
 3243              		.loc 2 1124 10 discriminator 1
 3244 006a FB6C     		ldr	r3, [r7, #76]
 3245              	.LBE398:
 3246              	.LBE397:
 3247              		.loc 1 1860 3 discriminator 1
 3248 006c 002B     		cmp	r3, #0
 3249 006e E5D1     		bne	.L165
 3250              	.LBE394:
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3251              		.loc 1 1863 12
 3252 0070 7B68     		ldr	r3, [r7, #4]
 3253 0072 1B6B     		ldr	r3, [r3, #48]
 3254              		.loc 1 1863 6
 3255 0074 012B     		cmp	r3, #1
 3256 0076 19D1     		bne	.L166
 3257              	.L169:
 3258              	.LBB399:
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 3259              		.loc 1 1865 5 discriminator 1
 3260 0078 7B68     		ldr	r3, [r7, #4]
 3261 007a 1B68     		ldr	r3, [r3]
 3262 007c 0C33     		adds	r3, r3, #12
 3263 007e 7B63     		str	r3, [r7, #52]
 3264              	.LBB400:
 3265              	.LBB401:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3266              		.loc 2 1072 4 discriminator 1
 3267 0080 7B6B     		ldr	r3, [r7, #52]
 3268              		.syntax unified
 3269              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3270 0082 53E8003F 		ldrex r3, [r3]
 3271              	@ 0 "" 2
 3272              		.thumb
 3273              		.syntax unified
ARM GAS  /tmp/cc17XZfc.s 			page 111


 3274 0086 3B63     		str	r3, [r7, #48]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3275              		.loc 2 1073 10 discriminator 1
 3276 0088 3B6B     		ldr	r3, [r7, #48]
 3277              	.LBE401:
 3278              	.LBE400:
 3279              		.loc 1 1865 5 discriminator 1
 3280 008a 23F01003 		bic	r3, r3, #16
 3281 008e 7B67     		str	r3, [r7, #116]
 3282 0090 7B68     		ldr	r3, [r7, #4]
 3283 0092 1B68     		ldr	r3, [r3]
 3284 0094 0C33     		adds	r3, r3, #12
 3285 0096 7A6F     		ldr	r2, [r7, #116]
 3286 0098 3A64     		str	r2, [r7, #64]
 3287 009a FB63     		str	r3, [r7, #60]
 3288              	.LBB402:
 3289              	.LBB403:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3290              		.loc 2 1123 4 discriminator 1
 3291 009c F96B     		ldr	r1, [r7, #60]
 3292 009e 3A6C     		ldr	r2, [r7, #64]
 3293              		.syntax unified
 3294              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3295 00a0 41E80023 		strex r3, r2, [r1]
 3296              	@ 0 "" 2
 3297              		.thumb
 3298              		.syntax unified
 3299 00a4 BB63     		str	r3, [r7, #56]
 3300              		.loc 2 1124 10 discriminator 1
 3301 00a6 BB6B     		ldr	r3, [r7, #56]
 3302              	.LBE403:
 3303              	.LBE402:
 3304              		.loc 1 1865 5 discriminator 1
 3305 00a8 002B     		cmp	r3, #0
 3306 00aa E5D1     		bne	.L169
 3307              	.L166:
 3308              	.LBE399:
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3309              		.loc 1 1869 7
 3310 00ac 7B68     		ldr	r3, [r7, #4]
 3311 00ae 1B68     		ldr	r3, [r3]
 3312 00b0 5B69     		ldr	r3, [r3, #20]
 3313 00b2 03F08003 		and	r3, r3, #128
 3314              		.loc 1 1869 6
 3315 00b6 002B     		cmp	r3, #0
 3316 00b8 36D0     		beq	.L170
 3317              	.L173:
 3318              	.LBB404:
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 3319              		.loc 1 1871 5 discriminator 1
 3320 00ba 7B68     		ldr	r3, [r7, #4]
 3321 00bc 1B68     		ldr	r3, [r3]
 3322 00be 1433     		adds	r3, r3, #20
ARM GAS  /tmp/cc17XZfc.s 			page 112


 3323 00c0 3B62     		str	r3, [r7, #32]
 3324              	.LBB405:
 3325              	.LBB406:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3326              		.loc 2 1072 4 discriminator 1
 3327 00c2 3B6A     		ldr	r3, [r7, #32]
 3328              		.syntax unified
 3329              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3330 00c4 53E8003F 		ldrex r3, [r3]
 3331              	@ 0 "" 2
 3332              		.thumb
 3333              		.syntax unified
 3334 00c8 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3335              		.loc 2 1073 10 discriminator 1
 3336 00ca FB69     		ldr	r3, [r7, #28]
 3337              	.LBE406:
 3338              	.LBE405:
 3339              		.loc 1 1871 5 discriminator 1
 3340 00cc 23F08003 		bic	r3, r3, #128
 3341 00d0 3B67     		str	r3, [r7, #112]
 3342 00d2 7B68     		ldr	r3, [r7, #4]
 3343 00d4 1B68     		ldr	r3, [r3]
 3344 00d6 1433     		adds	r3, r3, #20
 3345 00d8 3A6F     		ldr	r2, [r7, #112]
 3346 00da FA62     		str	r2, [r7, #44]
 3347 00dc BB62     		str	r3, [r7, #40]
 3348              	.LBB407:
 3349              	.LBB408:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3350              		.loc 2 1123 4 discriminator 1
 3351 00de B96A     		ldr	r1, [r7, #40]
 3352 00e0 FA6A     		ldr	r2, [r7, #44]
 3353              		.syntax unified
 3354              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3355 00e2 41E80023 		strex r3, r2, [r1]
 3356              	@ 0 "" 2
 3357              		.thumb
 3358              		.syntax unified
 3359 00e6 7B62     		str	r3, [r7, #36]
 3360              		.loc 2 1124 10 discriminator 1
 3361 00e8 7B6A     		ldr	r3, [r7, #36]
 3362              	.LBE408:
 3363              	.LBE407:
 3364              		.loc 1 1871 5 discriminator 1
 3365 00ea 002B     		cmp	r3, #0
 3366 00ec E5D1     		bne	.L173
 3367              	.LBE404:
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 3368              		.loc 1 1874 14
 3369 00ee 7B68     		ldr	r3, [r7, #4]
 3370 00f0 9B6B     		ldr	r3, [r3, #56]
 3371              		.loc 1 1874 8
 3372 00f2 002B     		cmp	r3, #0
 3373 00f4 18D0     		beq	.L170
ARM GAS  /tmp/cc17XZfc.s 			page 113


1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 3374              		.loc 1 1878 12
 3375 00f6 7B68     		ldr	r3, [r7, #4]
 3376 00f8 9B6B     		ldr	r3, [r3, #56]
 3377              		.loc 1 1878 40
 3378 00fa 0022     		movs	r2, #0
 3379 00fc 5A63     		str	r2, [r3, #52]
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 3380              		.loc 1 1880 11
 3381 00fe 7B68     		ldr	r3, [r7, #4]
 3382 0100 9B6B     		ldr	r3, [r3, #56]
 3383 0102 1846     		mov	r0, r3
 3384 0104 FFF7FEFF 		bl	HAL_DMA_Abort
 3385 0108 0346     		mov	r3, r0
 3386              		.loc 1 1880 10
 3387 010a 002B     		cmp	r3, #0
 3388 010c 0CD0     		beq	.L170
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 3389              		.loc 1 1882 13
 3390 010e 7B68     		ldr	r3, [r7, #4]
 3391 0110 9B6B     		ldr	r3, [r3, #56]
 3392 0112 1846     		mov	r0, r3
 3393 0114 FFF7FEFF 		bl	HAL_DMA_GetError
 3394 0118 0346     		mov	r3, r0
 3395              		.loc 1 1882 12
 3396 011a 202B     		cmp	r3, #32
 3397 011c 04D1     		bne	.L170
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 3398              		.loc 1 1885 28
 3399 011e 7B68     		ldr	r3, [r7, #4]
 3400 0120 1022     		movs	r2, #16
 3401 0122 5A64     		str	r2, [r3, #68]
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 3402              		.loc 1 1887 18
 3403 0124 0323     		movs	r3, #3
 3404 0126 52E0     		b	.L174
 3405              	.L170:
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3406              		.loc 1 1894 7
 3407 0128 7B68     		ldr	r3, [r7, #4]
 3408 012a 1B68     		ldr	r3, [r3]
 3409 012c 5B69     		ldr	r3, [r3, #20]
 3410 012e 03F04003 		and	r3, r3, #64
ARM GAS  /tmp/cc17XZfc.s 			page 114


 3411              		.loc 1 1894 6
 3412 0132 002B     		cmp	r3, #0
 3413 0134 36D0     		beq	.L175
 3414              	.L178:
 3415              	.LBB409:
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3416              		.loc 1 1896 5 discriminator 1
 3417 0136 7B68     		ldr	r3, [r7, #4]
 3418 0138 1B68     		ldr	r3, [r3]
 3419 013a 1433     		adds	r3, r3, #20
 3420 013c FB60     		str	r3, [r7, #12]
 3421              	.LBB410:
 3422              	.LBB411:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3423              		.loc 2 1072 4 discriminator 1
 3424 013e FB68     		ldr	r3, [r7, #12]
 3425              		.syntax unified
 3426              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3427 0140 53E8003F 		ldrex r3, [r3]
 3428              	@ 0 "" 2
 3429              		.thumb
 3430              		.syntax unified
 3431 0144 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3432              		.loc 2 1073 10 discriminator 1
 3433 0146 BB68     		ldr	r3, [r7, #8]
 3434              	.LBE411:
 3435              	.LBE410:
 3436              		.loc 1 1896 5 discriminator 1
 3437 0148 23F04003 		bic	r3, r3, #64
 3438 014c FB66     		str	r3, [r7, #108]
 3439 014e 7B68     		ldr	r3, [r7, #4]
 3440 0150 1B68     		ldr	r3, [r3]
 3441 0152 1433     		adds	r3, r3, #20
 3442 0154 FA6E     		ldr	r2, [r7, #108]
 3443 0156 BA61     		str	r2, [r7, #24]
 3444 0158 7B61     		str	r3, [r7, #20]
 3445              	.LBB412:
 3446              	.LBB413:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3447              		.loc 2 1123 4 discriminator 1
 3448 015a 7969     		ldr	r1, [r7, #20]
 3449 015c BA69     		ldr	r2, [r7, #24]
 3450              		.syntax unified
 3451              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3452 015e 41E80023 		strex r3, r2, [r1]
 3453              	@ 0 "" 2
 3454              		.thumb
 3455              		.syntax unified
 3456 0162 3B61     		str	r3, [r7, #16]
 3457              		.loc 2 1124 10 discriminator 1
 3458 0164 3B69     		ldr	r3, [r7, #16]
 3459              	.LBE413:
 3460              	.LBE412:
 3461              		.loc 1 1896 5 discriminator 1
 3462 0166 002B     		cmp	r3, #0
ARM GAS  /tmp/cc17XZfc.s 			page 115


 3463 0168 E5D1     		bne	.L178
 3464              	.LBE409:
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3465              		.loc 1 1899 14
 3466 016a 7B68     		ldr	r3, [r7, #4]
 3467 016c DB6B     		ldr	r3, [r3, #60]
 3468              		.loc 1 1899 8
 3469 016e 002B     		cmp	r3, #0
 3470 0170 18D0     		beq	.L175
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 3471              		.loc 1 1903 12
 3472 0172 7B68     		ldr	r3, [r7, #4]
 3473 0174 DB6B     		ldr	r3, [r3, #60]
 3474              		.loc 1 1903 40
 3475 0176 0022     		movs	r2, #0
 3476 0178 5A63     		str	r2, [r3, #52]
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 3477              		.loc 1 1905 11
 3478 017a 7B68     		ldr	r3, [r7, #4]
 3479 017c DB6B     		ldr	r3, [r3, #60]
 3480 017e 1846     		mov	r0, r3
 3481 0180 FFF7FEFF 		bl	HAL_DMA_Abort
 3482 0184 0346     		mov	r3, r0
 3483              		.loc 1 1905 10
 3484 0186 002B     		cmp	r3, #0
 3485 0188 0CD0     		beq	.L175
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 3486              		.loc 1 1907 13
 3487 018a 7B68     		ldr	r3, [r7, #4]
 3488 018c DB6B     		ldr	r3, [r3, #60]
 3489 018e 1846     		mov	r0, r3
 3490 0190 FFF7FEFF 		bl	HAL_DMA_GetError
 3491 0194 0346     		mov	r3, r0
 3492              		.loc 1 1907 12
 3493 0196 202B     		cmp	r3, #32
 3494 0198 04D1     		bne	.L175
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 3495              		.loc 1 1910 28
 3496 019a 7B68     		ldr	r3, [r7, #4]
 3497 019c 1022     		movs	r2, #16
 3498 019e 5A64     		str	r2, [r3, #68]
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 3499              		.loc 1 1912 18
 3500 01a0 0323     		movs	r3, #3
 3501 01a2 14E0     		b	.L174
 3502              	.L175:
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
ARM GAS  /tmp/cc17XZfc.s 			page 116


1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 3503              		.loc 1 1919 22
 3504 01a4 7B68     		ldr	r3, [r7, #4]
 3505 01a6 0022     		movs	r2, #0
 3506 01a8 DA84     		strh	r2, [r3, #38]	@ movhi
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 3507              		.loc 1 1920 22
 3508 01aa 7B68     		ldr	r3, [r7, #4]
 3509 01ac 0022     		movs	r2, #0
 3510 01ae DA85     		strh	r2, [r3, #46]	@ movhi
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 3511              		.loc 1 1923 20
 3512 01b0 7B68     		ldr	r3, [r7, #4]
 3513 01b2 0022     		movs	r2, #0
 3514 01b4 5A64     		str	r2, [r3, #68]
1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState and huart->gState to Ready */
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 3515              		.loc 1 1926 18
 3516 01b6 7B68     		ldr	r3, [r7, #4]
 3517 01b8 2022     		movs	r2, #32
 3518 01ba 83F84220 		strb	r2, [r3, #66]
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3519              		.loc 1 1927 17
 3520 01be 7B68     		ldr	r3, [r7, #4]
 3521 01c0 2022     		movs	r2, #32
 3522 01c2 83F84120 		strb	r2, [r3, #65]
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 3523              		.loc 1 1928 24
 3524 01c6 7B68     		ldr	r3, [r7, #4]
 3525 01c8 0022     		movs	r2, #0
 3526 01ca 1A63     		str	r2, [r3, #48]
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 3527              		.loc 1 1930 10
 3528 01cc 0023     		movs	r3, #0
 3529              	.L174:
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3530              		.loc 1 1931 1
 3531 01ce 1846     		mov	r0, r3
 3532 01d0 8037     		adds	r7, r7, #128
 3533              	.LCFI109:
 3534              		.cfi_def_cfa_offset 8
 3535 01d2 BD46     		mov	sp, r7
 3536              	.LCFI110:
 3537              		.cfi_def_cfa_register 13
 3538              		@ sp needed
 3539 01d4 80BD     		pop	{r7, pc}
 3540              		.cfi_endproc
 3541              	.LFE85:
ARM GAS  /tmp/cc17XZfc.s 			page 117


 3543              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 3544              		.align	1
 3545              		.global	HAL_UART_AbortTransmit
 3546              		.syntax unified
 3547              		.thumb
 3548              		.thumb_func
 3550              	HAL_UART_AbortTransmit:
 3551              	.LFB86:
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3552              		.loc 1 1946 1
 3553              		.cfi_startproc
 3554              		@ args = 0, pretend = 0, frame = 56
 3555              		@ frame_needed = 1, uses_anonymous_args = 0
 3556 0000 80B5     		push	{r7, lr}
 3557              	.LCFI111:
 3558              		.cfi_def_cfa_offset 8
 3559              		.cfi_offset 7, -8
 3560              		.cfi_offset 14, -4
 3561 0002 8EB0     		sub	sp, sp, #56
 3562              	.LCFI112:
 3563              		.cfi_def_cfa_offset 64
 3564 0004 00AF     		add	r7, sp, #0
 3565              	.LCFI113:
 3566              		.cfi_def_cfa_register 7
 3567 0006 7860     		str	r0, [r7, #4]
 3568              	.L182:
 3569              	.LBB414:
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 3570              		.loc 1 1948 3 discriminator 1
 3571 0008 7B68     		ldr	r3, [r7, #4]
 3572 000a 1B68     		ldr	r3, [r3]
 3573 000c 0C33     		adds	r3, r3, #12
 3574 000e 3B62     		str	r3, [r7, #32]
 3575              	.LBB415:
 3576              	.LBB416:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3577              		.loc 2 1072 4 discriminator 1
 3578 0010 3B6A     		ldr	r3, [r7, #32]
 3579              		.syntax unified
 3580              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3581 0012 53E8003F 		ldrex r3, [r3]
 3582              	@ 0 "" 2
ARM GAS  /tmp/cc17XZfc.s 			page 118


 3583              		.thumb
 3584              		.syntax unified
 3585 0016 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3586              		.loc 2 1073 10 discriminator 1
 3587 0018 FB69     		ldr	r3, [r7, #28]
 3588              	.LBE416:
 3589              	.LBE415:
 3590              		.loc 1 1948 3 discriminator 1
 3591 001a 23F0C003 		bic	r3, r3, #192
 3592 001e 7B63     		str	r3, [r7, #52]
 3593 0020 7B68     		ldr	r3, [r7, #4]
 3594 0022 1B68     		ldr	r3, [r3]
 3595 0024 0C33     		adds	r3, r3, #12
 3596 0026 7A6B     		ldr	r2, [r7, #52]
 3597 0028 FA62     		str	r2, [r7, #44]
 3598 002a BB62     		str	r3, [r7, #40]
 3599              	.LBB417:
 3600              	.LBB418:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3601              		.loc 2 1123 4 discriminator 1
 3602 002c B96A     		ldr	r1, [r7, #40]
 3603 002e FA6A     		ldr	r2, [r7, #44]
 3604              		.syntax unified
 3605              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3606 0030 41E80023 		strex r3, r2, [r1]
 3607              	@ 0 "" 2
 3608              		.thumb
 3609              		.syntax unified
 3610 0034 7B62     		str	r3, [r7, #36]
 3611              		.loc 2 1124 10 discriminator 1
 3612 0036 7B6A     		ldr	r3, [r7, #36]
 3613              	.LBE418:
 3614              	.LBE417:
 3615              		.loc 1 1948 3 discriminator 1
 3616 0038 002B     		cmp	r3, #0
 3617 003a E5D1     		bne	.L182
 3618              	.LBE414:
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3619              		.loc 1 1951 7
 3620 003c 7B68     		ldr	r3, [r7, #4]
 3621 003e 1B68     		ldr	r3, [r3]
 3622 0040 5B69     		ldr	r3, [r3, #20]
 3623 0042 03F08003 		and	r3, r3, #128
 3624              		.loc 1 1951 6
 3625 0046 002B     		cmp	r3, #0
 3626 0048 36D0     		beq	.L183
 3627              	.L186:
 3628              	.LBB419:
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 3629              		.loc 1 1953 5 discriminator 1
 3630 004a 7B68     		ldr	r3, [r7, #4]
 3631 004c 1B68     		ldr	r3, [r3]
 3632 004e 1433     		adds	r3, r3, #20
ARM GAS  /tmp/cc17XZfc.s 			page 119


 3633 0050 FB60     		str	r3, [r7, #12]
 3634              	.LBB420:
 3635              	.LBB421:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3636              		.loc 2 1072 4 discriminator 1
 3637 0052 FB68     		ldr	r3, [r7, #12]
 3638              		.syntax unified
 3639              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3640 0054 53E8003F 		ldrex r3, [r3]
 3641              	@ 0 "" 2
 3642              		.thumb
 3643              		.syntax unified
 3644 0058 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3645              		.loc 2 1073 10 discriminator 1
 3646 005a BB68     		ldr	r3, [r7, #8]
 3647              	.LBE421:
 3648              	.LBE420:
 3649              		.loc 1 1953 5 discriminator 1
 3650 005c 23F08003 		bic	r3, r3, #128
 3651 0060 3B63     		str	r3, [r7, #48]
 3652 0062 7B68     		ldr	r3, [r7, #4]
 3653 0064 1B68     		ldr	r3, [r3]
 3654 0066 1433     		adds	r3, r3, #20
 3655 0068 3A6B     		ldr	r2, [r7, #48]
 3656 006a BA61     		str	r2, [r7, #24]
 3657 006c 7B61     		str	r3, [r7, #20]
 3658              	.LBB422:
 3659              	.LBB423:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3660              		.loc 2 1123 4 discriminator 1
 3661 006e 7969     		ldr	r1, [r7, #20]
 3662 0070 BA69     		ldr	r2, [r7, #24]
 3663              		.syntax unified
 3664              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3665 0072 41E80023 		strex r3, r2, [r1]
 3666              	@ 0 "" 2
 3667              		.thumb
 3668              		.syntax unified
 3669 0076 3B61     		str	r3, [r7, #16]
 3670              		.loc 2 1124 10 discriminator 1
 3671 0078 3B69     		ldr	r3, [r7, #16]
 3672              	.LBE423:
 3673              	.LBE422:
 3674              		.loc 1 1953 5 discriminator 1
 3675 007a 002B     		cmp	r3, #0
 3676 007c E5D1     		bne	.L186
 3677              	.LBE419:
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 3678              		.loc 1 1956 14
 3679 007e 7B68     		ldr	r3, [r7, #4]
 3680 0080 9B6B     		ldr	r3, [r3, #56]
 3681              		.loc 1 1956 8
 3682 0082 002B     		cmp	r3, #0
 3683 0084 18D0     		beq	.L183
ARM GAS  /tmp/cc17XZfc.s 			page 120


1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 3684              		.loc 1 1960 12
 3685 0086 7B68     		ldr	r3, [r7, #4]
 3686 0088 9B6B     		ldr	r3, [r3, #56]
 3687              		.loc 1 1960 40
 3688 008a 0022     		movs	r2, #0
 3689 008c 5A63     		str	r2, [r3, #52]
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 3690              		.loc 1 1962 11
 3691 008e 7B68     		ldr	r3, [r7, #4]
 3692 0090 9B6B     		ldr	r3, [r3, #56]
 3693 0092 1846     		mov	r0, r3
 3694 0094 FFF7FEFF 		bl	HAL_DMA_Abort
 3695 0098 0346     		mov	r3, r0
 3696              		.loc 1 1962 10
 3697 009a 002B     		cmp	r3, #0
 3698 009c 0CD0     		beq	.L183
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 3699              		.loc 1 1964 13
 3700 009e 7B68     		ldr	r3, [r7, #4]
 3701 00a0 9B6B     		ldr	r3, [r3, #56]
 3702 00a2 1846     		mov	r0, r3
 3703 00a4 FFF7FEFF 		bl	HAL_DMA_GetError
 3704 00a8 0346     		mov	r3, r0
 3705              		.loc 1 1964 12
 3706 00aa 202B     		cmp	r3, #32
 3707 00ac 04D1     		bne	.L183
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 3708              		.loc 1 1967 28
 3709 00ae 7B68     		ldr	r3, [r7, #4]
 3710 00b0 1022     		movs	r2, #16
 3711 00b2 5A64     		str	r2, [r3, #68]
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 3712              		.loc 1 1969 18
 3713 00b4 0323     		movs	r3, #3
 3714 00b6 07E0     		b	.L187
 3715              	.L183:
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Tx transfer counter */
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 3716              		.loc 1 1976 22
 3717 00b8 7B68     		ldr	r3, [r7, #4]
 3718 00ba 0022     		movs	r2, #0
 3719 00bc DA84     		strh	r2, [r3, #38]	@ movhi
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/cc17XZfc.s 			page 121


1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3720              		.loc 1 1979 17
 3721 00be 7B68     		ldr	r3, [r7, #4]
 3722 00c0 2022     		movs	r2, #32
 3723 00c2 83F84120 		strb	r2, [r3, #65]
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 3724              		.loc 1 1981 10
 3725 00c6 0023     		movs	r3, #0
 3726              	.L187:
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 3727              		.loc 1 1982 1
 3728 00c8 1846     		mov	r0, r3
 3729 00ca 3837     		adds	r7, r7, #56
 3730              	.LCFI114:
 3731              		.cfi_def_cfa_offset 8
 3732 00cc BD46     		mov	sp, r7
 3733              	.LCFI115:
 3734              		.cfi_def_cfa_register 13
 3735              		@ sp needed
 3736 00ce 80BD     		pop	{r7, pc}
 3737              		.cfi_endproc
 3738              	.LFE86:
 3740              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 3741              		.align	1
 3742              		.global	HAL_UART_AbortReceive
 3743              		.syntax unified
 3744              		.thumb
 3745              		.thumb_func
 3747              	HAL_UART_AbortReceive:
 3748              	.LFB87:
1983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
1985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
1987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
1989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
1993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
1995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 3749              		.loc 1 1997 1
 3750              		.cfi_startproc
 3751              		@ args = 0, pretend = 0, frame = 104
 3752              		@ frame_needed = 1, uses_anonymous_args = 0
 3753 0000 80B5     		push	{r7, lr}
 3754              	.LCFI116:
 3755              		.cfi_def_cfa_offset 8
 3756              		.cfi_offset 7, -8
 3757              		.cfi_offset 14, -4
 3758 0002 9AB0     		sub	sp, sp, #104
ARM GAS  /tmp/cc17XZfc.s 			page 122


 3759              	.LCFI117:
 3760              		.cfi_def_cfa_offset 112
 3761 0004 00AF     		add	r7, sp, #0
 3762              	.LCFI118:
 3763              		.cfi_def_cfa_register 7
 3764 0006 7860     		str	r0, [r7, #4]
 3765              	.L191:
 3766              	.LBB424:
1998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 3767              		.loc 1 1999 3 discriminator 1
 3768 0008 7B68     		ldr	r3, [r7, #4]
 3769 000a 1B68     		ldr	r3, [r3]
 3770 000c 0C33     		adds	r3, r3, #12
 3771 000e BB64     		str	r3, [r7, #72]
 3772              	.LBB425:
 3773              	.LBB426:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3774              		.loc 2 1072 4 discriminator 1
 3775 0010 BB6C     		ldr	r3, [r7, #72]
 3776              		.syntax unified
 3777              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3778 0012 53E8003F 		ldrex r3, [r3]
 3779              	@ 0 "" 2
 3780              		.thumb
 3781              		.syntax unified
 3782 0016 7B64     		str	r3, [r7, #68]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3783              		.loc 2 1073 10 discriminator 1
 3784 0018 7B6C     		ldr	r3, [r7, #68]
 3785              	.LBE426:
 3786              	.LBE425:
 3787              		.loc 1 1999 3 discriminator 1
 3788 001a 23F49073 		bic	r3, r3, #288
 3789 001e 7B66     		str	r3, [r7, #100]
 3790 0020 7B68     		ldr	r3, [r7, #4]
 3791 0022 1B68     		ldr	r3, [r3]
 3792 0024 0C33     		adds	r3, r3, #12
 3793 0026 7A6E     		ldr	r2, [r7, #100]
 3794 0028 7A65     		str	r2, [r7, #84]
 3795 002a 3B65     		str	r3, [r7, #80]
 3796              	.LBB427:
 3797              	.LBB428:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3798              		.loc 2 1123 4 discriminator 1
 3799 002c 396D     		ldr	r1, [r7, #80]
 3800 002e 7A6D     		ldr	r2, [r7, #84]
 3801              		.syntax unified
 3802              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3803 0030 41E80023 		strex r3, r2, [r1]
 3804              	@ 0 "" 2
 3805              		.thumb
 3806              		.syntax unified
 3807 0034 FB64     		str	r3, [r7, #76]
 3808              		.loc 2 1124 10 discriminator 1
 3809 0036 FB6C     		ldr	r3, [r7, #76]
 3810              	.LBE428:
ARM GAS  /tmp/cc17XZfc.s 			page 123


 3811              	.LBE427:
 3812              		.loc 1 1999 3 discriminator 1
 3813 0038 002B     		cmp	r3, #0
 3814 003a E5D1     		bne	.L191
 3815              	.L194:
 3816              	.LBE424:
 3817              	.LBB429:
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3818              		.loc 1 2000 3 discriminator 1
 3819 003c 7B68     		ldr	r3, [r7, #4]
 3820 003e 1B68     		ldr	r3, [r3]
 3821 0040 1433     		adds	r3, r3, #20
 3822 0042 7B63     		str	r3, [r7, #52]
 3823              	.LBB430:
 3824              	.LBB431:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3825              		.loc 2 1072 4 discriminator 1
 3826 0044 7B6B     		ldr	r3, [r7, #52]
 3827              		.syntax unified
 3828              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3829 0046 53E8003F 		ldrex r3, [r3]
 3830              	@ 0 "" 2
 3831              		.thumb
 3832              		.syntax unified
 3833 004a 3B63     		str	r3, [r7, #48]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3834              		.loc 2 1073 10 discriminator 1
 3835 004c 3B6B     		ldr	r3, [r7, #48]
 3836              	.LBE431:
 3837              	.LBE430:
 3838              		.loc 1 2000 3 discriminator 1
 3839 004e 23F00103 		bic	r3, r3, #1
 3840 0052 3B66     		str	r3, [r7, #96]
 3841 0054 7B68     		ldr	r3, [r7, #4]
 3842 0056 1B68     		ldr	r3, [r3]
 3843 0058 1433     		adds	r3, r3, #20
 3844 005a 3A6E     		ldr	r2, [r7, #96]
 3845 005c 3A64     		str	r2, [r7, #64]
 3846 005e FB63     		str	r3, [r7, #60]
 3847              	.LBB432:
 3848              	.LBB433:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3849              		.loc 2 1123 4 discriminator 1
 3850 0060 F96B     		ldr	r1, [r7, #60]
 3851 0062 3A6C     		ldr	r2, [r7, #64]
 3852              		.syntax unified
 3853              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3854 0064 41E80023 		strex r3, r2, [r1]
 3855              	@ 0 "" 2
 3856              		.thumb
 3857              		.syntax unified
 3858 0068 BB63     		str	r3, [r7, #56]
 3859              		.loc 2 1124 10 discriminator 1
 3860 006a BB6B     		ldr	r3, [r7, #56]
 3861              	.LBE433:
 3862              	.LBE432:
 3863              		.loc 1 2000 3 discriminator 1
ARM GAS  /tmp/cc17XZfc.s 			page 124


 3864 006c 002B     		cmp	r3, #0
 3865 006e E5D1     		bne	.L194
 3866              	.LBE429:
2001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 3867              		.loc 1 2003 12
 3868 0070 7B68     		ldr	r3, [r7, #4]
 3869 0072 1B6B     		ldr	r3, [r3, #48]
 3870              		.loc 1 2003 6
 3871 0074 012B     		cmp	r3, #1
 3872 0076 19D1     		bne	.L195
 3873              	.L198:
 3874              	.LBB434:
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 3875              		.loc 1 2005 5 discriminator 1
 3876 0078 7B68     		ldr	r3, [r7, #4]
 3877 007a 1B68     		ldr	r3, [r3]
 3878 007c 0C33     		adds	r3, r3, #12
 3879 007e 3B62     		str	r3, [r7, #32]
 3880              	.LBB435:
 3881              	.LBB436:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3882              		.loc 2 1072 4 discriminator 1
 3883 0080 3B6A     		ldr	r3, [r7, #32]
 3884              		.syntax unified
 3885              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3886 0082 53E8003F 		ldrex r3, [r3]
 3887              	@ 0 "" 2
 3888              		.thumb
 3889              		.syntax unified
 3890 0086 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3891              		.loc 2 1073 10 discriminator 1
 3892 0088 FB69     		ldr	r3, [r7, #28]
 3893              	.LBE436:
 3894              	.LBE435:
 3895              		.loc 1 2005 5 discriminator 1
 3896 008a 23F01003 		bic	r3, r3, #16
 3897 008e FB65     		str	r3, [r7, #92]
 3898 0090 7B68     		ldr	r3, [r7, #4]
 3899 0092 1B68     		ldr	r3, [r3]
 3900 0094 0C33     		adds	r3, r3, #12
 3901 0096 FA6D     		ldr	r2, [r7, #92]
 3902 0098 FA62     		str	r2, [r7, #44]
 3903 009a BB62     		str	r3, [r7, #40]
 3904              	.LBB437:
 3905              	.LBB438:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3906              		.loc 2 1123 4 discriminator 1
 3907 009c B96A     		ldr	r1, [r7, #40]
 3908 009e FA6A     		ldr	r2, [r7, #44]
 3909              		.syntax unified
 3910              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3911 00a0 41E80023 		strex r3, r2, [r1]
 3912              	@ 0 "" 2
ARM GAS  /tmp/cc17XZfc.s 			page 125


 3913              		.thumb
 3914              		.syntax unified
 3915 00a4 7B62     		str	r3, [r7, #36]
 3916              		.loc 2 1124 10 discriminator 1
 3917 00a6 7B6A     		ldr	r3, [r7, #36]
 3918              	.LBE438:
 3919              	.LBE437:
 3920              		.loc 1 2005 5 discriminator 1
 3921 00a8 002B     		cmp	r3, #0
 3922 00aa E5D1     		bne	.L198
 3923              	.L195:
 3924              	.LBE434:
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3925              		.loc 1 2009 7
 3926 00ac 7B68     		ldr	r3, [r7, #4]
 3927 00ae 1B68     		ldr	r3, [r3]
 3928 00b0 5B69     		ldr	r3, [r3, #20]
 3929 00b2 03F04003 		and	r3, r3, #64
 3930              		.loc 1 2009 6
 3931 00b6 002B     		cmp	r3, #0
 3932 00b8 36D0     		beq	.L199
 3933              	.L202:
 3934              	.LBB439:
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3935              		.loc 1 2011 5 discriminator 1
 3936 00ba 7B68     		ldr	r3, [r7, #4]
 3937 00bc 1B68     		ldr	r3, [r3]
 3938 00be 1433     		adds	r3, r3, #20
 3939 00c0 FB60     		str	r3, [r7, #12]
 3940              	.LBB440:
 3941              	.LBB441:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3942              		.loc 2 1072 4 discriminator 1
 3943 00c2 FB68     		ldr	r3, [r7, #12]
 3944              		.syntax unified
 3945              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3946 00c4 53E8003F 		ldrex r3, [r3]
 3947              	@ 0 "" 2
 3948              		.thumb
 3949              		.syntax unified
 3950 00c8 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3951              		.loc 2 1073 10 discriminator 1
 3952 00ca BB68     		ldr	r3, [r7, #8]
 3953              	.LBE441:
 3954              	.LBE440:
 3955              		.loc 1 2011 5 discriminator 1
 3956 00cc 23F04003 		bic	r3, r3, #64
 3957 00d0 BB65     		str	r3, [r7, #88]
 3958 00d2 7B68     		ldr	r3, [r7, #4]
 3959 00d4 1B68     		ldr	r3, [r3]
 3960 00d6 1433     		adds	r3, r3, #20
 3961 00d8 BA6D     		ldr	r2, [r7, #88]
ARM GAS  /tmp/cc17XZfc.s 			page 126


 3962 00da BA61     		str	r2, [r7, #24]
 3963 00dc 7B61     		str	r3, [r7, #20]
 3964              	.LBB442:
 3965              	.LBB443:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 3966              		.loc 2 1123 4 discriminator 1
 3967 00de 7969     		ldr	r1, [r7, #20]
 3968 00e0 BA69     		ldr	r2, [r7, #24]
 3969              		.syntax unified
 3970              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3971 00e2 41E80023 		strex r3, r2, [r1]
 3972              	@ 0 "" 2
 3973              		.thumb
 3974              		.syntax unified
 3975 00e6 3B61     		str	r3, [r7, #16]
 3976              		.loc 2 1124 10 discriminator 1
 3977 00e8 3B69     		ldr	r3, [r7, #16]
 3978              	.LBE443:
 3979              	.LBE442:
 3980              		.loc 1 2011 5 discriminator 1
 3981 00ea 002B     		cmp	r3, #0
 3982 00ec E5D1     		bne	.L202
 3983              	.LBE439:
2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
2014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3984              		.loc 1 2014 14
 3985 00ee 7B68     		ldr	r3, [r7, #4]
 3986 00f0 DB6B     		ldr	r3, [r3, #60]
 3987              		.loc 1 2014 8
 3988 00f2 002B     		cmp	r3, #0
 3989 00f4 18D0     		beq	.L199
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
2018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 3990              		.loc 1 2018 12
 3991 00f6 7B68     		ldr	r3, [r7, #4]
 3992 00f8 DB6B     		ldr	r3, [r3, #60]
 3993              		.loc 1 2018 40
 3994 00fa 0022     		movs	r2, #0
 3995 00fc 5A63     		str	r2, [r3, #52]
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 3996              		.loc 1 2020 11
 3997 00fe 7B68     		ldr	r3, [r7, #4]
 3998 0100 DB6B     		ldr	r3, [r3, #60]
 3999 0102 1846     		mov	r0, r3
 4000 0104 FFF7FEFF 		bl	HAL_DMA_Abort
 4001 0108 0346     		mov	r3, r0
 4002              		.loc 1 2020 10
 4003 010a 002B     		cmp	r3, #0
 4004 010c 0CD0     		beq	.L199
2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 4005              		.loc 1 2022 13
 4006 010e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc17XZfc.s 			page 127


 4007 0110 DB6B     		ldr	r3, [r3, #60]
 4008 0112 1846     		mov	r0, r3
 4009 0114 FFF7FEFF 		bl	HAL_DMA_GetError
 4010 0118 0346     		mov	r3, r0
 4011              		.loc 1 2022 12
 4012 011a 202B     		cmp	r3, #32
 4013 011c 04D1     		bne	.L199
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Set error code to DMA */
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 4014              		.loc 1 2025 28
 4015 011e 7B68     		ldr	r3, [r7, #4]
 4016 0120 1022     		movs	r2, #16
 4017 0122 5A64     		str	r2, [r3, #68]
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           return HAL_TIMEOUT;
 4018              		.loc 1 2027 18
 4019 0124 0323     		movs	r3, #3
 4020 0126 0AE0     		b	.L203
 4021              	.L199:
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset Rx transfer counter */
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 4022              		.loc 1 2034 22
 4023 0128 7B68     		ldr	r3, [r7, #4]
 4024 012a 0022     		movs	r2, #0
 4025 012c DA85     		strh	r2, [r3, #46]	@ movhi
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4026              		.loc 1 2037 18
 4027 012e 7B68     		ldr	r3, [r7, #4]
 4028 0130 2022     		movs	r2, #32
 4029 0132 83F84220 		strb	r2, [r3, #66]
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 4030              		.loc 1 2038 24
 4031 0136 7B68     		ldr	r3, [r7, #4]
 4032 0138 0022     		movs	r2, #0
 4033 013a 1A63     		str	r2, [r3, #48]
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4034              		.loc 1 2040 10
 4035 013c 0023     		movs	r3, #0
 4036              	.L203:
2041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4037              		.loc 1 2041 1
 4038 013e 1846     		mov	r0, r3
 4039 0140 6837     		adds	r7, r7, #104
 4040              	.LCFI119:
 4041              		.cfi_def_cfa_offset 8
 4042 0142 BD46     		mov	sp, r7
 4043              	.LCFI120:
 4044              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cc17XZfc.s 			page 128


 4045              		@ sp needed
 4046 0144 80BD     		pop	{r7, pc}
 4047              		.cfi_endproc
 4048              	.LFE87:
 4050              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 4051              		.align	1
 4052              		.global	HAL_UART_Abort_IT
 4053              		.syntax unified
 4054              		.thumb
 4055              		.thumb_func
 4057              	HAL_UART_Abort_IT:
 4058              	.LFB88:
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4059              		.loc 1 2058 1
 4060              		.cfi_startproc
 4061              		@ args = 0, pretend = 0, frame = 136
 4062              		@ frame_needed = 1, uses_anonymous_args = 0
 4063 0000 80B5     		push	{r7, lr}
 4064              	.LCFI121:
 4065              		.cfi_def_cfa_offset 8
 4066              		.cfi_offset 7, -8
 4067              		.cfi_offset 14, -4
 4068 0002 A2B0     		sub	sp, sp, #136
 4069              	.LCFI122:
 4070              		.cfi_def_cfa_offset 144
 4071 0004 00AF     		add	r7, sp, #0
 4072              	.LCFI123:
 4073              		.cfi_def_cfa_register 7
 4074 0006 7860     		str	r0, [r7, #4]
2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 4075              		.loc 1 2059 12
 4076 0008 0123     		movs	r3, #1
 4077 000a C7F88430 		str	r3, [r7, #132]
 4078              	.L207:
 4079              	.LBB444:
2060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USA
 4080              		.loc 1 2062 3 discriminator 1
 4081 000e 7B68     		ldr	r3, [r7, #4]
 4082 0010 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc17XZfc.s 			page 129


 4083 0012 0C33     		adds	r3, r3, #12
 4084 0014 3B66     		str	r3, [r7, #96]
 4085              	.LBB445:
 4086              	.LBB446:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4087              		.loc 2 1072 4 discriminator 1
 4088 0016 3B6E     		ldr	r3, [r7, #96]
 4089              		.syntax unified
 4090              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4091 0018 53E8003F 		ldrex r3, [r3]
 4092              	@ 0 "" 2
 4093              		.thumb
 4094              		.syntax unified
 4095 001c FB65     		str	r3, [r7, #92]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4096              		.loc 2 1073 10 discriminator 1
 4097 001e FB6D     		ldr	r3, [r7, #92]
 4098              	.LBE446:
 4099              	.LBE445:
 4100              		.loc 1 2062 3 discriminator 1
 4101 0020 23F4F073 		bic	r3, r3, #480
 4102 0024 C7F88030 		str	r3, [r7, #128]
 4103 0028 7B68     		ldr	r3, [r7, #4]
 4104 002a 1B68     		ldr	r3, [r3]
 4105 002c 0C33     		adds	r3, r3, #12
 4106 002e D7F88020 		ldr	r2, [r7, #128]
 4107 0032 FA66     		str	r2, [r7, #108]
 4108 0034 BB66     		str	r3, [r7, #104]
 4109              	.LBB447:
 4110              	.LBB448:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4111              		.loc 2 1123 4 discriminator 1
 4112 0036 B96E     		ldr	r1, [r7, #104]
 4113 0038 FA6E     		ldr	r2, [r7, #108]
 4114              		.syntax unified
 4115              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4116 003a 41E80023 		strex r3, r2, [r1]
 4117              	@ 0 "" 2
 4118              		.thumb
 4119              		.syntax unified
 4120 003e 7B66     		str	r3, [r7, #100]
 4121              		.loc 2 1124 10 discriminator 1
 4122 0040 7B6E     		ldr	r3, [r7, #100]
 4123              	.LBE448:
 4124              	.LBE447:
 4125              		.loc 1 2062 3 discriminator 1
 4126 0042 002B     		cmp	r3, #0
 4127 0044 E3D1     		bne	.L207
 4128              	.L210:
 4129              	.LBE444:
 4130              	.LBB449:
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4131              		.loc 1 2063 3 discriminator 1
 4132 0046 7B68     		ldr	r3, [r7, #4]
 4133 0048 1B68     		ldr	r3, [r3]
 4134 004a 1433     		adds	r3, r3, #20
 4135 004c FB64     		str	r3, [r7, #76]
ARM GAS  /tmp/cc17XZfc.s 			page 130


 4136              	.LBB450:
 4137              	.LBB451:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4138              		.loc 2 1072 4 discriminator 1
 4139 004e FB6C     		ldr	r3, [r7, #76]
 4140              		.syntax unified
 4141              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4142 0050 53E8003F 		ldrex r3, [r3]
 4143              	@ 0 "" 2
 4144              		.thumb
 4145              		.syntax unified
 4146 0054 BB64     		str	r3, [r7, #72]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4147              		.loc 2 1073 10 discriminator 1
 4148 0056 BB6C     		ldr	r3, [r7, #72]
 4149              	.LBE451:
 4150              	.LBE450:
 4151              		.loc 1 2063 3 discriminator 1
 4152 0058 23F00103 		bic	r3, r3, #1
 4153 005c FB67     		str	r3, [r7, #124]
 4154 005e 7B68     		ldr	r3, [r7, #4]
 4155 0060 1B68     		ldr	r3, [r3]
 4156 0062 1433     		adds	r3, r3, #20
 4157 0064 FA6F     		ldr	r2, [r7, #124]
 4158 0066 BA65     		str	r2, [r7, #88]
 4159 0068 7B65     		str	r3, [r7, #84]
 4160              	.LBB452:
 4161              	.LBB453:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4162              		.loc 2 1123 4 discriminator 1
 4163 006a 796D     		ldr	r1, [r7, #84]
 4164 006c BA6D     		ldr	r2, [r7, #88]
 4165              		.syntax unified
 4166              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4167 006e 41E80023 		strex r3, r2, [r1]
 4168              	@ 0 "" 2
 4169              		.thumb
 4170              		.syntax unified
 4171 0072 3B65     		str	r3, [r7, #80]
 4172              		.loc 2 1124 10 discriminator 1
 4173 0074 3B6D     		ldr	r3, [r7, #80]
 4174              	.LBE453:
 4175              	.LBE452:
 4176              		.loc 1 2063 3 discriminator 1
 4177 0076 002B     		cmp	r3, #0
 4178 0078 E5D1     		bne	.L210
 4179              	.LBE449:
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 4180              		.loc 1 2066 12
 4181 007a 7B68     		ldr	r3, [r7, #4]
 4182 007c 1B6B     		ldr	r3, [r3, #48]
 4183              		.loc 1 2066 6
 4184 007e 012B     		cmp	r3, #1
 4185 0080 19D1     		bne	.L211
 4186              	.L214:
ARM GAS  /tmp/cc17XZfc.s 			page 131


 4187              	.LBB454:
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 4188              		.loc 1 2068 5 discriminator 1
 4189 0082 7B68     		ldr	r3, [r7, #4]
 4190 0084 1B68     		ldr	r3, [r3]
 4191 0086 0C33     		adds	r3, r3, #12
 4192 0088 BB63     		str	r3, [r7, #56]
 4193              	.LBB455:
 4194              	.LBB456:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4195              		.loc 2 1072 4 discriminator 1
 4196 008a BB6B     		ldr	r3, [r7, #56]
 4197              		.syntax unified
 4198              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4199 008c 53E8003F 		ldrex r3, [r3]
 4200              	@ 0 "" 2
 4201              		.thumb
 4202              		.syntax unified
 4203 0090 7B63     		str	r3, [r7, #52]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4204              		.loc 2 1073 10 discriminator 1
 4205 0092 7B6B     		ldr	r3, [r7, #52]
 4206              	.LBE456:
 4207              	.LBE455:
 4208              		.loc 1 2068 5 discriminator 1
 4209 0094 23F01003 		bic	r3, r3, #16
 4210 0098 BB67     		str	r3, [r7, #120]
 4211 009a 7B68     		ldr	r3, [r7, #4]
 4212 009c 1B68     		ldr	r3, [r3]
 4213 009e 0C33     		adds	r3, r3, #12
 4214 00a0 BA6F     		ldr	r2, [r7, #120]
 4215 00a2 7A64     		str	r2, [r7, #68]
 4216 00a4 3B64     		str	r3, [r7, #64]
 4217              	.LBB457:
 4218              	.LBB458:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4219              		.loc 2 1123 4 discriminator 1
 4220 00a6 396C     		ldr	r1, [r7, #64]
 4221 00a8 7A6C     		ldr	r2, [r7, #68]
 4222              		.syntax unified
 4223              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4224 00aa 41E80023 		strex r3, r2, [r1]
 4225              	@ 0 "" 2
 4226              		.thumb
 4227              		.syntax unified
 4228 00ae FB63     		str	r3, [r7, #60]
 4229              		.loc 2 1124 10 discriminator 1
 4230 00b0 FB6B     		ldr	r3, [r7, #60]
 4231              	.LBE458:
 4232              	.LBE457:
 4233              		.loc 1 2068 5 discriminator 1
 4234 00b2 002B     		cmp	r3, #0
 4235 00b4 E5D1     		bne	.L214
 4236              	.L211:
 4237              	.LBE454:
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
ARM GAS  /tmp/cc17XZfc.s 			page 132


2070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      before any call to DMA Abort functions */
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Tx Handle is valid */
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 4238              		.loc 1 2074 12
 4239 00b6 7B68     		ldr	r3, [r7, #4]
 4240 00b8 9B6B     		ldr	r3, [r3, #56]
 4241              		.loc 1 2074 6
 4242 00ba 002B     		cmp	r3, #0
 4243 00bc 0FD0     		beq	.L215
2075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
2077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
2078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 4244              		.loc 1 2078 9
 4245 00be 7B68     		ldr	r3, [r7, #4]
 4246 00c0 1B68     		ldr	r3, [r3]
 4247 00c2 5B69     		ldr	r3, [r3, #20]
 4248 00c4 03F08003 		and	r3, r3, #128
 4249              		.loc 1 2078 8
 4250 00c8 002B     		cmp	r3, #0
 4251 00ca 04D0     		beq	.L216
2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 4252              		.loc 1 2080 12
 4253 00cc 7B68     		ldr	r3, [r7, #4]
 4254 00ce 9B6B     		ldr	r3, [r3, #56]
 4255              		.loc 1 2080 40
 4256 00d0 534A     		ldr	r2, .L231
 4257 00d2 5A63     		str	r2, [r3, #52]
 4258 00d4 03E0     		b	.L215
 4259              	.L216:
2081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 4260              		.loc 1 2084 12
 4261 00d6 7B68     		ldr	r3, [r7, #4]
 4262 00d8 9B6B     		ldr	r3, [r3, #56]
 4263              		.loc 1 2084 40
 4264 00da 0022     		movs	r2, #0
 4265 00dc 5A63     		str	r2, [r3, #52]
 4266              	.L215:
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Rx Handle is valid */
2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 4267              		.loc 1 2088 12
 4268 00de 7B68     		ldr	r3, [r7, #4]
 4269 00e0 DB6B     		ldr	r3, [r3, #60]
 4270              		.loc 1 2088 6
 4271 00e2 002B     		cmp	r3, #0
 4272 00e4 0FD0     		beq	.L217
2089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
2091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        Otherwise, set it to NULL */
ARM GAS  /tmp/cc17XZfc.s 			page 133


2092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 4273              		.loc 1 2092 9
 4274 00e6 7B68     		ldr	r3, [r7, #4]
 4275 00e8 1B68     		ldr	r3, [r3]
 4276 00ea 5B69     		ldr	r3, [r3, #20]
 4277 00ec 03F04003 		and	r3, r3, #64
 4278              		.loc 1 2092 8
 4279 00f0 002B     		cmp	r3, #0
 4280 00f2 04D0     		beq	.L218
2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 4281              		.loc 1 2094 12
 4282 00f4 7B68     		ldr	r3, [r7, #4]
 4283 00f6 DB6B     		ldr	r3, [r3, #60]
 4284              		.loc 1 2094 40
 4285 00f8 4A4A     		ldr	r2, .L231+4
 4286 00fa 5A63     		str	r2, [r3, #52]
 4287 00fc 03E0     		b	.L217
 4288              	.L218:
2095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 4289              		.loc 1 2098 12
 4290 00fe 7B68     		ldr	r3, [r7, #4]
 4291 0100 DB6B     		ldr	r3, [r3, #60]
 4292              		.loc 1 2098 40
 4293 0102 0022     		movs	r2, #0
 4294 0104 5A63     		str	r2, [r3, #52]
 4295              	.L217:
2099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
2103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 4296              		.loc 1 2103 7
 4297 0106 7B68     		ldr	r3, [r7, #4]
 4298 0108 1B68     		ldr	r3, [r3]
 4299 010a 5B69     		ldr	r3, [r3, #20]
 4300 010c 03F08003 		and	r3, r3, #128
 4301              		.loc 1 2103 6
 4302 0110 002B     		cmp	r3, #0
 4303 0112 2DD0     		beq	.L219
 4304              	.L222:
 4305              	.LBB459:
2104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
2106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 4306              		.loc 1 2106 5 discriminator 1
 4307 0114 7B68     		ldr	r3, [r7, #4]
 4308 0116 1B68     		ldr	r3, [r3]
 4309 0118 1433     		adds	r3, r3, #20
 4310 011a 7B62     		str	r3, [r7, #36]
 4311              	.LBB460:
 4312              	.LBB461:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4313              		.loc 2 1072 4 discriminator 1
ARM GAS  /tmp/cc17XZfc.s 			page 134


 4314 011c 7B6A     		ldr	r3, [r7, #36]
 4315              		.syntax unified
 4316              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4317 011e 53E8003F 		ldrex r3, [r3]
 4318              	@ 0 "" 2
 4319              		.thumb
 4320              		.syntax unified
 4321 0122 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4322              		.loc 2 1073 10 discriminator 1
 4323 0124 3B6A     		ldr	r3, [r7, #32]
 4324              	.LBE461:
 4325              	.LBE460:
 4326              		.loc 1 2106 5 discriminator 1
 4327 0126 23F08003 		bic	r3, r3, #128
 4328 012a 7B67     		str	r3, [r7, #116]
 4329 012c 7B68     		ldr	r3, [r7, #4]
 4330 012e 1B68     		ldr	r3, [r3]
 4331 0130 1433     		adds	r3, r3, #20
 4332 0132 7A6F     		ldr	r2, [r7, #116]
 4333 0134 3A63     		str	r2, [r7, #48]
 4334 0136 FB62     		str	r3, [r7, #44]
 4335              	.LBB462:
 4336              	.LBB463:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4337              		.loc 2 1123 4 discriminator 1
 4338 0138 F96A     		ldr	r1, [r7, #44]
 4339 013a 3A6B     		ldr	r2, [r7, #48]
 4340              		.syntax unified
 4341              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4342 013c 41E80023 		strex r3, r2, [r1]
 4343              	@ 0 "" 2
 4344              		.thumb
 4345              		.syntax unified
 4346 0140 BB62     		str	r3, [r7, #40]
 4347              		.loc 2 1124 10 discriminator 1
 4348 0142 BB6A     		ldr	r3, [r7, #40]
 4349              	.LBE463:
 4350              	.LBE462:
 4351              		.loc 1 2106 5 discriminator 1
 4352 0144 002B     		cmp	r3, #0
 4353 0146 E5D1     		bne	.L222
 4354              	.LBE459:
2107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
2109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 4355              		.loc 1 2109 14
 4356 0148 7B68     		ldr	r3, [r7, #4]
 4357 014a 9B6B     		ldr	r3, [r3, #56]
 4358              		.loc 1 2109 8
 4359 014c 002B     		cmp	r3, #0
 4360 014e 0FD0     		beq	.L219
2110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
2112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
ARM GAS  /tmp/cc17XZfc.s 			page 135


2115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 4361              		.loc 1 2115 11
 4362 0150 7B68     		ldr	r3, [r7, #4]
 4363 0152 9B6B     		ldr	r3, [r3, #56]
 4364 0154 1846     		mov	r0, r3
 4365 0156 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 4366 015a 0346     		mov	r3, r0
 4367              		.loc 1 2115 10
 4368 015c 002B     		cmp	r3, #0
 4369 015e 04D0     		beq	.L223
2116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
 4370              		.loc 1 2117 14
 4371 0160 7B68     		ldr	r3, [r7, #4]
 4372 0162 9B6B     		ldr	r3, [r3, #56]
 4373              		.loc 1 2117 42
 4374 0164 0022     		movs	r2, #0
 4375 0166 5A63     		str	r2, [r3, #52]
 4376 0168 02E0     		b	.L219
 4377              	.L223:
2118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
 4378              		.loc 1 2121 19
 4379 016a 0023     		movs	r3, #0
 4380 016c C7F88430 		str	r3, [r7, #132]
 4381              	.L219:
2122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 4382              		.loc 1 2127 7
 4383 0170 7B68     		ldr	r3, [r7, #4]
 4384 0172 1B68     		ldr	r3, [r3]
 4385 0174 5B69     		ldr	r3, [r3, #20]
 4386 0176 03F04003 		and	r3, r3, #64
 4387              		.loc 1 2127 6
 4388 017a 002B     		cmp	r3, #0
 4389 017c 30D0     		beq	.L224
 4390              	.L227:
 4391              	.LBB464:
2128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 4392              		.loc 1 2129 5 discriminator 1
 4393 017e 7B68     		ldr	r3, [r7, #4]
 4394 0180 1B68     		ldr	r3, [r3]
 4395 0182 1433     		adds	r3, r3, #20
 4396 0184 3B61     		str	r3, [r7, #16]
 4397              	.LBB465:
 4398              	.LBB466:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4399              		.loc 2 1072 4 discriminator 1
 4400 0186 3B69     		ldr	r3, [r7, #16]
 4401              		.syntax unified
ARM GAS  /tmp/cc17XZfc.s 			page 136


 4402              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4403 0188 53E8003F 		ldrex r3, [r3]
 4404              	@ 0 "" 2
 4405              		.thumb
 4406              		.syntax unified
 4407 018c FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4408              		.loc 2 1073 10 discriminator 1
 4409 018e FB68     		ldr	r3, [r7, #12]
 4410              	.LBE466:
 4411              	.LBE465:
 4412              		.loc 1 2129 5 discriminator 1
 4413 0190 23F04003 		bic	r3, r3, #64
 4414 0194 3B67     		str	r3, [r7, #112]
 4415 0196 7B68     		ldr	r3, [r7, #4]
 4416 0198 1B68     		ldr	r3, [r3]
 4417 019a 1433     		adds	r3, r3, #20
 4418 019c 3A6F     		ldr	r2, [r7, #112]
 4419 019e FA61     		str	r2, [r7, #28]
 4420 01a0 BB61     		str	r3, [r7, #24]
 4421              	.LBB467:
 4422              	.LBB468:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4423              		.loc 2 1123 4 discriminator 1
 4424 01a2 B969     		ldr	r1, [r7, #24]
 4425 01a4 FA69     		ldr	r2, [r7, #28]
 4426              		.syntax unified
 4427              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4428 01a6 41E80023 		strex r3, r2, [r1]
 4429              	@ 0 "" 2
 4430              		.thumb
 4431              		.syntax unified
 4432 01aa 7B61     		str	r3, [r7, #20]
 4433              		.loc 2 1124 10 discriminator 1
 4434 01ac 7B69     		ldr	r3, [r7, #20]
 4435              	.LBE468:
 4436              	.LBE467:
 4437              		.loc 1 2129 5 discriminator 1
 4438 01ae 002B     		cmp	r3, #0
 4439 01b0 E5D1     		bne	.L227
 4440              	.LBE464:
2130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
2132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 4441              		.loc 1 2132 14
 4442 01b2 7B68     		ldr	r3, [r7, #4]
 4443 01b4 DB6B     		ldr	r3, [r3, #60]
 4444              		.loc 1 2132 8
 4445 01b6 002B     		cmp	r3, #0
 4446 01b8 12D0     		beq	.L224
2133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
2135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
2138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 4447              		.loc 1 2138 11
ARM GAS  /tmp/cc17XZfc.s 			page 137


 4448 01ba 7B68     		ldr	r3, [r7, #4]
 4449 01bc DB6B     		ldr	r3, [r3, #60]
 4450 01be 1846     		mov	r0, r3
 4451 01c0 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 4452 01c4 0346     		mov	r3, r0
 4453              		.loc 1 2138 10
 4454 01c6 002B     		cmp	r3, #0
 4455 01c8 07D0     		beq	.L228
2139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
 4456              		.loc 1 2140 14
 4457 01ca 7B68     		ldr	r3, [r7, #4]
 4458 01cc DB6B     		ldr	r3, [r3, #60]
 4459              		.loc 1 2140 42
 4460 01ce 0022     		movs	r2, #0
 4461 01d0 5A63     		str	r2, [r3, #52]
2141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x01U;
 4462              		.loc 1 2141 19
 4463 01d2 0123     		movs	r3, #1
 4464 01d4 C7F88430 		str	r3, [r7, #132]
 4465 01d8 02E0     		b	.L224
 4466              	.L228:
2142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         AbortCplt = 0x00U;
 4467              		.loc 1 2145 19
 4468 01da 0023     		movs	r3, #0
 4469 01dc C7F88430 		str	r3, [r7, #132]
 4470              	.L224:
2146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
2151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (AbortCplt == 0x01U)
 4471              		.loc 1 2151 6
 4472 01e0 D7F88430 		ldr	r3, [r7, #132]
 4473 01e4 012B     		cmp	r3, #1
 4474 01e6 16D1     		bne	.L229
2152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
2154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 4475              		.loc 1 2154 24
 4476 01e8 7B68     		ldr	r3, [r7, #4]
 4477 01ea 0022     		movs	r2, #0
 4478 01ec DA84     		strh	r2, [r3, #38]	@ movhi
2155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 4479              		.loc 1 2155 24
 4480 01ee 7B68     		ldr	r3, [r7, #4]
 4481 01f0 0022     		movs	r2, #0
 4482 01f2 DA85     		strh	r2, [r3, #46]	@ movhi
2156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset ErrorCode */
2158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 4483              		.loc 1 2158 22
 4484 01f4 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc17XZfc.s 			page 138


 4485 01f6 0022     		movs	r2, #0
 4486 01f8 5A64     		str	r2, [r3, #68]
2159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
2161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
 4487              		.loc 1 2161 20
 4488 01fa 7B68     		ldr	r3, [r7, #4]
 4489 01fc 2022     		movs	r2, #32
 4490 01fe 83F84120 		strb	r2, [r3, #65]
2162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 4491              		.loc 1 2162 20
 4492 0202 7B68     		ldr	r3, [r7, #4]
 4493 0204 2022     		movs	r2, #32
 4494 0206 83F84220 		strb	r2, [r3, #66]
2163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 4495              		.loc 1 2163 26
 4496 020a 7B68     		ldr	r3, [r7, #4]
 4497 020c 0022     		movs	r2, #0
 4498 020e 1A63     		str	r2, [r3, #48]
2164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort complete callback */
2168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
2169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
2171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
 4499              		.loc 1 2171 5
 4500 0210 7868     		ldr	r0, [r7, #4]
 4501 0212 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 4502              	.L229:
2172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4503              		.loc 1 2175 10
 4504 0216 0023     		movs	r3, #0
2176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4505              		.loc 1 2176 1
 4506 0218 1846     		mov	r0, r3
 4507 021a 8837     		adds	r7, r7, #136
 4508              	.LCFI124:
 4509              		.cfi_def_cfa_offset 8
 4510 021c BD46     		mov	sp, r7
 4511              	.LCFI125:
 4512              		.cfi_def_cfa_register 13
 4513              		@ sp needed
 4514 021e 80BD     		pop	{r7, pc}
 4515              	.L232:
 4516              		.align	2
 4517              	.L231:
 4518 0220 00000000 		.word	UART_DMATxAbortCallback
 4519 0224 00000000 		.word	UART_DMARxAbortCallback
 4520              		.cfi_endproc
 4521              	.LFE88:
 4523              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 4524              		.align	1
ARM GAS  /tmp/cc17XZfc.s 			page 139


 4525              		.global	HAL_UART_AbortTransmit_IT
 4526              		.syntax unified
 4527              		.thumb
 4528              		.thumb_func
 4530              	HAL_UART_AbortTransmit_IT:
 4531              	.LFB89:
2177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
2180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
2182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
2184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
2193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4532              		.loc 1 2193 1
 4533              		.cfi_startproc
 4534              		@ args = 0, pretend = 0, frame = 56
 4535              		@ frame_needed = 1, uses_anonymous_args = 0
 4536 0000 80B5     		push	{r7, lr}
 4537              	.LCFI126:
 4538              		.cfi_def_cfa_offset 8
 4539              		.cfi_offset 7, -8
 4540              		.cfi_offset 14, -4
 4541 0002 8EB0     		sub	sp, sp, #56
 4542              	.LCFI127:
 4543              		.cfi_def_cfa_offset 64
 4544 0004 00AF     		add	r7, sp, #0
 4545              	.LCFI128:
 4546              		.cfi_def_cfa_register 7
 4547 0006 7860     		str	r0, [r7, #4]
 4548              	.L236:
 4549              	.LBB469:
2194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 4550              		.loc 1 2195 3 discriminator 1
 4551 0008 7B68     		ldr	r3, [r7, #4]
 4552 000a 1B68     		ldr	r3, [r3]
 4553 000c 0C33     		adds	r3, r3, #12
 4554 000e 3B62     		str	r3, [r7, #32]
 4555              	.LBB470:
 4556              	.LBB471:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4557              		.loc 2 1072 4 discriminator 1
 4558 0010 3B6A     		ldr	r3, [r7, #32]
 4559              		.syntax unified
 4560              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4561 0012 53E8003F 		ldrex r3, [r3]
 4562              	@ 0 "" 2
ARM GAS  /tmp/cc17XZfc.s 			page 140


 4563              		.thumb
 4564              		.syntax unified
 4565 0016 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4566              		.loc 2 1073 10 discriminator 1
 4567 0018 FB69     		ldr	r3, [r7, #28]
 4568              	.LBE471:
 4569              	.LBE470:
 4570              		.loc 1 2195 3 discriminator 1
 4571 001a 23F0C003 		bic	r3, r3, #192
 4572 001e 7B63     		str	r3, [r7, #52]
 4573 0020 7B68     		ldr	r3, [r7, #4]
 4574 0022 1B68     		ldr	r3, [r3]
 4575 0024 0C33     		adds	r3, r3, #12
 4576 0026 7A6B     		ldr	r2, [r7, #52]
 4577 0028 FA62     		str	r2, [r7, #44]
 4578 002a BB62     		str	r3, [r7, #40]
 4579              	.LBB472:
 4580              	.LBB473:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4581              		.loc 2 1123 4 discriminator 1
 4582 002c B96A     		ldr	r1, [r7, #40]
 4583 002e FA6A     		ldr	r2, [r7, #44]
 4584              		.syntax unified
 4585              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4586 0030 41E80023 		strex r3, r2, [r1]
 4587              	@ 0 "" 2
 4588              		.thumb
 4589              		.syntax unified
 4590 0034 7B62     		str	r3, [r7, #36]
 4591              		.loc 2 1124 10 discriminator 1
 4592 0036 7B6A     		ldr	r3, [r7, #36]
 4593              	.LBE473:
 4594              	.LBE472:
 4595              		.loc 1 2195 3 discriminator 1
 4596 0038 002B     		cmp	r3, #0
 4597 003a E5D1     		bne	.L236
 4598              	.LBE469:
2196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
2198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 4599              		.loc 1 2198 7
 4600 003c 7B68     		ldr	r3, [r7, #4]
 4601 003e 1B68     		ldr	r3, [r3]
 4602 0040 5B69     		ldr	r3, [r3, #20]
 4603 0042 03F08003 		and	r3, r3, #128
 4604              		.loc 1 2198 6
 4605 0046 002B     		cmp	r3, #0
 4606 0048 3CD0     		beq	.L237
 4607              	.L240:
 4608              	.LBB474:
2199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 4609              		.loc 1 2200 5 discriminator 1
 4610 004a 7B68     		ldr	r3, [r7, #4]
 4611 004c 1B68     		ldr	r3, [r3]
 4612 004e 1433     		adds	r3, r3, #20
ARM GAS  /tmp/cc17XZfc.s 			page 141


 4613 0050 FB60     		str	r3, [r7, #12]
 4614              	.LBB475:
 4615              	.LBB476:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4616              		.loc 2 1072 4 discriminator 1
 4617 0052 FB68     		ldr	r3, [r7, #12]
 4618              		.syntax unified
 4619              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4620 0054 53E8003F 		ldrex r3, [r3]
 4621              	@ 0 "" 2
 4622              		.thumb
 4623              		.syntax unified
 4624 0058 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4625              		.loc 2 1073 10 discriminator 1
 4626 005a BB68     		ldr	r3, [r7, #8]
 4627              	.LBE476:
 4628              	.LBE475:
 4629              		.loc 1 2200 5 discriminator 1
 4630 005c 23F08003 		bic	r3, r3, #128
 4631 0060 3B63     		str	r3, [r7, #48]
 4632 0062 7B68     		ldr	r3, [r7, #4]
 4633 0064 1B68     		ldr	r3, [r3]
 4634 0066 1433     		adds	r3, r3, #20
 4635 0068 3A6B     		ldr	r2, [r7, #48]
 4636 006a BA61     		str	r2, [r7, #24]
 4637 006c 7B61     		str	r3, [r7, #20]
 4638              	.LBB477:
 4639              	.LBB478:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4640              		.loc 2 1123 4 discriminator 1
 4641 006e 7969     		ldr	r1, [r7, #20]
 4642 0070 BA69     		ldr	r2, [r7, #24]
 4643              		.syntax unified
 4644              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4645 0072 41E80023 		strex r3, r2, [r1]
 4646              	@ 0 "" 2
 4647              		.thumb
 4648              		.syntax unified
 4649 0076 3B61     		str	r3, [r7, #16]
 4650              		.loc 2 1124 10 discriminator 1
 4651 0078 3B69     		ldr	r3, [r7, #16]
 4652              	.LBE478:
 4653              	.LBE477:
 4654              		.loc 1 2200 5 discriminator 1
 4655 007a 002B     		cmp	r3, #0
 4656 007c E5D1     		bne	.L240
 4657              	.LBE474:
2201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
2203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 4658              		.loc 1 2203 14
 4659 007e 7B68     		ldr	r3, [r7, #4]
 4660 0080 9B6B     		ldr	r3, [r3, #56]
 4661              		.loc 1 2203 8
 4662 0082 002B     		cmp	r3, #0
 4663 0084 13D0     		beq	.L241
ARM GAS  /tmp/cc17XZfc.s 			page 142


2204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 4664              		.loc 1 2207 12
 4665 0086 7B68     		ldr	r3, [r7, #4]
 4666 0088 9B6B     		ldr	r3, [r3, #56]
 4667              		.loc 1 2207 40
 4668 008a 164A     		ldr	r2, .L244
 4669 008c 5A63     		str	r2, [r3, #52]
2208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA TX */
2210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 4670              		.loc 1 2210 11
 4671 008e 7B68     		ldr	r3, [r7, #4]
 4672 0090 9B6B     		ldr	r3, [r3, #56]
 4673 0092 1846     		mov	r0, r3
 4674 0094 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 4675 0098 0346     		mov	r3, r0
 4676              		.loc 1 2210 10
 4677 009a 002B     		cmp	r3, #0
 4678 009c 1CD0     		beq	.L242
2211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
2213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
 4679              		.loc 1 2213 14
 4680 009e 7B68     		ldr	r3, [r7, #4]
 4681 00a0 9B6B     		ldr	r3, [r3, #56]
 4682              		.loc 1 2213 22
 4683 00a2 5B6B     		ldr	r3, [r3, #52]
 4684              		.loc 1 2213 47
 4685 00a4 7A68     		ldr	r2, [r7, #4]
 4686 00a6 926B     		ldr	r2, [r2, #56]
 4687              		.loc 1 2213 9
 4688 00a8 1046     		mov	r0, r2
 4689 00aa 9847     		blx	r3
 4690              	.LVL0:
 4691 00ac 14E0     		b	.L242
 4692              	.L241:
2214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Reset Tx transfer counter */
2219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->TxXferCount = 0x00U;
 4693              		.loc 1 2219 26
 4694 00ae 7B68     		ldr	r3, [r7, #4]
 4695 00b0 0022     		movs	r2, #0
 4696 00b2 DA84     		strh	r2, [r3, #38]	@ movhi
2220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Restore huart->gState to Ready */
2222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 4697              		.loc 1 2222 21
 4698 00b4 7B68     		ldr	r3, [r7, #4]
 4699 00b6 2022     		movs	r2, #32
 4700 00b8 83F84120 		strb	r2, [r3, #65]
2223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/cc17XZfc.s 			page 143


2224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
2227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
2228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
2230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
 4701              		.loc 1 2230 7
 4702 00bc 7868     		ldr	r0, [r7, #4]
 4703 00be FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 4704 00c2 09E0     		b	.L242
 4705              	.L237:
2231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Tx transfer counter */
2237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 4706              		.loc 1 2237 24
 4707 00c4 7B68     		ldr	r3, [r7, #4]
 4708 00c6 0022     		movs	r2, #0
 4709 00c8 DA84     		strh	r2, [r3, #38]	@ movhi
2238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->gState to Ready */
2240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 4710              		.loc 1 2240 19
 4711 00ca 7B68     		ldr	r3, [r7, #4]
 4712 00cc 2022     		movs	r2, #32
 4713 00ce 83F84120 		strb	r2, [r3, #65]
2241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
2245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
2246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
2248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
 4714              		.loc 1 2248 5
 4715 00d2 7868     		ldr	r0, [r7, #4]
 4716 00d4 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 4717              	.L242:
2249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 4718              		.loc 1 2252 10
 4719 00d8 0023     		movs	r3, #0
2253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 4720              		.loc 1 2253 1
 4721 00da 1846     		mov	r0, r3
 4722 00dc 3837     		adds	r7, r7, #56
 4723              	.LCFI129:
 4724              		.cfi_def_cfa_offset 8
 4725 00de BD46     		mov	sp, r7
 4726              	.LCFI130:
 4727              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cc17XZfc.s 			page 144


 4728              		@ sp needed
 4729 00e0 80BD     		pop	{r7, pc}
 4730              	.L245:
 4731 00e2 00BF     		.align	2
 4732              	.L244:
 4733 00e4 00000000 		.word	UART_DMATxOnlyAbortCallback
 4734              		.cfi_endproc
 4735              	.LFE89:
 4737              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 4738              		.align	1
 4739              		.global	HAL_UART_AbortReceive_IT
 4740              		.syntax unified
 4741              		.thumb
 4742              		.thumb_func
 4744              	HAL_UART_AbortReceive_IT:
 4745              	.LFB90:
2254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
2257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
2259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         This procedure performs following operations :
2260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
2261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - Set handle State to READY
2264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
2270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 4746              		.loc 1 2270 1
 4747              		.cfi_startproc
 4748              		@ args = 0, pretend = 0, frame = 104
 4749              		@ frame_needed = 1, uses_anonymous_args = 0
 4750 0000 80B5     		push	{r7, lr}
 4751              	.LCFI131:
 4752              		.cfi_def_cfa_offset 8
 4753              		.cfi_offset 7, -8
 4754              		.cfi_offset 14, -4
 4755 0002 9AB0     		sub	sp, sp, #104
 4756              	.LCFI132:
 4757              		.cfi_def_cfa_offset 112
 4758 0004 00AF     		add	r7, sp, #0
 4759              	.LCFI133:
 4760              		.cfi_def_cfa_register 7
 4761 0006 7860     		str	r0, [r7, #4]
 4762              	.L249:
 4763              	.LBB479:
2271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 4764              		.loc 1 2272 3 discriminator 1
 4765 0008 7B68     		ldr	r3, [r7, #4]
 4766 000a 1B68     		ldr	r3, [r3]
 4767 000c 0C33     		adds	r3, r3, #12
ARM GAS  /tmp/cc17XZfc.s 			page 145


 4768 000e BB64     		str	r3, [r7, #72]
 4769              	.LBB480:
 4770              	.LBB481:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4771              		.loc 2 1072 4 discriminator 1
 4772 0010 BB6C     		ldr	r3, [r7, #72]
 4773              		.syntax unified
 4774              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4775 0012 53E8003F 		ldrex r3, [r3]
 4776              	@ 0 "" 2
 4777              		.thumb
 4778              		.syntax unified
 4779 0016 7B64     		str	r3, [r7, #68]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4780              		.loc 2 1073 10 discriminator 1
 4781 0018 7B6C     		ldr	r3, [r7, #68]
 4782              	.LBE481:
 4783              	.LBE480:
 4784              		.loc 1 2272 3 discriminator 1
 4785 001a 23F49073 		bic	r3, r3, #288
 4786 001e 7B66     		str	r3, [r7, #100]
 4787 0020 7B68     		ldr	r3, [r7, #4]
 4788 0022 1B68     		ldr	r3, [r3]
 4789 0024 0C33     		adds	r3, r3, #12
 4790 0026 7A6E     		ldr	r2, [r7, #100]
 4791 0028 7A65     		str	r2, [r7, #84]
 4792 002a 3B65     		str	r3, [r7, #80]
 4793              	.LBB482:
 4794              	.LBB483:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4795              		.loc 2 1123 4 discriminator 1
 4796 002c 396D     		ldr	r1, [r7, #80]
 4797 002e 7A6D     		ldr	r2, [r7, #84]
 4798              		.syntax unified
 4799              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4800 0030 41E80023 		strex r3, r2, [r1]
 4801              	@ 0 "" 2
 4802              		.thumb
 4803              		.syntax unified
 4804 0034 FB64     		str	r3, [r7, #76]
 4805              		.loc 2 1124 10 discriminator 1
 4806 0036 FB6C     		ldr	r3, [r7, #76]
 4807              	.LBE483:
 4808              	.LBE482:
 4809              		.loc 1 2272 3 discriminator 1
 4810 0038 002B     		cmp	r3, #0
 4811 003a E5D1     		bne	.L249
 4812              	.L252:
 4813              	.LBE479:
 4814              	.LBB484:
2273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4815              		.loc 1 2273 3 discriminator 1
 4816 003c 7B68     		ldr	r3, [r7, #4]
 4817 003e 1B68     		ldr	r3, [r3]
 4818 0040 1433     		adds	r3, r3, #20
 4819 0042 7B63     		str	r3, [r7, #52]
 4820              	.LBB485:
ARM GAS  /tmp/cc17XZfc.s 			page 146


 4821              	.LBB486:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4822              		.loc 2 1072 4 discriminator 1
 4823 0044 7B6B     		ldr	r3, [r7, #52]
 4824              		.syntax unified
 4825              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4826 0046 53E8003F 		ldrex r3, [r3]
 4827              	@ 0 "" 2
 4828              		.thumb
 4829              		.syntax unified
 4830 004a 3B63     		str	r3, [r7, #48]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4831              		.loc 2 1073 10 discriminator 1
 4832 004c 3B6B     		ldr	r3, [r7, #48]
 4833              	.LBE486:
 4834              	.LBE485:
 4835              		.loc 1 2273 3 discriminator 1
 4836 004e 23F00103 		bic	r3, r3, #1
 4837 0052 3B66     		str	r3, [r7, #96]
 4838 0054 7B68     		ldr	r3, [r7, #4]
 4839 0056 1B68     		ldr	r3, [r3]
 4840 0058 1433     		adds	r3, r3, #20
 4841 005a 3A6E     		ldr	r2, [r7, #96]
 4842 005c 3A64     		str	r2, [r7, #64]
 4843 005e FB63     		str	r3, [r7, #60]
 4844              	.LBB487:
 4845              	.LBB488:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4846              		.loc 2 1123 4 discriminator 1
 4847 0060 F96B     		ldr	r1, [r7, #60]
 4848 0062 3A6C     		ldr	r2, [r7, #64]
 4849              		.syntax unified
 4850              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4851 0064 41E80023 		strex r3, r2, [r1]
 4852              	@ 0 "" 2
 4853              		.thumb
 4854              		.syntax unified
 4855 0068 BB63     		str	r3, [r7, #56]
 4856              		.loc 2 1124 10 discriminator 1
 4857 006a BB6B     		ldr	r3, [r7, #56]
 4858              	.LBE488:
 4859              	.LBE487:
 4860              		.loc 1 2273 3 discriminator 1
 4861 006c 002B     		cmp	r3, #0
 4862 006e E5D1     		bne	.L252
 4863              	.LBE484:
2274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 4864              		.loc 1 2276 12
 4865 0070 7B68     		ldr	r3, [r7, #4]
 4866 0072 1B6B     		ldr	r3, [r3, #48]
 4867              		.loc 1 2276 6
 4868 0074 012B     		cmp	r3, #1
 4869 0076 19D1     		bne	.L253
 4870              	.L256:
 4871              	.LBB489:
ARM GAS  /tmp/cc17XZfc.s 			page 147


2277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 4872              		.loc 1 2278 5 discriminator 1
 4873 0078 7B68     		ldr	r3, [r7, #4]
 4874 007a 1B68     		ldr	r3, [r3]
 4875 007c 0C33     		adds	r3, r3, #12
 4876 007e 3B62     		str	r3, [r7, #32]
 4877              	.LBB490:
 4878              	.LBB491:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4879              		.loc 2 1072 4 discriminator 1
 4880 0080 3B6A     		ldr	r3, [r7, #32]
 4881              		.syntax unified
 4882              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4883 0082 53E8003F 		ldrex r3, [r3]
 4884              	@ 0 "" 2
 4885              		.thumb
 4886              		.syntax unified
 4887 0086 FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4888              		.loc 2 1073 10 discriminator 1
 4889 0088 FB69     		ldr	r3, [r7, #28]
 4890              	.LBE491:
 4891              	.LBE490:
 4892              		.loc 1 2278 5 discriminator 1
 4893 008a 23F01003 		bic	r3, r3, #16
 4894 008e FB65     		str	r3, [r7, #92]
 4895 0090 7B68     		ldr	r3, [r7, #4]
 4896 0092 1B68     		ldr	r3, [r3]
 4897 0094 0C33     		adds	r3, r3, #12
 4898 0096 FA6D     		ldr	r2, [r7, #92]
 4899 0098 FA62     		str	r2, [r7, #44]
 4900 009a BB62     		str	r3, [r7, #40]
 4901              	.LBB492:
 4902              	.LBB493:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4903              		.loc 2 1123 4 discriminator 1
 4904 009c B96A     		ldr	r1, [r7, #40]
 4905 009e FA6A     		ldr	r2, [r7, #44]
 4906              		.syntax unified
 4907              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4908 00a0 41E80023 		strex r3, r2, [r1]
 4909              	@ 0 "" 2
 4910              		.thumb
 4911              		.syntax unified
 4912 00a4 7B62     		str	r3, [r7, #36]
 4913              		.loc 2 1124 10 discriminator 1
 4914 00a6 7B6A     		ldr	r3, [r7, #36]
 4915              	.LBE493:
 4916              	.LBE492:
 4917              		.loc 1 2278 5 discriminator 1
 4918 00a8 002B     		cmp	r3, #0
 4919 00aa E5D1     		bne	.L256
 4920              	.L253:
 4921              	.LBE489:
2279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/cc17XZfc.s 			page 148


2281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 4922              		.loc 1 2282 7
 4923 00ac 7B68     		ldr	r3, [r7, #4]
 4924 00ae 1B68     		ldr	r3, [r3]
 4925 00b0 5B69     		ldr	r3, [r3, #20]
 4926 00b2 03F04003 		and	r3, r3, #64
 4927              		.loc 1 2282 6
 4928 00b6 002B     		cmp	r3, #0
 4929 00b8 3FD0     		beq	.L257
 4930              	.L260:
 4931              	.LBB494:
2283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 4932              		.loc 1 2284 5 discriminator 1
 4933 00ba 7B68     		ldr	r3, [r7, #4]
 4934 00bc 1B68     		ldr	r3, [r3]
 4935 00be 1433     		adds	r3, r3, #20
 4936 00c0 FB60     		str	r3, [r7, #12]
 4937              	.LBB495:
 4938              	.LBB496:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4939              		.loc 2 1072 4 discriminator 1
 4940 00c2 FB68     		ldr	r3, [r7, #12]
 4941              		.syntax unified
 4942              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4943 00c4 53E8003F 		ldrex r3, [r3]
 4944              	@ 0 "" 2
 4945              		.thumb
 4946              		.syntax unified
 4947 00c8 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4948              		.loc 2 1073 10 discriminator 1
 4949 00ca BB68     		ldr	r3, [r7, #8]
 4950              	.LBE496:
 4951              	.LBE495:
 4952              		.loc 1 2284 5 discriminator 1
 4953 00cc 23F04003 		bic	r3, r3, #64
 4954 00d0 BB65     		str	r3, [r7, #88]
 4955 00d2 7B68     		ldr	r3, [r7, #4]
 4956 00d4 1B68     		ldr	r3, [r3]
 4957 00d6 1433     		adds	r3, r3, #20
 4958 00d8 BA6D     		ldr	r2, [r7, #88]
 4959 00da BA61     		str	r2, [r7, #24]
 4960 00dc 7B61     		str	r3, [r7, #20]
 4961              	.LBB497:
 4962              	.LBB498:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 4963              		.loc 2 1123 4 discriminator 1
 4964 00de 7969     		ldr	r1, [r7, #20]
 4965 00e0 BA69     		ldr	r2, [r7, #24]
 4966              		.syntax unified
 4967              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4968 00e2 41E80023 		strex r3, r2, [r1]
 4969              	@ 0 "" 2
 4970              		.thumb
 4971              		.syntax unified
ARM GAS  /tmp/cc17XZfc.s 			page 149


 4972 00e6 3B61     		str	r3, [r7, #16]
 4973              		.loc 2 1124 10 discriminator 1
 4974 00e8 3B69     		ldr	r3, [r7, #16]
 4975              	.LBE498:
 4976              	.LBE497:
 4977              		.loc 1 2284 5 discriminator 1
 4978 00ea 002B     		cmp	r3, #0
 4979 00ec E5D1     		bne	.L260
 4980              	.LBE494:
2285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
2287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 4981              		.loc 1 2287 14
 4982 00ee 7B68     		ldr	r3, [r7, #4]
 4983 00f0 DB6B     		ldr	r3, [r3, #60]
 4984              		.loc 1 2287 8
 4985 00f2 002B     		cmp	r3, #0
 4986 00f4 13D0     		beq	.L261
2288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 4987              		.loc 1 2291 12
 4988 00f6 7B68     		ldr	r3, [r7, #4]
 4989 00f8 DB6B     		ldr	r3, [r3, #60]
 4990              		.loc 1 2291 40
 4991 00fa 194A     		ldr	r2, .L264
 4992 00fc 5A63     		str	r2, [r3, #52]
2292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Abort DMA RX */
2294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 4993              		.loc 1 2294 11
 4994 00fe 7B68     		ldr	r3, [r7, #4]
 4995 0100 DB6B     		ldr	r3, [r3, #60]
 4996 0102 1846     		mov	r0, r3
 4997 0104 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 4998 0108 0346     		mov	r3, r0
 4999              		.loc 1 2294 10
 5000 010a 002B     		cmp	r3, #0
 5001 010c 22D0     		beq	.L262
2295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
 5002              		.loc 1 2297 14
 5003 010e 7B68     		ldr	r3, [r7, #4]
 5004 0110 DB6B     		ldr	r3, [r3, #60]
 5005              		.loc 1 2297 22
 5006 0112 5B6B     		ldr	r3, [r3, #52]
 5007              		.loc 1 2297 47
 5008 0114 7A68     		ldr	r2, [r7, #4]
 5009 0116 D26B     		ldr	r2, [r2, #60]
 5010              		.loc 1 2297 9
 5011 0118 1046     		mov	r0, r2
 5012 011a 9847     		blx	r3
 5013              	.LVL1:
 5014 011c 1AE0     		b	.L262
 5015              	.L261:
ARM GAS  /tmp/cc17XZfc.s 			page 150


2298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Reset Rx transfer counter */
2303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxXferCount = 0x00U;
 5016              		.loc 1 2303 26
 5017 011e 7B68     		ldr	r3, [r7, #4]
 5018 0120 0022     		movs	r2, #0
 5019 0122 DA85     		strh	r2, [r3, #46]	@ movhi
2304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
2306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 5020              		.loc 1 2306 22
 5021 0124 7B68     		ldr	r3, [r7, #4]
 5022 0126 2022     		movs	r2, #32
 5023 0128 83F84220 		strb	r2, [r3, #66]
2307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5024              		.loc 1 2307 28
 5025 012c 7B68     		ldr	r3, [r7, #4]
 5026 012e 0022     		movs	r2, #0
 5027 0130 1A63     		str	r2, [r3, #48]
2308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
2313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
2315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
 5028              		.loc 1 2315 7
 5029 0132 7868     		ldr	r0, [r7, #4]
 5030 0134 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 5031 0138 0CE0     		b	.L262
 5032              	.L257:
2316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
2320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Reset Rx transfer counter */
2322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 5033              		.loc 1 2322 24
 5034 013a 7B68     		ldr	r3, [r7, #4]
 5035 013c 0022     		movs	r2, #0
 5036 013e DA85     		strh	r2, [r3, #46]	@ movhi
2323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
2325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 5037              		.loc 1 2325 20
 5038 0140 7B68     		ldr	r3, [r7, #4]
 5039 0142 2022     		movs	r2, #32
 5040 0144 83F84220 		strb	r2, [r3, #66]
2326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5041              		.loc 1 2326 26
 5042 0148 7B68     		ldr	r3, [r7, #4]
 5043 014a 0022     		movs	r2, #0
ARM GAS  /tmp/cc17XZfc.s 			page 151


 5044 014c 1A63     		str	r2, [r3, #48]
2327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
2331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
2332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
2334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
 5045              		.loc 1 2334 5
 5046 014e 7868     		ldr	r0, [r7, #4]
 5047 0150 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 5048              	.L262:
2335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 5049              		.loc 1 2338 10
 5050 0154 0023     		movs	r3, #0
2339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5051              		.loc 1 2339 1
 5052 0156 1846     		mov	r0, r3
 5053 0158 6837     		adds	r7, r7, #104
 5054              	.LCFI134:
 5055              		.cfi_def_cfa_offset 8
 5056 015a BD46     		mov	sp, r7
 5057              	.LCFI135:
 5058              		.cfi_def_cfa_register 13
 5059              		@ sp needed
 5060 015c 80BD     		pop	{r7, pc}
 5061              	.L265:
 5062 015e 00BF     		.align	2
 5063              	.L264:
 5064 0160 00000000 		.word	UART_DMARxOnlyAbortCallback
 5065              		.cfi_endproc
 5066              	.LFE90:
 5068              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 5069              		.align	1
 5070              		.global	HAL_UART_IRQHandler
 5071              		.syntax unified
 5072              		.thumb
 5073              		.thumb_func
 5075              	HAL_UART_IRQHandler:
 5076              	.LFB91:
2340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART interrupt request.
2343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
2348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5077              		.loc 1 2348 1
 5078              		.cfi_startproc
 5079              		@ args = 0, pretend = 0, frame = 232
 5080              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc17XZfc.s 			page 152


 5081 0000 80B5     		push	{r7, lr}
 5082              	.LCFI136:
 5083              		.cfi_def_cfa_offset 8
 5084              		.cfi_offset 7, -8
 5085              		.cfi_offset 14, -4
 5086 0002 BAB0     		sub	sp, sp, #232
 5087              	.LCFI137:
 5088              		.cfi_def_cfa_offset 240
 5089 0004 00AF     		add	r7, sp, #0
 5090              	.LCFI138:
 5091              		.cfi_def_cfa_register 7
 5092 0006 7860     		str	r0, [r7, #4]
2349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 5093              		.loc 1 2349 25
 5094 0008 7B68     		ldr	r3, [r7, #4]
 5095 000a 1B68     		ldr	r3, [r3]
 5096              		.loc 1 2349 12
 5097 000c 1B68     		ldr	r3, [r3]
 5098 000e C7F8E430 		str	r3, [r7, #228]
2350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 5099              		.loc 1 2350 25
 5100 0012 7B68     		ldr	r3, [r7, #4]
 5101 0014 1B68     		ldr	r3, [r3]
 5102              		.loc 1 2350 12
 5103 0016 DB68     		ldr	r3, [r3, #12]
 5104 0018 C7F8E030 		str	r3, [r7, #224]
2351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 5105              		.loc 1 2351 25
 5106 001c 7B68     		ldr	r3, [r7, #4]
 5107 001e 1B68     		ldr	r3, [r3]
 5108              		.loc 1 2351 12
 5109 0020 5B69     		ldr	r3, [r3, #20]
 5110 0022 C7F8DC30 		str	r3, [r7, #220]
2352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t errorflags = 0x00U;
 5111              		.loc 1 2352 12
 5112 0026 0023     		movs	r3, #0
 5113 0028 C7F8D830 		str	r3, [r7, #216]
2353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 5114              		.loc 1 2353 12
 5115 002c 0023     		movs	r3, #0
 5116 002e C7F8D430 		str	r3, [r7, #212]
2354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If no error occurs */
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 5117              		.loc 1 2356 14
 5118 0032 D7F8E430 		ldr	r3, [r7, #228]
 5119 0036 03F00F03 		and	r3, r3, #15
 5120 003a C7F8D830 		str	r3, [r7, #216]
2357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (errorflags == RESET)
 5121              		.loc 1 2357 6
 5122 003e D7F8D830 		ldr	r3, [r7, #216]
 5123 0042 002B     		cmp	r3, #0
 5124 0044 0FD1     		bne	.L267
2358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART in mode Receiver -------------------------------------------------*/
2360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 5125              		.loc 1 2360 20
ARM GAS  /tmp/cc17XZfc.s 			page 153


 5126 0046 D7F8E430 		ldr	r3, [r7, #228]
 5127 004a 03F02003 		and	r3, r3, #32
 5128              		.loc 1 2360 8
 5129 004e 002B     		cmp	r3, #0
 5130 0050 09D0     		beq	.L267
 5131              		.loc 1 2360 59 discriminator 1
 5132 0052 D7F8E030 		ldr	r3, [r7, #224]
 5133 0056 03F02003 		and	r3, r3, #32
 5134              		.loc 1 2360 47 discriminator 1
 5135 005a 002B     		cmp	r3, #0
 5136 005c 03D0     		beq	.L267
2361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       UART_Receive_IT(huart);
 5137              		.loc 1 2362 7
 5138 005e 7868     		ldr	r0, [r7, #4]
 5139 0060 FFF7FEFF 		bl	UART_Receive_IT
2363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 5140              		.loc 1 2363 7
 5141 0064 5BE2     		b	.L266
 5142              	.L267:
2364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* If some errors occur */
2368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 5143              		.loc 1 2368 6
 5144 0066 D7F8D830 		ldr	r3, [r7, #216]
 5145 006a 002B     		cmp	r3, #0
 5146 006c 00F0DE80 		beq	.L269
 5147              		.loc 1 2368 42 discriminator 1
 5148 0070 D7F8DC30 		ldr	r3, [r7, #220]
 5149 0074 03F00103 		and	r3, r3, #1
 5150              		.loc 1 2368 29 discriminator 1
 5151 0078 002B     		cmp	r3, #0
 5152 007a 06D1     		bne	.L270
2369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                                 || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 5153              		.loc 1 2369 45
 5154 007c D7F8E030 		ldr	r3, [r7, #224]
 5155 0080 03F49073 		and	r3, r3, #288
 5156              		.loc 1 2369 33
 5157 0084 002B     		cmp	r3, #0
 5158 0086 00F0D180 		beq	.L269
 5159              	.L270:
2370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART parity error interrupt occurred ----------------------------------*/
2372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 5160              		.loc 1 2372 20
 5161 008a D7F8E430 		ldr	r3, [r7, #228]
 5162 008e 03F00103 		and	r3, r3, #1
 5163              		.loc 1 2372 8
 5164 0092 002B     		cmp	r3, #0
 5165 0094 0BD0     		beq	.L271
 5166              		.loc 1 2372 57 discriminator 1
 5167 0096 D7F8E030 		ldr	r3, [r7, #224]
 5168 009a 03F48073 		and	r3, r3, #256
 5169              		.loc 1 2372 45 discriminator 1
 5170 009e 002B     		cmp	r3, #0
ARM GAS  /tmp/cc17XZfc.s 			page 154


 5171 00a0 05D0     		beq	.L271
2373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
 5172              		.loc 1 2374 24
 5173 00a2 7B68     		ldr	r3, [r7, #4]
 5174 00a4 5B6C     		ldr	r3, [r3, #68]
 5175 00a6 43F00102 		orr	r2, r3, #1
 5176 00aa 7B68     		ldr	r3, [r7, #4]
 5177 00ac 5A64     		str	r2, [r3, #68]
 5178              	.L271:
2375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART noise error interrupt occurred -----------------------------------*/
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 5179              		.loc 1 2378 20
 5180 00ae D7F8E430 		ldr	r3, [r7, #228]
 5181 00b2 03F00403 		and	r3, r3, #4
 5182              		.loc 1 2378 8
 5183 00b6 002B     		cmp	r3, #0
 5184 00b8 0BD0     		beq	.L272
 5185              		.loc 1 2378 57 discriminator 1
 5186 00ba D7F8DC30 		ldr	r3, [r7, #220]
 5187 00be 03F00103 		and	r3, r3, #1
 5188              		.loc 1 2378 45 discriminator 1
 5189 00c2 002B     		cmp	r3, #0
 5190 00c4 05D0     		beq	.L272
2379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
 5191              		.loc 1 2380 24
 5192 00c6 7B68     		ldr	r3, [r7, #4]
 5193 00c8 5B6C     		ldr	r3, [r3, #68]
 5194 00ca 43F00202 		orr	r2, r3, #2
 5195 00ce 7B68     		ldr	r3, [r7, #4]
 5196 00d0 5A64     		str	r2, [r3, #68]
 5197              	.L272:
2381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART frame error interrupt occurred -----------------------------------*/
2384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 5198              		.loc 1 2384 20
 5199 00d2 D7F8E430 		ldr	r3, [r7, #228]
 5200 00d6 03F00203 		and	r3, r3, #2
 5201              		.loc 1 2384 8
 5202 00da 002B     		cmp	r3, #0
 5203 00dc 0BD0     		beq	.L273
 5204              		.loc 1 2384 57 discriminator 1
 5205 00de D7F8DC30 		ldr	r3, [r7, #220]
 5206 00e2 03F00103 		and	r3, r3, #1
 5207              		.loc 1 2384 45 discriminator 1
 5208 00e6 002B     		cmp	r3, #0
 5209 00e8 05D0     		beq	.L273
2385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
 5210              		.loc 1 2386 24
 5211 00ea 7B68     		ldr	r3, [r7, #4]
 5212 00ec 5B6C     		ldr	r3, [r3, #68]
 5213 00ee 43F00402 		orr	r2, r3, #4
ARM GAS  /tmp/cc17XZfc.s 			page 155


 5214 00f2 7B68     		ldr	r3, [r7, #4]
 5215 00f4 5A64     		str	r2, [r3, #68]
 5216              	.L273:
2387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* UART Over-Run interrupt occurred --------------------------------------*/
2390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 5217              		.loc 1 2390 20
 5218 00f6 D7F8E430 		ldr	r3, [r7, #228]
 5219 00fa 03F00803 		and	r3, r3, #8
 5220              		.loc 1 2390 8
 5221 00fe 002B     		cmp	r3, #0
 5222 0100 11D0     		beq	.L274
 5223              		.loc 1 2390 59 discriminator 1
 5224 0102 D7F8E030 		ldr	r3, [r7, #224]
 5225 0106 03F02003 		and	r3, r3, #32
 5226              		.loc 1 2390 46 discriminator 1
 5227 010a 002B     		cmp	r3, #0
 5228 010c 05D1     		bne	.L275
2391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                                                  || ((cr3its & USART_CR3_EIE) != RESET)))
 5229              		.loc 1 2391 62
 5230 010e D7F8DC30 		ldr	r3, [r7, #220]
 5231 0112 03F00103 		and	r3, r3, #1
 5232              		.loc 1 2391 50
 5233 0116 002B     		cmp	r3, #0
 5234 0118 05D0     		beq	.L274
 5235              	.L275:
2392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
 5236              		.loc 1 2393 24
 5237 011a 7B68     		ldr	r3, [r7, #4]
 5238 011c 5B6C     		ldr	r3, [r3, #68]
 5239 011e 43F00802 		orr	r2, r3, #8
 5240 0122 7B68     		ldr	r3, [r7, #4]
 5241 0124 5A64     		str	r2, [r3, #68]
 5242              	.L274:
2394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/
2397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 5243              		.loc 1 2397 14
 5244 0126 7B68     		ldr	r3, [r7, #4]
 5245 0128 5B6C     		ldr	r3, [r3, #68]
 5246              		.loc 1 2397 8
 5247 012a 002B     		cmp	r3, #0
 5248 012c 00F0F281 		beq	.L313
2398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* UART in mode Receiver -----------------------------------------------*/
2400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 5249              		.loc 1 2400 22
 5250 0130 D7F8E430 		ldr	r3, [r7, #228]
 5251 0134 03F02003 		and	r3, r3, #32
 5252              		.loc 1 2400 10
 5253 0138 002B     		cmp	r3, #0
 5254 013a 08D0     		beq	.L277
 5255              		.loc 1 2400 61 discriminator 1
 5256 013c D7F8E030 		ldr	r3, [r7, #224]
ARM GAS  /tmp/cc17XZfc.s 			page 156


 5257 0140 03F02003 		and	r3, r3, #32
 5258              		.loc 1 2400 49 discriminator 1
 5259 0144 002B     		cmp	r3, #0
 5260 0146 02D0     		beq	.L277
2401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         UART_Receive_IT(huart);
 5261              		.loc 1 2402 9
 5262 0148 7868     		ldr	r0, [r7, #4]
 5263 014a FFF7FEFF 		bl	UART_Receive_IT
 5264              	.L277:
2403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
2406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          consider error as blocking */
2407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 5265              		.loc 1 2407 20
 5266 014e 7B68     		ldr	r3, [r7, #4]
 5267 0150 1B68     		ldr	r3, [r3]
 5268 0152 5B69     		ldr	r3, [r3, #20]
 5269 0154 03F04003 		and	r3, r3, #64
 5270 0158 002B     		cmp	r3, #0
 5271 015a 14BF     		ite	ne
 5272 015c 0123     		movne	r3, #1
 5273 015e 0023     		moveq	r3, #0
 5274 0160 DBB2     		uxtb	r3, r3
 5275              		.loc 1 2407 18
 5276 0162 C7F8D430 		str	r3, [r7, #212]
2408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 5277              		.loc 1 2408 18
 5278 0166 7B68     		ldr	r3, [r7, #4]
 5279 0168 5B6C     		ldr	r3, [r3, #68]
 5280              		.loc 1 2408 30
 5281 016a 03F00803 		and	r3, r3, #8
 5282              		.loc 1 2408 10
 5283 016e 002B     		cmp	r3, #0
 5284 0170 03D1     		bne	.L278
 5285              		.loc 1 2408 62 discriminator 1
 5286 0172 D7F8D430 		ldr	r3, [r7, #212]
 5287 0176 002B     		cmp	r3, #0
 5288 0178 4FD0     		beq	.L279
 5289              	.L278:
2409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
2413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         UART_EndRxTransfer(huart);
 5290              		.loc 1 2413 9
 5291 017a 7868     		ldr	r0, [r7, #4]
 5292 017c FFF7FEFF 		bl	UART_EndRxTransfer
2414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 5293              		.loc 1 2416 13
 5294 0180 7B68     		ldr	r3, [r7, #4]
 5295 0182 1B68     		ldr	r3, [r3]
 5296 0184 5B69     		ldr	r3, [r3, #20]
 5297 0186 03F04003 		and	r3, r3, #64
ARM GAS  /tmp/cc17XZfc.s 			page 157


 5298              		.loc 1 2416 12
 5299 018a 002B     		cmp	r3, #0
 5300 018c 41D0     		beq	.L280
 5301              	.L283:
 5302              	.LBB499:
2417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 5303              		.loc 1 2418 11 discriminator 1
 5304 018e 7B68     		ldr	r3, [r7, #4]
 5305 0190 1B68     		ldr	r3, [r3]
 5306 0192 1433     		adds	r3, r3, #20
 5307 0194 C7F89C30 		str	r3, [r7, #156]
 5308              	.LBB500:
 5309              	.LBB501:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5310              		.loc 2 1072 4 discriminator 1
 5311 0198 D7F89C30 		ldr	r3, [r7, #156]
 5312              		.syntax unified
 5313              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5314 019c 53E8003F 		ldrex r3, [r3]
 5315              	@ 0 "" 2
 5316              		.thumb
 5317              		.syntax unified
 5318 01a0 C7F89830 		str	r3, [r7, #152]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5319              		.loc 2 1073 10 discriminator 1
 5320 01a4 D7F89830 		ldr	r3, [r7, #152]
 5321              	.LBE501:
 5322              	.LBE500:
 5323              		.loc 1 2418 11 discriminator 1
 5324 01a8 23F04003 		bic	r3, r3, #64
 5325 01ac C7F8D030 		str	r3, [r7, #208]
 5326 01b0 7B68     		ldr	r3, [r7, #4]
 5327 01b2 1B68     		ldr	r3, [r3]
 5328 01b4 1433     		adds	r3, r3, #20
 5329 01b6 D7F8D020 		ldr	r2, [r7, #208]
 5330 01ba C7F8A820 		str	r2, [r7, #168]
 5331 01be C7F8A430 		str	r3, [r7, #164]
 5332              	.LBB502:
 5333              	.LBB503:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5334              		.loc 2 1123 4 discriminator 1
 5335 01c2 D7F8A410 		ldr	r1, [r7, #164]
 5336 01c6 D7F8A820 		ldr	r2, [r7, #168]
 5337              		.syntax unified
 5338              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5339 01ca 41E80023 		strex r3, r2, [r1]
 5340              	@ 0 "" 2
 5341              		.thumb
 5342              		.syntax unified
 5343 01ce C7F8A030 		str	r3, [r7, #160]
 5344              		.loc 2 1124 10 discriminator 1
 5345 01d2 D7F8A030 		ldr	r3, [r7, #160]
 5346              	.LBE503:
 5347              	.LBE502:
 5348              		.loc 1 2418 11 discriminator 1
 5349 01d6 002B     		cmp	r3, #0
ARM GAS  /tmp/cc17XZfc.s 			page 158


 5350 01d8 D9D1     		bne	.L283
 5351              	.LBE499:
2419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
2421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           if (huart->hdmarx != NULL)
 5352              		.loc 1 2421 20
 5353 01da 7B68     		ldr	r3, [r7, #4]
 5354 01dc DB6B     		ldr	r3, [r3, #60]
 5355              		.loc 1 2421 14
 5356 01de 002B     		cmp	r3, #0
 5357 01e0 13D0     		beq	.L284
2422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
2423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
2424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 5358              		.loc 1 2425 18
 5359 01e2 7B68     		ldr	r3, [r7, #4]
 5360 01e4 DB6B     		ldr	r3, [r3, #60]
 5361              		.loc 1 2425 46
 5362 01e6 7E4A     		ldr	r2, .L317
 5363 01e8 5A63     		str	r2, [r3, #52]
2426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 5364              		.loc 1 2426 17
 5365 01ea 7B68     		ldr	r3, [r7, #4]
 5366 01ec DB6B     		ldr	r3, [r3, #60]
 5367 01ee 1846     		mov	r0, r3
 5368 01f0 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 5369 01f4 0346     		mov	r3, r0
 5370              		.loc 1 2426 16
 5371 01f6 002B     		cmp	r3, #0
 5372 01f8 16D0     		beq	.L314
2427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             {
2428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****               /* Call Directly XferAbortCallback function in case of error */
2429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
 5373              		.loc 1 2429 20
 5374 01fa 7B68     		ldr	r3, [r7, #4]
 5375 01fc DB6B     		ldr	r3, [r3, #60]
 5376              		.loc 1 2429 28
 5377 01fe 5B6B     		ldr	r3, [r3, #52]
 5378              		.loc 1 2429 53
 5379 0200 7A68     		ldr	r2, [r7, #4]
 5380 0202 D26B     		ldr	r2, [r2, #60]
 5381              		.loc 1 2429 15
 5382 0204 1046     		mov	r0, r2
 5383 0206 9847     		blx	r3
 5384              	.LVL2:
2416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 5385              		.loc 1 2416 12
 5386 0208 0EE0     		b	.L314
 5387              	.L284:
2430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             }
2431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
2432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           else
2433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           {
2434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /* Call user error callback */
2435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /*Call registered error callback*/
ARM GAS  /tmp/cc17XZfc.s 			page 159


2437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             huart->ErrorCallback(huart);
2438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             /*Call legacy weak error callback*/
2440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
 5388              		.loc 1 2440 13
 5389 020a 7868     		ldr	r0, [r7, #4]
 5390 020c FFF7FEFF 		bl	HAL_UART_ErrorCallback
2416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 5391              		.loc 1 2416 12
 5392 0210 0AE0     		b	.L314
 5393              	.L280:
2441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           }
2443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         else
2445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Call user error callback */
2447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /*Call registered error callback*/
2449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ErrorCallback(huart);
2450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /*Call legacy weak error callback*/
2452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
 5394              		.loc 1 2452 11
 5395 0212 7868     		ldr	r0, [r7, #4]
 5396 0214 FFF7FEFF 		bl	HAL_UART_ErrorCallback
2416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 5397              		.loc 1 2416 12
 5398 0218 06E0     		b	.L314
 5399              	.L279:
2453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
2457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            Error is notified to user through user error callback */
2460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered error callback*/
2462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCallback(huart);
2463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak error callback*/
2465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
 5400              		.loc 1 2465 9
 5401 021a 7868     		ldr	r0, [r7, #4]
 5402 021c FFF7FEFF 		bl	HAL_UART_ErrorCallback
2466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
 5403              		.loc 1 2468 26
 5404 0220 7B68     		ldr	r3, [r7, #4]
 5405 0222 0022     		movs	r2, #0
 5406 0224 5A64     		str	r2, [r3, #68]
2469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 5407              		.loc 1 2471 5
ARM GAS  /tmp/cc17XZfc.s 			page 160


 5408 0226 75E1     		b	.L313
 5409              	.L314:
2416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
 5410              		.loc 1 2416 12
 5411 0228 00BF     		nop
 5412              		.loc 1 2471 5
 5413 022a 73E1     		b	.L313
 5414              	.L269:
2472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   } /* End if some error occurs */
2473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
2475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : */
2476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 5415              		.loc 1 2476 13
 5416 022c 7B68     		ldr	r3, [r7, #4]
 5417 022e 1B6B     		ldr	r3, [r3, #48]
 5418              		.loc 1 2476 6
 5419 0230 012B     		cmp	r3, #1
 5420 0232 40F04F81 		bne	.L286
2477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       && ((isrflags & USART_SR_IDLE) != 0U)
 5421              		.loc 1 2477 21
 5422 0236 D7F8E430 		ldr	r3, [r7, #228]
 5423 023a 03F01003 		and	r3, r3, #16
 5424              		.loc 1 2477 7
 5425 023e 002B     		cmp	r3, #0
 5426 0240 00F04881 		beq	.L286
2478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       && ((cr1its & USART_SR_IDLE) != 0U))
 5427              		.loc 1 2478 19
 5428 0244 D7F8E030 		ldr	r3, [r7, #224]
 5429 0248 03F01003 		and	r3, r3, #16
 5430              		.loc 1 2478 7
 5431 024c 002B     		cmp	r3, #0
 5432 024e 00F04181 		beq	.L286
 5433              	.LBB504:
2479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_CLEAR_IDLEFLAG(huart);
 5434              		.loc 1 2480 5
 5435 0252 0023     		movs	r3, #0
 5436 0254 BB60     		str	r3, [r7, #8]
 5437 0256 7B68     		ldr	r3, [r7, #4]
 5438 0258 1B68     		ldr	r3, [r3]
 5439 025a 1B68     		ldr	r3, [r3]
 5440 025c BB60     		str	r3, [r7, #8]
 5441 025e 7B68     		ldr	r3, [r7, #4]
 5442 0260 1B68     		ldr	r3, [r3]
 5443 0262 5B68     		ldr	r3, [r3, #4]
 5444 0264 BB60     		str	r3, [r7, #8]
 5445 0266 BB68     		ldr	r3, [r7, #8]
 5446              	.LBE504:
2481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check if DMA mode is enabled in UART */
2483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 5447              		.loc 1 2483 9
 5448 0268 7B68     		ldr	r3, [r7, #4]
 5449 026a 1B68     		ldr	r3, [r3]
 5450 026c 5B69     		ldr	r3, [r3, #20]
 5451 026e 03F04003 		and	r3, r3, #64
ARM GAS  /tmp/cc17XZfc.s 			page 161


 5452              		.loc 1 2483 8
 5453 0272 002B     		cmp	r3, #0
 5454 0274 00F0B680 		beq	.L287
 5455              	.LBB505:
2484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* DMA mode enabled */
2486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing,
2487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          (DMA cplt callback will be called).
2488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 5456              		.loc 1 2489 50
 5457 0278 7B68     		ldr	r3, [r7, #4]
 5458 027a DB6B     		ldr	r3, [r3, #60]
 5459 027c 1B68     		ldr	r3, [r3]
 5460 027e 5B68     		ldr	r3, [r3, #4]
 5461              		.loc 1 2489 16
 5462 0280 A7F8BE30 		strh	r3, [r7, #190]	@ movhi
2490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((nb_remaining_rx_data > 0U)
 5463              		.loc 1 2490 10
 5464 0284 B7F8BE30 		ldrh	r3, [r7, #190]
 5465 0288 002B     		cmp	r3, #0
 5466 028a 00F04581 		beq	.L315
2491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           && (nb_remaining_rx_data < huart->RxXferSize))
 5467              		.loc 1 2491 43
 5468 028e 7B68     		ldr	r3, [r7, #4]
 5469 0290 9B8D     		ldrh	r3, [r3, #44]
 5470              		.loc 1 2491 11
 5471 0292 B7F8BE20 		ldrh	r2, [r7, #190]
 5472 0296 9A42     		cmp	r2, r3
 5473 0298 80F03E81 		bcs	.L315
2492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Reception is not complete */
2494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxXferCount = nb_remaining_rx_data;
 5474              		.loc 1 2494 28
 5475 029c 7B68     		ldr	r3, [r7, #4]
 5476 029e B7F8BE20 		ldrh	r2, [r7, #190]	@ movhi
 5477 02a2 DA85     		strh	r2, [r3, #46]	@ movhi
2495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* In Normal mode, end DMA xfer and HAL UART Rx process*/
2497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 5478              		.loc 1 2497 18
 5479 02a4 7B68     		ldr	r3, [r7, #4]
 5480 02a6 DB6B     		ldr	r3, [r3, #60]
 5481              		.loc 1 2497 32
 5482 02a8 9B69     		ldr	r3, [r3, #24]
 5483              		.loc 1 2497 12
 5484 02aa 202B     		cmp	r3, #32
 5485 02ac 00F08880 		beq	.L289
 5486              	.L292:
 5487              	.LBB506:
2498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
2499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
2500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 5488              		.loc 1 2500 11 discriminator 1
 5489 02b0 7B68     		ldr	r3, [r7, #4]
 5490 02b2 1B68     		ldr	r3, [r3]
 5491 02b4 0C33     		adds	r3, r3, #12
ARM GAS  /tmp/cc17XZfc.s 			page 162


 5492 02b6 C7F88830 		str	r3, [r7, #136]
 5493              	.LBB507:
 5494              	.LBB508:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5495              		.loc 2 1072 4 discriminator 1
 5496 02ba D7F88830 		ldr	r3, [r7, #136]
 5497              		.syntax unified
 5498              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5499 02be 53E8003F 		ldrex r3, [r3]
 5500              	@ 0 "" 2
 5501              		.thumb
 5502              		.syntax unified
 5503 02c2 C7F88430 		str	r3, [r7, #132]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5504              		.loc 2 1073 10 discriminator 1
 5505 02c6 D7F88430 		ldr	r3, [r7, #132]
 5506              	.LBE508:
 5507              	.LBE507:
 5508              		.loc 1 2500 11 discriminator 1
 5509 02ca 23F48073 		bic	r3, r3, #256
 5510 02ce C7F8B830 		str	r3, [r7, #184]
 5511 02d2 7B68     		ldr	r3, [r7, #4]
 5512 02d4 1B68     		ldr	r3, [r3]
 5513 02d6 0C33     		adds	r3, r3, #12
 5514 02d8 D7F8B820 		ldr	r2, [r7, #184]
 5515 02dc C7F89420 		str	r2, [r7, #148]
 5516 02e0 C7F89030 		str	r3, [r7, #144]
 5517              	.LBB509:
 5518              	.LBB510:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5519              		.loc 2 1123 4 discriminator 1
 5520 02e4 D7F89010 		ldr	r1, [r7, #144]
 5521 02e8 D7F89420 		ldr	r2, [r7, #148]
 5522              		.syntax unified
 5523              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5524 02ec 41E80023 		strex r3, r2, [r1]
 5525              	@ 0 "" 2
 5526              		.thumb
 5527              		.syntax unified
 5528 02f0 C7F88C30 		str	r3, [r7, #140]
 5529              		.loc 2 1124 10 discriminator 1
 5530 02f4 D7F88C30 		ldr	r3, [r7, #140]
 5531              	.LBE510:
 5532              	.LBE509:
 5533              		.loc 1 2500 11 discriminator 1
 5534 02f8 002B     		cmp	r3, #0
 5535 02fa D9D1     		bne	.L292
 5536              	.L295:
 5537              	.LBE506:
 5538              	.LBB511:
2501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5539              		.loc 1 2501 11 discriminator 1
 5540 02fc 7B68     		ldr	r3, [r7, #4]
 5541 02fe 1B68     		ldr	r3, [r3]
 5542 0300 1433     		adds	r3, r3, #20
 5543 0302 7B67     		str	r3, [r7, #116]
 5544              	.LBB512:
ARM GAS  /tmp/cc17XZfc.s 			page 163


 5545              	.LBB513:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5546              		.loc 2 1072 4 discriminator 1
 5547 0304 7B6F     		ldr	r3, [r7, #116]
 5548              		.syntax unified
 5549              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5550 0306 53E8003F 		ldrex r3, [r3]
 5551              	@ 0 "" 2
 5552              		.thumb
 5553              		.syntax unified
 5554 030a 3B67     		str	r3, [r7, #112]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5555              		.loc 2 1073 10 discriminator 1
 5556 030c 3B6F     		ldr	r3, [r7, #112]
 5557              	.LBE513:
 5558              	.LBE512:
 5559              		.loc 1 2501 11 discriminator 1
 5560 030e 23F00103 		bic	r3, r3, #1
 5561 0312 C7F8B430 		str	r3, [r7, #180]
 5562 0316 7B68     		ldr	r3, [r7, #4]
 5563 0318 1B68     		ldr	r3, [r3]
 5564 031a 1433     		adds	r3, r3, #20
 5565 031c D7F8B420 		ldr	r2, [r7, #180]
 5566 0320 C7F88020 		str	r2, [r7, #128]
 5567 0324 FB67     		str	r3, [r7, #124]
 5568              	.LBB514:
 5569              	.LBB515:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5570              		.loc 2 1123 4 discriminator 1
 5571 0326 F96F     		ldr	r1, [r7, #124]
 5572 0328 D7F88020 		ldr	r2, [r7, #128]
 5573              		.syntax unified
 5574              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5575 032c 41E80023 		strex r3, r2, [r1]
 5576              	@ 0 "" 2
 5577              		.thumb
 5578              		.syntax unified
 5579 0330 BB67     		str	r3, [r7, #120]
 5580              		.loc 2 1124 10 discriminator 1
 5581 0332 BB6F     		ldr	r3, [r7, #120]
 5582              	.LBE515:
 5583              	.LBE514:
 5584              		.loc 1 2501 11 discriminator 1
 5585 0334 002B     		cmp	r3, #0
 5586 0336 E1D1     		bne	.L295
 5587              	.L298:
 5588              	.LBE511:
 5589              	.LBB516:
2502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
2504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              in the UART CR3 register */
2505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 5590              		.loc 1 2505 11 discriminator 1
 5591 0338 7B68     		ldr	r3, [r7, #4]
 5592 033a 1B68     		ldr	r3, [r3]
 5593 033c 1433     		adds	r3, r3, #20
 5594 033e 3B66     		str	r3, [r7, #96]
ARM GAS  /tmp/cc17XZfc.s 			page 164


 5595              	.LBB517:
 5596              	.LBB518:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5597              		.loc 2 1072 4 discriminator 1
 5598 0340 3B6E     		ldr	r3, [r7, #96]
 5599              		.syntax unified
 5600              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5601 0342 53E8003F 		ldrex r3, [r3]
 5602              	@ 0 "" 2
 5603              		.thumb
 5604              		.syntax unified
 5605 0346 FB65     		str	r3, [r7, #92]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5606              		.loc 2 1073 10 discriminator 1
 5607 0348 FB6D     		ldr	r3, [r7, #92]
 5608              	.LBE518:
 5609              	.LBE517:
 5610              		.loc 1 2505 11 discriminator 1
 5611 034a 23F04003 		bic	r3, r3, #64
 5612 034e C7F8B030 		str	r3, [r7, #176]
 5613 0352 7B68     		ldr	r3, [r7, #4]
 5614 0354 1B68     		ldr	r3, [r3]
 5615 0356 1433     		adds	r3, r3, #20
 5616 0358 D7F8B020 		ldr	r2, [r7, #176]
 5617 035c FA66     		str	r2, [r7, #108]
 5618 035e BB66     		str	r3, [r7, #104]
 5619              	.LBB519:
 5620              	.LBB520:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5621              		.loc 2 1123 4 discriminator 1
 5622 0360 B96E     		ldr	r1, [r7, #104]
 5623 0362 FA6E     		ldr	r2, [r7, #108]
 5624              		.syntax unified
 5625              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5626 0364 41E80023 		strex r3, r2, [r1]
 5627              	@ 0 "" 2
 5628              		.thumb
 5629              		.syntax unified
 5630 0368 7B66     		str	r3, [r7, #100]
 5631              		.loc 2 1124 10 discriminator 1
 5632 036a 7B6E     		ldr	r3, [r7, #100]
 5633              	.LBE520:
 5634              	.LBE519:
 5635              		.loc 1 2505 11 discriminator 1
 5636 036c 002B     		cmp	r3, #0
 5637 036e E3D1     		bne	.L298
 5638              	.LBE516:
2506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* At end of Rx process, restore huart->RxState to Ready */
2508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 5639              		.loc 1 2508 26
 5640 0370 7B68     		ldr	r3, [r7, #4]
 5641 0372 2022     		movs	r2, #32
 5642 0374 83F84220 		strb	r2, [r3, #66]
2509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5643              		.loc 1 2509 32
 5644 0378 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc17XZfc.s 			page 165


 5645 037a 0022     		movs	r2, #0
 5646 037c 1A63     		str	r2, [r3, #48]
 5647              	.L301:
 5648              	.LBB521:
2510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 5649              		.loc 1 2511 11 discriminator 1
 5650 037e 7B68     		ldr	r3, [r7, #4]
 5651 0380 1B68     		ldr	r3, [r3]
 5652 0382 0C33     		adds	r3, r3, #12
 5653 0384 FB64     		str	r3, [r7, #76]
 5654              	.LBB522:
 5655              	.LBB523:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5656              		.loc 2 1072 4 discriminator 1
 5657 0386 FB6C     		ldr	r3, [r7, #76]
 5658              		.syntax unified
 5659              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5660 0388 53E8003F 		ldrex r3, [r3]
 5661              	@ 0 "" 2
 5662              		.thumb
 5663              		.syntax unified
 5664 038c BB64     		str	r3, [r7, #72]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5665              		.loc 2 1073 10 discriminator 1
 5666 038e BB6C     		ldr	r3, [r7, #72]
 5667              	.LBE523:
 5668              	.LBE522:
 5669              		.loc 1 2511 11 discriminator 1
 5670 0390 23F01003 		bic	r3, r3, #16
 5671 0394 C7F8AC30 		str	r3, [r7, #172]
 5672 0398 7B68     		ldr	r3, [r7, #4]
 5673 039a 1B68     		ldr	r3, [r3]
 5674 039c 0C33     		adds	r3, r3, #12
 5675 039e D7F8AC20 		ldr	r2, [r7, #172]
 5676 03a2 BA65     		str	r2, [r7, #88]
 5677 03a4 7B65     		str	r3, [r7, #84]
 5678              	.LBB524:
 5679              	.LBB525:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5680              		.loc 2 1123 4 discriminator 1
 5681 03a6 796D     		ldr	r1, [r7, #84]
 5682 03a8 BA6D     		ldr	r2, [r7, #88]
 5683              		.syntax unified
 5684              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5685 03aa 41E80023 		strex r3, r2, [r1]
 5686              	@ 0 "" 2
 5687              		.thumb
 5688              		.syntax unified
 5689 03ae 3B65     		str	r3, [r7, #80]
 5690              		.loc 2 1124 10 discriminator 1
 5691 03b0 3B6D     		ldr	r3, [r7, #80]
 5692              	.LBE525:
 5693              	.LBE524:
 5694              		.loc 1 2511 11 discriminator 1
 5695 03b2 002B     		cmp	r3, #0
 5696 03b4 E3D1     		bne	.L301
ARM GAS  /tmp/cc17XZfc.s 			page 166


 5697              	.LBE521:
2512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Last bytes received, so no need as the abort is immediate */
2514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           (void)HAL_DMA_Abort(huart->hdmarx);
 5698              		.loc 1 2514 17
 5699 03b6 7B68     		ldr	r3, [r7, #4]
 5700 03b8 DB6B     		ldr	r3, [r3, #60]
 5701 03ba 1846     		mov	r0, r3
 5702 03bc FFF7FEFF 		bl	HAL_DMA_Abort
 5703              	.L289:
2515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
2516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Initialize type of RxEvent that correspond to RxEvent callback execution;
2518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         In this case, Rx Event type is Idle Event */
2519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 5704              		.loc 1 2519 28
 5705 03c0 7B68     		ldr	r3, [r7, #4]
 5706 03c2 0222     		movs	r2, #2
 5707 03c4 5A63     		str	r2, [r3, #52]
2520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx Event callback*/
2523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
2524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 5708              		.loc 1 2526 49
 5709 03c6 7B68     		ldr	r3, [r7, #4]
 5710 03c8 9A8D     		ldrh	r2, [r3, #44]
 5711              		.loc 1 2526 69
 5712 03ca 7B68     		ldr	r3, [r7, #4]
 5713 03cc DB8D     		ldrh	r3, [r3, #46]	@ movhi
 5714 03ce 9BB2     		uxth	r3, r3
 5715              		.loc 1 2526 9
 5716 03d0 D31A     		subs	r3, r2, r3
 5717 03d2 9BB2     		uxth	r3, r3
 5718 03d4 1946     		mov	r1, r3
 5719 03d6 7868     		ldr	r0, [r7, #4]
 5720 03d8 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
2527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
2529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 5721              		.loc 1 2529 7
 5722 03dc 9CE0     		b	.L315
 5723              	.L318:
 5724 03de 00BF     		.align	2
 5725              	.L317:
 5726 03e0 00000000 		.word	UART_DMAAbortOnError
 5727              	.L287:
 5728              	.LBE505:
 5729              	.LBB526:
2530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
2532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
2533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* DMA mode not enabled */
2534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing.
2535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
ARM GAS  /tmp/cc17XZfc.s 			page 167


2536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 5730              		.loc 1 2536 34
 5731 03e4 7B68     		ldr	r3, [r7, #4]
 5732 03e6 9A8D     		ldrh	r2, [r3, #44]
 5733              		.loc 1 2536 54
 5734 03e8 7B68     		ldr	r3, [r7, #4]
 5735 03ea DB8D     		ldrh	r3, [r3, #46]	@ movhi
 5736 03ec 9BB2     		uxth	r3, r3
 5737              		.loc 1 2536 16
 5738 03ee D31A     		subs	r3, r2, r3
 5739 03f0 A7F8CE30 		strh	r3, [r7, #206]	@ movhi
2537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((huart->RxXferCount > 0U)
 5740              		.loc 1 2537 17
 5741 03f4 7B68     		ldr	r3, [r7, #4]
 5742 03f6 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 5743 03f8 9BB2     		uxth	r3, r3
 5744              		.loc 1 2537 10
 5745 03fa 002B     		cmp	r3, #0
 5746 03fc 00F08E80 		beq	.L316
2538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           && (nb_rx_data > 0U))
 5747              		.loc 1 2538 11
 5748 0400 B7F8CE30 		ldrh	r3, [r7, #206]
 5749 0404 002B     		cmp	r3, #0
 5750 0406 00F08980 		beq	.L316
 5751              	.L305:
 5752              	.LBB527:
2539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
2540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART Parity Error Interrupt and RXNE interrupts */
2541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 5753              		.loc 1 2541 9 discriminator 1
 5754 040a 7B68     		ldr	r3, [r7, #4]
 5755 040c 1B68     		ldr	r3, [r3]
 5756 040e 0C33     		adds	r3, r3, #12
 5757 0410 BB63     		str	r3, [r7, #56]
 5758              	.LBB528:
 5759              	.LBB529:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5760              		.loc 2 1072 4 discriminator 1
 5761 0412 BB6B     		ldr	r3, [r7, #56]
 5762              		.syntax unified
 5763              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5764 0414 53E8003F 		ldrex r3, [r3]
 5765              	@ 0 "" 2
 5766              		.thumb
 5767              		.syntax unified
 5768 0418 7B63     		str	r3, [r7, #52]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5769              		.loc 2 1073 10 discriminator 1
 5770 041a 7B6B     		ldr	r3, [r7, #52]
 5771              	.LBE529:
 5772              	.LBE528:
 5773              		.loc 1 2541 9 discriminator 1
 5774 041c 23F49073 		bic	r3, r3, #288
 5775 0420 C7F8C830 		str	r3, [r7, #200]
 5776 0424 7B68     		ldr	r3, [r7, #4]
 5777 0426 1B68     		ldr	r3, [r3]
 5778 0428 0C33     		adds	r3, r3, #12
ARM GAS  /tmp/cc17XZfc.s 			page 168


 5779 042a D7F8C820 		ldr	r2, [r7, #200]
 5780 042e 7A64     		str	r2, [r7, #68]
 5781 0430 3B64     		str	r3, [r7, #64]
 5782              	.LBB530:
 5783              	.LBB531:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5784              		.loc 2 1123 4 discriminator 1
 5785 0432 396C     		ldr	r1, [r7, #64]
 5786 0434 7A6C     		ldr	r2, [r7, #68]
 5787              		.syntax unified
 5788              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5789 0436 41E80023 		strex r3, r2, [r1]
 5790              	@ 0 "" 2
 5791              		.thumb
 5792              		.syntax unified
 5793 043a FB63     		str	r3, [r7, #60]
 5794              		.loc 2 1124 10 discriminator 1
 5795 043c FB6B     		ldr	r3, [r7, #60]
 5796              	.LBE531:
 5797              	.LBE530:
 5798              		.loc 1 2541 9 discriminator 1
 5799 043e 002B     		cmp	r3, #0
 5800 0440 E3D1     		bne	.L305
 5801              	.L308:
 5802              	.LBE527:
 5803              	.LBB532:
2542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
2544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5804              		.loc 1 2544 9 discriminator 1
 5805 0442 7B68     		ldr	r3, [r7, #4]
 5806 0444 1B68     		ldr	r3, [r3]
 5807 0446 1433     		adds	r3, r3, #20
 5808 0448 7B62     		str	r3, [r7, #36]
 5809              	.LBB533:
 5810              	.LBB534:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5811              		.loc 2 1072 4 discriminator 1
 5812 044a 7B6A     		ldr	r3, [r7, #36]
 5813              		.syntax unified
 5814              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5815 044c 53E8003F 		ldrex r3, [r3]
 5816              	@ 0 "" 2
 5817              		.thumb
 5818              		.syntax unified
 5819 0450 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5820              		.loc 2 1073 10 discriminator 1
 5821 0452 3B6A     		ldr	r3, [r7, #32]
 5822              	.LBE534:
 5823              	.LBE533:
 5824              		.loc 1 2544 9 discriminator 1
 5825 0454 23F00103 		bic	r3, r3, #1
 5826 0458 C7F8C430 		str	r3, [r7, #196]
 5827 045c 7B68     		ldr	r3, [r7, #4]
 5828 045e 1B68     		ldr	r3, [r3]
 5829 0460 1433     		adds	r3, r3, #20
ARM GAS  /tmp/cc17XZfc.s 			page 169


 5830 0462 D7F8C420 		ldr	r2, [r7, #196]
 5831 0466 3A63     		str	r2, [r7, #48]
 5832 0468 FB62     		str	r3, [r7, #44]
 5833              	.LBB535:
 5834              	.LBB536:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5835              		.loc 2 1123 4 discriminator 1
 5836 046a F96A     		ldr	r1, [r7, #44]
 5837 046c 3A6B     		ldr	r2, [r7, #48]
 5838              		.syntax unified
 5839              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5840 046e 41E80023 		strex r3, r2, [r1]
 5841              	@ 0 "" 2
 5842              		.thumb
 5843              		.syntax unified
 5844 0472 BB62     		str	r3, [r7, #40]
 5845              		.loc 2 1124 10 discriminator 1
 5846 0474 BB6A     		ldr	r3, [r7, #40]
 5847              	.LBE536:
 5848              	.LBE535:
 5849              		.loc 1 2544 9 discriminator 1
 5850 0476 002B     		cmp	r3, #0
 5851 0478 E3D1     		bne	.L308
 5852              	.LBE532:
2545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Rx process is completed, restore huart->RxState to Ready */
2547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 5853              		.loc 1 2547 24
 5854 047a 7B68     		ldr	r3, [r7, #4]
 5855 047c 2022     		movs	r2, #32
 5856 047e 83F84220 		strb	r2, [r3, #66]
2548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 5857              		.loc 1 2548 30
 5858 0482 7B68     		ldr	r3, [r7, #4]
 5859 0484 0022     		movs	r2, #0
 5860 0486 1A63     		str	r2, [r3, #48]
 5861              	.L311:
 5862              	.LBB537:
2549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 5863              		.loc 1 2550 9 discriminator 1
 5864 0488 7B68     		ldr	r3, [r7, #4]
 5865 048a 1B68     		ldr	r3, [r3]
 5866 048c 0C33     		adds	r3, r3, #12
 5867 048e 3B61     		str	r3, [r7, #16]
 5868              	.LBB538:
 5869              	.LBB539:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5870              		.loc 2 1072 4 discriminator 1
 5871 0490 3B69     		ldr	r3, [r7, #16]
 5872              		.syntax unified
 5873              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5874 0492 53E8003F 		ldrex r3, [r3]
 5875              	@ 0 "" 2
 5876              		.thumb
 5877              		.syntax unified
 5878 0496 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/cc17XZfc.s 			page 170


1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5879              		.loc 2 1073 10 discriminator 1
 5880 0498 FB68     		ldr	r3, [r7, #12]
 5881              	.LBE539:
 5882              	.LBE538:
 5883              		.loc 1 2550 9 discriminator 1
 5884 049a 23F01003 		bic	r3, r3, #16
 5885 049e C7F8C030 		str	r3, [r7, #192]
 5886 04a2 7B68     		ldr	r3, [r7, #4]
 5887 04a4 1B68     		ldr	r3, [r3]
 5888 04a6 0C33     		adds	r3, r3, #12
 5889 04a8 D7F8C020 		ldr	r2, [r7, #192]
 5890 04ac FA61     		str	r2, [r7, #28]
 5891 04ae BB61     		str	r3, [r7, #24]
 5892              	.LBB540:
 5893              	.LBB541:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 5894              		.loc 2 1123 4 discriminator 1
 5895 04b0 B969     		ldr	r1, [r7, #24]
 5896 04b2 FA69     		ldr	r2, [r7, #28]
 5897              		.syntax unified
 5898              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5899 04b4 41E80023 		strex r3, r2, [r1]
 5900              	@ 0 "" 2
 5901              		.thumb
 5902              		.syntax unified
 5903 04b8 7B61     		str	r3, [r7, #20]
 5904              		.loc 2 1124 10 discriminator 1
 5905 04ba 7B69     		ldr	r3, [r7, #20]
 5906              	.LBE541:
 5907              	.LBE540:
 5908              		.loc 1 2550 9 discriminator 1
 5909 04bc 002B     		cmp	r3, #0
 5910 04be E3D1     		bne	.L311
 5911              	.LBE537:
2551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Initialize type of RxEvent that correspond to RxEvent callback execution;
2553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            In this case, Rx Event type is Idle Event */
2554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 5912              		.loc 1 2554 28
 5913 04c0 7B68     		ldr	r3, [r7, #4]
 5914 04c2 0222     		movs	r2, #2
 5915 04c4 5A63     		str	r2, [r3, #52]
2555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx complete callback*/
2558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, nb_rx_data);
2559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
2560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 5916              		.loc 1 2561 9
 5917 04c6 B7F8CE30 		ldrh	r3, [r7, #206]
 5918 04ca 1946     		mov	r1, r3
 5919 04cc 7868     		ldr	r0, [r7, #4]
 5920 04ce FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
2562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
ARM GAS  /tmp/cc17XZfc.s 			page 171


2564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
 5921              		.loc 1 2564 7
 5922 04d2 23E0     		b	.L316
 5923              	.L286:
 5924              	.LBE526:
2565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
2566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
2569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 5925              		.loc 1 2569 18
 5926 04d4 D7F8E430 		ldr	r3, [r7, #228]
 5927 04d8 03F08003 		and	r3, r3, #128
 5928              		.loc 1 2569 6
 5929 04dc 002B     		cmp	r3, #0
 5930 04de 09D0     		beq	.L312
 5931              		.loc 1 2569 56 discriminator 1
 5932 04e0 D7F8E030 		ldr	r3, [r7, #224]
 5933 04e4 03F08003 		and	r3, r3, #128
 5934              		.loc 1 2569 44 discriminator 1
 5935 04e8 002B     		cmp	r3, #0
 5936 04ea 03D0     		beq	.L312
2570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_Transmit_IT(huart);
 5937              		.loc 1 2571 5
 5938 04ec 7868     		ldr	r0, [r7, #4]
 5939 04ee FFF7FEFF 		bl	UART_Transmit_IT
2572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 5940              		.loc 1 2572 5
 5941 04f2 14E0     		b	.L266
 5942              	.L312:
2573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* UART in mode Transmitter end --------------------------------------------*/
2576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 5943              		.loc 1 2576 18
 5944 04f4 D7F8E430 		ldr	r3, [r7, #228]
 5945 04f8 03F04003 		and	r3, r3, #64
 5946              		.loc 1 2576 6
 5947 04fc 002B     		cmp	r3, #0
 5948 04fe 0ED0     		beq	.L266
 5949              		.loc 1 2576 55 discriminator 1
 5950 0500 D7F8E030 		ldr	r3, [r7, #224]
 5951 0504 03F04003 		and	r3, r3, #64
 5952              		.loc 1 2576 43 discriminator 1
 5953 0508 002B     		cmp	r3, #0
 5954 050a 08D0     		beq	.L266
2577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
 5955              		.loc 1 2578 5
 5956 050c 7868     		ldr	r0, [r7, #4]
 5957 050e FFF7FEFF 		bl	UART_EndTransmit_IT
2579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return;
 5958              		.loc 1 2579 5
 5959 0512 04E0     		b	.L266
 5960              	.L313:
2471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   } /* End if some error occurs */
ARM GAS  /tmp/cc17XZfc.s 			page 172


 5961              		.loc 1 2471 5
 5962 0514 00BF     		nop
 5963 0516 02E0     		b	.L266
 5964              	.L315:
 5965              	.LBB542:
2529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 5966              		.loc 1 2529 7
 5967 0518 00BF     		nop
 5968 051a 00E0     		b	.L266
 5969              	.L316:
 5970              	.LBE542:
 5971              	.LBB543:
2564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 5972              		.loc 1 2564 7
 5973 051c 00BF     		nop
 5974              	.L266:
 5975              	.LBE543:
2580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
2581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 5976              		.loc 1 2581 1
 5977 051e E837     		adds	r7, r7, #232
 5978              	.LCFI139:
 5979              		.cfi_def_cfa_offset 8
 5980 0520 BD46     		mov	sp, r7
 5981              	.LCFI140:
 5982              		.cfi_def_cfa_register 13
 5983              		@ sp needed
 5984 0522 80BD     		pop	{r7, pc}
 5985              		.cfi_endproc
 5986              	.LFE91:
 5988              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 5989              		.align	1
 5990              		.weak	HAL_UART_TxCpltCallback
 5991              		.syntax unified
 5992              		.thumb
 5993              		.thumb_func
 5995              	HAL_UART_TxCpltCallback:
 5996              	.LFB92:
2582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Tx Transfer completed callbacks.
2585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 5997              		.loc 1 2590 1
 5998              		.cfi_startproc
 5999              		@ args = 0, pretend = 0, frame = 8
 6000              		@ frame_needed = 1, uses_anonymous_args = 0
 6001              		@ link register save eliminated.
 6002 0000 80B4     		push	{r7}
 6003              	.LCFI141:
 6004              		.cfi_def_cfa_offset 4
 6005              		.cfi_offset 7, -4
 6006 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/cc17XZfc.s 			page 173


 6007              	.LCFI142:
 6008              		.cfi_def_cfa_offset 16
 6009 0004 00AF     		add	r7, sp, #0
 6010              	.LCFI143:
 6011              		.cfi_def_cfa_register 7
 6012 0006 7860     		str	r0, [r7, #4]
2591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
2595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6013              		.loc 1 2596 1
 6014 0008 00BF     		nop
 6015 000a 0C37     		adds	r7, r7, #12
 6016              	.LCFI144:
 6017              		.cfi_def_cfa_offset 4
 6018 000c BD46     		mov	sp, r7
 6019              	.LCFI145:
 6020              		.cfi_def_cfa_register 13
 6021              		@ sp needed
 6022 000e 80BC     		pop	{r7}
 6023              	.LCFI146:
 6024              		.cfi_restore 7
 6025              		.cfi_def_cfa_offset 0
 6026 0010 7047     		bx	lr
 6027              		.cfi_endproc
 6028              	.LFE92:
 6030              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 6031              		.align	1
 6032              		.weak	HAL_UART_TxHalfCpltCallback
 6033              		.syntax unified
 6034              		.thumb
 6035              		.thumb_func
 6037              	HAL_UART_TxHalfCpltCallback:
 6038              	.LFB93:
2597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callbacks.
2600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
2605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6039              		.loc 1 2605 1
 6040              		.cfi_startproc
 6041              		@ args = 0, pretend = 0, frame = 8
 6042              		@ frame_needed = 1, uses_anonymous_args = 0
 6043              		@ link register save eliminated.
 6044 0000 80B4     		push	{r7}
 6045              	.LCFI147:
 6046              		.cfi_def_cfa_offset 4
 6047              		.cfi_offset 7, -4
 6048 0002 83B0     		sub	sp, sp, #12
 6049              	.LCFI148:
 6050              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cc17XZfc.s 			page 174


 6051 0004 00AF     		add	r7, sp, #0
 6052              	.LCFI149:
 6053              		.cfi_def_cfa_register 7
 6054 0006 7860     		str	r0, [r7, #4]
2606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback could be implemented in the user file
2610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6055              		.loc 1 2611 1
 6056 0008 00BF     		nop
 6057 000a 0C37     		adds	r7, r7, #12
 6058              	.LCFI150:
 6059              		.cfi_def_cfa_offset 4
 6060 000c BD46     		mov	sp, r7
 6061              	.LCFI151:
 6062              		.cfi_def_cfa_register 13
 6063              		@ sp needed
 6064 000e 80BC     		pop	{r7}
 6065              	.LCFI152:
 6066              		.cfi_restore 7
 6067              		.cfi_def_cfa_offset 0
 6068 0010 7047     		bx	lr
 6069              		.cfi_endproc
 6070              	.LFE93:
 6072              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 6073              		.align	1
 6074              		.weak	HAL_UART_RxCpltCallback
 6075              		.syntax unified
 6076              		.thumb
 6077              		.thumb_func
 6079              	HAL_UART_RxCpltCallback:
 6080              	.LFB94:
2612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Rx Transfer completed callbacks.
2615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6081              		.loc 1 2620 1
 6082              		.cfi_startproc
 6083              		@ args = 0, pretend = 0, frame = 8
 6084              		@ frame_needed = 1, uses_anonymous_args = 0
 6085              		@ link register save eliminated.
 6086 0000 80B4     		push	{r7}
 6087              	.LCFI153:
 6088              		.cfi_def_cfa_offset 4
 6089              		.cfi_offset 7, -4
 6090 0002 83B0     		sub	sp, sp, #12
 6091              	.LCFI154:
 6092              		.cfi_def_cfa_offset 16
 6093 0004 00AF     		add	r7, sp, #0
 6094              	.LCFI155:
ARM GAS  /tmp/cc17XZfc.s 			page 175


 6095              		.cfi_def_cfa_register 7
 6096 0006 7860     		str	r0, [r7, #4]
2621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxCpltCallback could be implemented in the user file
2625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6097              		.loc 1 2626 1
 6098 0008 00BF     		nop
 6099 000a 0C37     		adds	r7, r7, #12
 6100              	.LCFI156:
 6101              		.cfi_def_cfa_offset 4
 6102 000c BD46     		mov	sp, r7
 6103              	.LCFI157:
 6104              		.cfi_def_cfa_register 13
 6105              		@ sp needed
 6106 000e 80BC     		pop	{r7}
 6107              	.LCFI158:
 6108              		.cfi_restore 7
 6109              		.cfi_def_cfa_offset 0
 6110 0010 7047     		bx	lr
 6111              		.cfi_endproc
 6112              	.LFE94:
 6114              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 6115              		.align	1
 6116              		.weak	HAL_UART_RxHalfCpltCallback
 6117              		.syntax unified
 6118              		.thumb
 6119              		.thumb_func
 6121              	HAL_UART_RxHalfCpltCallback:
 6122              	.LFB95:
2627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callbacks.
2630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6123              		.loc 1 2635 1
 6124              		.cfi_startproc
 6125              		@ args = 0, pretend = 0, frame = 8
 6126              		@ frame_needed = 1, uses_anonymous_args = 0
 6127              		@ link register save eliminated.
 6128 0000 80B4     		push	{r7}
 6129              	.LCFI159:
 6130              		.cfi_def_cfa_offset 4
 6131              		.cfi_offset 7, -4
 6132 0002 83B0     		sub	sp, sp, #12
 6133              	.LCFI160:
 6134              		.cfi_def_cfa_offset 16
 6135 0004 00AF     		add	r7, sp, #0
 6136              	.LCFI161:
 6137              		.cfi_def_cfa_register 7
 6138 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cc17XZfc.s 			page 176


2636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback could be implemented in the user file
2640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6139              		.loc 1 2641 1
 6140 0008 00BF     		nop
 6141 000a 0C37     		adds	r7, r7, #12
 6142              	.LCFI162:
 6143              		.cfi_def_cfa_offset 4
 6144 000c BD46     		mov	sp, r7
 6145              	.LCFI163:
 6146              		.cfi_def_cfa_register 13
 6147              		@ sp needed
 6148 000e 80BC     		pop	{r7}
 6149              	.LCFI164:
 6150              		.cfi_restore 7
 6151              		.cfi_def_cfa_offset 0
 6152 0010 7047     		bx	lr
 6153              		.cfi_endproc
 6154              	.LFE95:
 6156              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 6157              		.align	1
 6158              		.weak	HAL_UART_ErrorCallback
 6159              		.syntax unified
 6160              		.thumb
 6161              		.thumb_func
 6163              	HAL_UART_ErrorCallback:
 6164              	.LFB96:
2642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART error callbacks.
2645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
2650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6165              		.loc 1 2650 1
 6166              		.cfi_startproc
 6167              		@ args = 0, pretend = 0, frame = 8
 6168              		@ frame_needed = 1, uses_anonymous_args = 0
 6169              		@ link register save eliminated.
 6170 0000 80B4     		push	{r7}
 6171              	.LCFI165:
 6172              		.cfi_def_cfa_offset 4
 6173              		.cfi_offset 7, -4
 6174 0002 83B0     		sub	sp, sp, #12
 6175              	.LCFI166:
 6176              		.cfi_def_cfa_offset 16
 6177 0004 00AF     		add	r7, sp, #0
 6178              	.LCFI167:
 6179              		.cfi_def_cfa_register 7
 6180 0006 7860     		str	r0, [r7, #4]
2651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
ARM GAS  /tmp/cc17XZfc.s 			page 177


2653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****            the HAL_UART_ErrorCallback could be implemented in the user file
2655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6181              		.loc 1 2656 1
 6182 0008 00BF     		nop
 6183 000a 0C37     		adds	r7, r7, #12
 6184              	.LCFI168:
 6185              		.cfi_def_cfa_offset 4
 6186 000c BD46     		mov	sp, r7
 6187              	.LCFI169:
 6188              		.cfi_def_cfa_register 13
 6189              		@ sp needed
 6190 000e 80BC     		pop	{r7}
 6191              	.LCFI170:
 6192              		.cfi_restore 7
 6193              		.cfi_def_cfa_offset 0
 6194 0010 7047     		bx	lr
 6195              		.cfi_endproc
 6196              	.LFE96:
 6198              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 6199              		.align	1
 6200              		.weak	HAL_UART_AbortCpltCallback
 6201              		.syntax unified
 6202              		.thumb
 6203              		.thumb_func
 6205              	HAL_UART_AbortCpltCallback:
 6206              	.LFB97:
2657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
2664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6207              		.loc 1 2664 1
 6208              		.cfi_startproc
 6209              		@ args = 0, pretend = 0, frame = 8
 6210              		@ frame_needed = 1, uses_anonymous_args = 0
 6211              		@ link register save eliminated.
 6212 0000 80B4     		push	{r7}
 6213              	.LCFI171:
 6214              		.cfi_def_cfa_offset 4
 6215              		.cfi_offset 7, -4
 6216 0002 83B0     		sub	sp, sp, #12
 6217              	.LCFI172:
 6218              		.cfi_def_cfa_offset 16
 6219 0004 00AF     		add	r7, sp, #0
 6220              	.LCFI173:
 6221              		.cfi_def_cfa_register 7
 6222 0006 7860     		str	r0, [r7, #4]
2665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
ARM GAS  /tmp/cc17XZfc.s 			page 178


2670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6223              		.loc 1 2671 1
 6224 0008 00BF     		nop
 6225 000a 0C37     		adds	r7, r7, #12
 6226              	.LCFI174:
 6227              		.cfi_def_cfa_offset 4
 6228 000c BD46     		mov	sp, r7
 6229              	.LCFI175:
 6230              		.cfi_def_cfa_register 13
 6231              		@ sp needed
 6232 000e 80BC     		pop	{r7}
 6233              	.LCFI176:
 6234              		.cfi_restore 7
 6235              		.cfi_def_cfa_offset 0
 6236 0010 7047     		bx	lr
 6237              		.cfi_endproc
 6238              	.LFE97:
 6240              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 6241              		.align	1
 6242              		.weak	HAL_UART_AbortTransmitCpltCallback
 6243              		.syntax unified
 6244              		.thumb
 6245              		.thumb_func
 6247              	HAL_UART_AbortTransmitCpltCallback:
 6248              	.LFB98:
2672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6249              		.loc 1 2679 1
 6250              		.cfi_startproc
 6251              		@ args = 0, pretend = 0, frame = 8
 6252              		@ frame_needed = 1, uses_anonymous_args = 0
 6253              		@ link register save eliminated.
 6254 0000 80B4     		push	{r7}
 6255              	.LCFI177:
 6256              		.cfi_def_cfa_offset 4
 6257              		.cfi_offset 7, -4
 6258 0002 83B0     		sub	sp, sp, #12
 6259              	.LCFI178:
 6260              		.cfi_def_cfa_offset 16
 6261 0004 00AF     		add	r7, sp, #0
 6262              	.LCFI179:
 6263              		.cfi_def_cfa_register 7
 6264 0006 7860     		str	r0, [r7, #4]
2680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
ARM GAS  /tmp/cc17XZfc.s 			page 179


 6265              		.loc 1 2686 1
 6266 0008 00BF     		nop
 6267 000a 0C37     		adds	r7, r7, #12
 6268              	.LCFI180:
 6269              		.cfi_def_cfa_offset 4
 6270 000c BD46     		mov	sp, r7
 6271              	.LCFI181:
 6272              		.cfi_def_cfa_register 13
 6273              		@ sp needed
 6274 000e 80BC     		pop	{r7}
 6275              	.LCFI182:
 6276              		.cfi_restore 7
 6277              		.cfi_def_cfa_offset 0
 6278 0010 7047     		bx	lr
 6279              		.cfi_endproc
 6280              	.LFE98:
 6282              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 6283              		.align	1
 6284              		.weak	HAL_UART_AbortReceiveCpltCallback
 6285              		.syntax unified
 6286              		.thumb
 6287              		.thumb_func
 6289              	HAL_UART_AbortReceiveCpltCallback:
 6290              	.LFB99:
2687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
2690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6291              		.loc 1 2694 1
 6292              		.cfi_startproc
 6293              		@ args = 0, pretend = 0, frame = 8
 6294              		@ frame_needed = 1, uses_anonymous_args = 0
 6295              		@ link register save eliminated.
 6296 0000 80B4     		push	{r7}
 6297              	.LCFI183:
 6298              		.cfi_def_cfa_offset 4
 6299              		.cfi_offset 7, -4
 6300 0002 83B0     		sub	sp, sp, #12
 6301              	.LCFI184:
 6302              		.cfi_def_cfa_offset 16
 6303 0004 00AF     		add	r7, sp, #0
 6304              	.LCFI185:
 6305              		.cfi_def_cfa_register 7
 6306 0006 7860     		str	r0, [r7, #4]
2695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
2701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6307              		.loc 1 2701 1
 6308 0008 00BF     		nop
ARM GAS  /tmp/cc17XZfc.s 			page 180


 6309 000a 0C37     		adds	r7, r7, #12
 6310              	.LCFI186:
 6311              		.cfi_def_cfa_offset 4
 6312 000c BD46     		mov	sp, r7
 6313              	.LCFI187:
 6314              		.cfi_def_cfa_register 13
 6315              		@ sp needed
 6316 000e 80BC     		pop	{r7}
 6317              	.LCFI188:
 6318              		.cfi_restore 7
 6319              		.cfi_def_cfa_offset 0
 6320 0010 7047     		bx	lr
 6321              		.cfi_endproc
 6322              	.LFE99:
 6324              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 6325              		.align	1
 6326              		.weak	HAL_UARTEx_RxEventCallback
 6327              		.syntax unified
 6328              		.thumb
 6329              		.thumb_func
 6331              	HAL_UARTEx_RxEventCallback:
 6332              	.LFB100:
2702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Reception Event Callback (Rx event notification called after use of advanced reception 
2705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle
2706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Number of data available in application reception buffer (indicates a position in
2707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               reception buffer until which, data are available)
2708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** __weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
2711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6333              		.loc 1 2711 1
 6334              		.cfi_startproc
 6335              		@ args = 0, pretend = 0, frame = 8
 6336              		@ frame_needed = 1, uses_anonymous_args = 0
 6337              		@ link register save eliminated.
 6338 0000 80B4     		push	{r7}
 6339              	.LCFI189:
 6340              		.cfi_def_cfa_offset 4
 6341              		.cfi_offset 7, -4
 6342 0002 83B0     		sub	sp, sp, #12
 6343              	.LCFI190:
 6344              		.cfi_def_cfa_offset 16
 6345 0004 00AF     		add	r7, sp, #0
 6346              	.LCFI191:
 6347              		.cfi_def_cfa_register 7
 6348 0006 7860     		str	r0, [r7, #4]
 6349 0008 0B46     		mov	r3, r1
 6350 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(huart);
2714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UNUSED(Size);
2715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****             the HAL_UARTEx_RxEventCallback can be implemented in the user file.
2718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    */
ARM GAS  /tmp/cc17XZfc.s 			page 181


2719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6351              		.loc 1 2719 1
 6352 000c 00BF     		nop
 6353 000e 0C37     		adds	r7, r7, #12
 6354              	.LCFI192:
 6355              		.cfi_def_cfa_offset 4
 6356 0010 BD46     		mov	sp, r7
 6357              	.LCFI193:
 6358              		.cfi_def_cfa_register 13
 6359              		@ sp needed
 6360 0012 80BC     		pop	{r7}
 6361              	.LCFI194:
 6362              		.cfi_restore 7
 6363              		.cfi_def_cfa_offset 0
 6364 0014 7047     		bx	lr
 6365              		.cfi_endproc
 6366              	.LFE100:
 6368              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 6369              		.align	1
 6370              		.global	HAL_LIN_SendBreak
 6371              		.syntax unified
 6372              		.thumb
 6373              		.thumb_func
 6375              	HAL_LIN_SendBreak:
 6376              	.LFB101:
2720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief   UART control functions
2727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
2728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
2729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   [..]
2733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART:
2734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_LIN_SendBreak() API can be helpful to transmit the break character.
2735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_EnterMuteMode() API can be helpful to enter the UART in mute mode.
2736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_MultiProcessor_ExitMuteMode() API can be helpful to exit the UART mute mode by software
2737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableTransmitter() API to enable the UART transmitter and disables the UART
2738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableReceiver() API to enable the UART receiver and disables the UART trans
2739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
2741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Transmits break characters.
2746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
ARM GAS  /tmp/cc17XZfc.s 			page 182


 6377              		.loc 1 2751 1
 6378              		.cfi_startproc
 6379              		@ args = 0, pretend = 0, frame = 32
 6380              		@ frame_needed = 1, uses_anonymous_args = 0
 6381              		@ link register save eliminated.
 6382 0000 80B4     		push	{r7}
 6383              	.LCFI195:
 6384              		.cfi_def_cfa_offset 4
 6385              		.cfi_offset 7, -4
 6386 0002 89B0     		sub	sp, sp, #36
 6387              	.LCFI196:
 6388              		.cfi_def_cfa_offset 40
 6389 0004 00AF     		add	r7, sp, #0
 6390              	.LCFI197:
 6391              		.cfi_def_cfa_register 7
 6392 0006 7860     		str	r0, [r7, #4]
2752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 6393              		.loc 1 2756 3
 6394 0008 7B68     		ldr	r3, [r7, #4]
 6395 000a 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 6396 000e 012B     		cmp	r3, #1
 6397 0010 01D1     		bne	.L329
 6398              		.loc 1 2756 3 is_stmt 0 discriminator 1
 6399 0012 0223     		movs	r3, #2
 6400 0014 2AE0     		b	.L330
 6401              	.L329:
 6402              		.loc 1 2756 3 discriminator 2
 6403 0016 7B68     		ldr	r3, [r7, #4]
 6404 0018 0122     		movs	r2, #1
 6405 001a 83F84020 		strb	r2, [r3, #64]
2757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 6406              		.loc 1 2758 17 is_stmt 1 discriminator 2
 6407 001e 7B68     		ldr	r3, [r7, #4]
 6408 0020 2422     		movs	r2, #36
 6409 0022 83F84120 		strb	r2, [r3, #65]
 6410              	.L333:
 6411              	.LBB544:
2759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Send break characters */
2761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 6412              		.loc 1 2761 3 discriminator 1
 6413 0026 7B68     		ldr	r3, [r7, #4]
 6414 0028 1B68     		ldr	r3, [r3]
 6415 002a 0C33     		adds	r3, r3, #12
 6416 002c FB60     		str	r3, [r7, #12]
 6417              	.LBB545:
 6418              	.LBB546:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6419              		.loc 2 1072 4 discriminator 1
 6420 002e FB68     		ldr	r3, [r7, #12]
 6421              		.syntax unified
 6422              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cc17XZfc.s 			page 183


 6423 0030 53E8003F 		ldrex r3, [r3]
 6424              	@ 0 "" 2
 6425              		.thumb
 6426              		.syntax unified
 6427 0034 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6428              		.loc 2 1073 10 discriminator 1
 6429 0036 BB68     		ldr	r3, [r7, #8]
 6430              	.LBE546:
 6431              	.LBE545:
 6432              		.loc 1 2761 3 discriminator 1
 6433 0038 43F00103 		orr	r3, r3, #1
 6434 003c FB61     		str	r3, [r7, #28]
 6435 003e 7B68     		ldr	r3, [r7, #4]
 6436 0040 1B68     		ldr	r3, [r3]
 6437 0042 0C33     		adds	r3, r3, #12
 6438 0044 FA69     		ldr	r2, [r7, #28]
 6439 0046 BA61     		str	r2, [r7, #24]
 6440 0048 7B61     		str	r3, [r7, #20]
 6441              	.LBB547:
 6442              	.LBB548:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6443              		.loc 2 1123 4 discriminator 1
 6444 004a 7969     		ldr	r1, [r7, #20]
 6445 004c BA69     		ldr	r2, [r7, #24]
 6446              		.syntax unified
 6447              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6448 004e 41E80023 		strex r3, r2, [r1]
 6449              	@ 0 "" 2
 6450              		.thumb
 6451              		.syntax unified
 6452 0052 3B61     		str	r3, [r7, #16]
 6453              		.loc 2 1124 10 discriminator 1
 6454 0054 3B69     		ldr	r3, [r7, #16]
 6455              	.LBE548:
 6456              	.LBE547:
 6457              		.loc 1 2761 3 discriminator 1
 6458 0056 002B     		cmp	r3, #0
 6459 0058 E5D1     		bne	.L333
 6460              	.LBE544:
2762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6461              		.loc 1 2763 17
 6462 005a 7B68     		ldr	r3, [r7, #4]
 6463 005c 2022     		movs	r2, #32
 6464 005e 83F84120 		strb	r2, [r3, #65]
2764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 6465              		.loc 1 2766 3
 6466 0062 7B68     		ldr	r3, [r7, #4]
 6467 0064 0022     		movs	r2, #0
 6468 0066 83F84020 		strb	r2, [r3, #64]
2767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 6469              		.loc 1 2768 10
 6470 006a 0023     		movs	r3, #0
ARM GAS  /tmp/cc17XZfc.s 			page 184


 6471              	.L330:
2769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6472              		.loc 1 2769 1
 6473 006c 1846     		mov	r0, r3
 6474 006e 2437     		adds	r7, r7, #36
 6475              	.LCFI198:
 6476              		.cfi_def_cfa_offset 4
 6477 0070 BD46     		mov	sp, r7
 6478              	.LCFI199:
 6479              		.cfi_def_cfa_register 13
 6480              		@ sp needed
 6481 0072 80BC     		pop	{r7}
 6482              	.LCFI200:
 6483              		.cfi_restore 7
 6484              		.cfi_def_cfa_offset 0
 6485 0074 7047     		bx	lr
 6486              		.cfi_endproc
 6487              	.LFE101:
 6489              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 6490              		.align	1
 6491              		.global	HAL_MultiProcessor_EnterMuteMode
 6492              		.syntax unified
 6493              		.thumb
 6494              		.thumb_func
 6496              	HAL_MultiProcessor_EnterMuteMode:
 6497              	.LFB102:
2770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enters the UART in mute mode.
2773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6498              		.loc 1 2778 1
 6499              		.cfi_startproc
 6500              		@ args = 0, pretend = 0, frame = 32
 6501              		@ frame_needed = 1, uses_anonymous_args = 0
 6502              		@ link register save eliminated.
 6503 0000 80B4     		push	{r7}
 6504              	.LCFI201:
 6505              		.cfi_def_cfa_offset 4
 6506              		.cfi_offset 7, -4
 6507 0002 89B0     		sub	sp, sp, #36
 6508              	.LCFI202:
 6509              		.cfi_def_cfa_offset 40
 6510 0004 00AF     		add	r7, sp, #0
 6511              	.LCFI203:
 6512              		.cfi_def_cfa_register 7
 6513 0006 7860     		str	r0, [r7, #4]
2779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 6514              		.loc 1 2783 3
ARM GAS  /tmp/cc17XZfc.s 			page 185


 6515 0008 7B68     		ldr	r3, [r7, #4]
 6516 000a 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 6517 000e 012B     		cmp	r3, #1
 6518 0010 01D1     		bne	.L335
 6519              		.loc 1 2783 3 is_stmt 0 discriminator 1
 6520 0012 0223     		movs	r3, #2
 6521 0014 2DE0     		b	.L336
 6522              	.L335:
 6523              		.loc 1 2783 3 discriminator 2
 6524 0016 7B68     		ldr	r3, [r7, #4]
 6525 0018 0122     		movs	r2, #1
 6526 001a 83F84020 		strb	r2, [r3, #64]
2784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 6527              		.loc 1 2785 17 is_stmt 1 discriminator 2
 6528 001e 7B68     		ldr	r3, [r7, #4]
 6529 0020 2422     		movs	r2, #36
 6530 0022 83F84120 		strb	r2, [r3, #65]
 6531              	.L339:
 6532              	.LBB549:
2786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
2788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 6533              		.loc 1 2788 3 discriminator 1
 6534 0026 7B68     		ldr	r3, [r7, #4]
 6535 0028 1B68     		ldr	r3, [r3]
 6536 002a 0C33     		adds	r3, r3, #12
 6537 002c FB60     		str	r3, [r7, #12]
 6538              	.LBB550:
 6539              	.LBB551:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6540              		.loc 2 1072 4 discriminator 1
 6541 002e FB68     		ldr	r3, [r7, #12]
 6542              		.syntax unified
 6543              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6544 0030 53E8003F 		ldrex r3, [r3]
 6545              	@ 0 "" 2
 6546              		.thumb
 6547              		.syntax unified
 6548 0034 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6549              		.loc 2 1073 10 discriminator 1
 6550 0036 BB68     		ldr	r3, [r7, #8]
 6551              	.LBE551:
 6552              	.LBE550:
 6553              		.loc 1 2788 3 discriminator 1
 6554 0038 43F00203 		orr	r3, r3, #2
 6555 003c FB61     		str	r3, [r7, #28]
 6556 003e 7B68     		ldr	r3, [r7, #4]
 6557 0040 1B68     		ldr	r3, [r3]
 6558 0042 0C33     		adds	r3, r3, #12
 6559 0044 FA69     		ldr	r2, [r7, #28]
 6560 0046 BA61     		str	r2, [r7, #24]
 6561 0048 7B61     		str	r3, [r7, #20]
 6562              	.LBB552:
 6563              	.LBB553:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/cc17XZfc.s 			page 186


 6564              		.loc 2 1123 4 discriminator 1
 6565 004a 7969     		ldr	r1, [r7, #20]
 6566 004c BA69     		ldr	r2, [r7, #24]
 6567              		.syntax unified
 6568              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6569 004e 41E80023 		strex r3, r2, [r1]
 6570              	@ 0 "" 2
 6571              		.thumb
 6572              		.syntax unified
 6573 0052 3B61     		str	r3, [r7, #16]
 6574              		.loc 2 1124 10 discriminator 1
 6575 0054 3B69     		ldr	r3, [r7, #16]
 6576              	.LBE553:
 6577              	.LBE552:
 6578              		.loc 1 2788 3 discriminator 1
 6579 0056 002B     		cmp	r3, #0
 6580 0058 E5D1     		bne	.L339
 6581              	.LBE549:
2789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6582              		.loc 1 2790 17
 6583 005a 7B68     		ldr	r3, [r7, #4]
 6584 005c 2022     		movs	r2, #32
 6585 005e 83F84120 		strb	r2, [r3, #65]
2791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 6586              		.loc 1 2791 22
 6587 0062 7B68     		ldr	r3, [r7, #4]
 6588 0064 0022     		movs	r2, #0
 6589 0066 5A63     		str	r2, [r3, #52]
2792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 6590              		.loc 1 2794 3
 6591 0068 7B68     		ldr	r3, [r7, #4]
 6592 006a 0022     		movs	r2, #0
 6593 006c 83F84020 		strb	r2, [r3, #64]
2795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 6594              		.loc 1 2796 10
 6595 0070 0023     		movs	r3, #0
 6596              	.L336:
2797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6597              		.loc 1 2797 1
 6598 0072 1846     		mov	r0, r3
 6599 0074 2437     		adds	r7, r7, #36
 6600              	.LCFI204:
 6601              		.cfi_def_cfa_offset 4
 6602 0076 BD46     		mov	sp, r7
 6603              	.LCFI205:
 6604              		.cfi_def_cfa_register 13
 6605              		@ sp needed
 6606 0078 80BC     		pop	{r7}
 6607              	.LCFI206:
 6608              		.cfi_restore 7
 6609              		.cfi_def_cfa_offset 0
 6610 007a 7047     		bx	lr
 6611              		.cfi_endproc
ARM GAS  /tmp/cc17XZfc.s 			page 187


 6612              	.LFE102:
 6614              		.section	.text.HAL_MultiProcessor_ExitMuteMode,"ax",%progbits
 6615              		.align	1
 6616              		.global	HAL_MultiProcessor_ExitMuteMode
 6617              		.syntax unified
 6618              		.thumb
 6619              		.thumb_func
 6621              	HAL_MultiProcessor_ExitMuteMode:
 6622              	.LFB103:
2798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Exits the UART mute mode: wake up software.
2801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
2806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6623              		.loc 1 2806 1
 6624              		.cfi_startproc
 6625              		@ args = 0, pretend = 0, frame = 32
 6626              		@ frame_needed = 1, uses_anonymous_args = 0
 6627              		@ link register save eliminated.
 6628 0000 80B4     		push	{r7}
 6629              	.LCFI207:
 6630              		.cfi_def_cfa_offset 4
 6631              		.cfi_offset 7, -4
 6632 0002 89B0     		sub	sp, sp, #36
 6633              	.LCFI208:
 6634              		.cfi_def_cfa_offset 40
 6635 0004 00AF     		add	r7, sp, #0
 6636              	.LCFI209:
 6637              		.cfi_def_cfa_register 7
 6638 0006 7860     		str	r0, [r7, #4]
2807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
2808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 6639              		.loc 1 2811 3
 6640 0008 7B68     		ldr	r3, [r7, #4]
 6641 000a 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 6642 000e 012B     		cmp	r3, #1
 6643 0010 01D1     		bne	.L341
 6644              		.loc 1 2811 3 is_stmt 0 discriminator 1
 6645 0012 0223     		movs	r3, #2
 6646 0014 2DE0     		b	.L342
 6647              	.L341:
 6648              		.loc 1 2811 3 discriminator 2
 6649 0016 7B68     		ldr	r3, [r7, #4]
 6650 0018 0122     		movs	r2, #1
 6651 001a 83F84020 		strb	r2, [r3, #64]
2812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 6652              		.loc 1 2813 17 is_stmt 1 discriminator 2
 6653 001e 7B68     		ldr	r3, [r7, #4]
 6654 0020 2422     		movs	r2, #36
ARM GAS  /tmp/cc17XZfc.s 			page 188


 6655 0022 83F84120 		strb	r2, [r3, #65]
 6656              	.L345:
 6657              	.LBB554:
2814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
2816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 6658              		.loc 1 2816 3 discriminator 1
 6659 0026 7B68     		ldr	r3, [r7, #4]
 6660 0028 1B68     		ldr	r3, [r3]
 6661 002a 0C33     		adds	r3, r3, #12
 6662 002c FB60     		str	r3, [r7, #12]
 6663              	.LBB555:
 6664              	.LBB556:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6665              		.loc 2 1072 4 discriminator 1
 6666 002e FB68     		ldr	r3, [r7, #12]
 6667              		.syntax unified
 6668              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6669 0030 53E8003F 		ldrex r3, [r3]
 6670              	@ 0 "" 2
 6671              		.thumb
 6672              		.syntax unified
 6673 0034 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 6674              		.loc 2 1073 10 discriminator 1
 6675 0036 BB68     		ldr	r3, [r7, #8]
 6676              	.LBE556:
 6677              	.LBE555:
 6678              		.loc 1 2816 3 discriminator 1
 6679 0038 23F00203 		bic	r3, r3, #2
 6680 003c FB61     		str	r3, [r7, #28]
 6681 003e 7B68     		ldr	r3, [r7, #4]
 6682 0040 1B68     		ldr	r3, [r3]
 6683 0042 0C33     		adds	r3, r3, #12
 6684 0044 FA69     		ldr	r2, [r7, #28]
 6685 0046 BA61     		str	r2, [r7, #24]
 6686 0048 7B61     		str	r3, [r7, #20]
 6687              	.LBB557:
 6688              	.LBB558:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 6689              		.loc 2 1123 4 discriminator 1
 6690 004a 7969     		ldr	r1, [r7, #20]
 6691 004c BA69     		ldr	r2, [r7, #24]
 6692              		.syntax unified
 6693              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6694 004e 41E80023 		strex r3, r2, [r1]
 6695              	@ 0 "" 2
 6696              		.thumb
 6697              		.syntax unified
 6698 0052 3B61     		str	r3, [r7, #16]
 6699              		.loc 2 1124 10 discriminator 1
 6700 0054 3B69     		ldr	r3, [r7, #16]
 6701              	.LBE558:
 6702              	.LBE557:
 6703              		.loc 1 2816 3 discriminator 1
 6704 0056 002B     		cmp	r3, #0
 6705 0058 E5D1     		bne	.L345
ARM GAS  /tmp/cc17XZfc.s 			page 189


 6706              	.LBE554:
2817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6707              		.loc 1 2818 17
 6708 005a 7B68     		ldr	r3, [r7, #4]
 6709 005c 2022     		movs	r2, #32
 6710 005e 83F84120 		strb	r2, [r3, #65]
2819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 6711              		.loc 1 2819 22
 6712 0062 7B68     		ldr	r3, [r7, #4]
 6713 0064 0022     		movs	r2, #0
 6714 0066 5A63     		str	r2, [r3, #52]
2820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 6715              		.loc 1 2822 3
 6716 0068 7B68     		ldr	r3, [r7, #4]
 6717 006a 0022     		movs	r2, #0
 6718 006c 83F84020 		strb	r2, [r3, #64]
2823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 6719              		.loc 1 2824 10
 6720 0070 0023     		movs	r3, #0
 6721              	.L342:
2825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6722              		.loc 1 2825 1
 6723 0072 1846     		mov	r0, r3
 6724 0074 2437     		adds	r7, r7, #36
 6725              	.LCFI210:
 6726              		.cfi_def_cfa_offset 4
 6727 0076 BD46     		mov	sp, r7
 6728              	.LCFI211:
 6729              		.cfi_def_cfa_register 13
 6730              		@ sp needed
 6731 0078 80BC     		pop	{r7}
 6732              	.LCFI212:
 6733              		.cfi_restore 7
 6734              		.cfi_def_cfa_offset 0
 6735 007a 7047     		bx	lr
 6736              		.cfi_endproc
 6737              	.LFE103:
 6739              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 6740              		.align	1
 6741              		.global	HAL_HalfDuplex_EnableTransmitter
 6742              		.syntax unified
 6743              		.thumb
 6744              		.thumb_func
 6746              	HAL_HalfDuplex_EnableTransmitter:
 6747              	.LFB104:
2826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART transmitter and disables the UART receiver.
2829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
ARM GAS  /tmp/cc17XZfc.s 			page 190


2834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6748              		.loc 1 2834 1
 6749              		.cfi_startproc
 6750              		@ args = 0, pretend = 0, frame = 16
 6751              		@ frame_needed = 1, uses_anonymous_args = 0
 6752              		@ link register save eliminated.
 6753 0000 80B4     		push	{r7}
 6754              	.LCFI213:
 6755              		.cfi_def_cfa_offset 4
 6756              		.cfi_offset 7, -4
 6757 0002 85B0     		sub	sp, sp, #20
 6758              	.LCFI214:
 6759              		.cfi_def_cfa_offset 24
 6760 0004 00AF     		add	r7, sp, #0
 6761              	.LCFI215:
 6762              		.cfi_def_cfa_register 7
 6763 0006 7860     		str	r0, [r7, #4]
2835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 6764              		.loc 1 2835 12
 6765 0008 0023     		movs	r3, #0
 6766 000a FB60     		str	r3, [r7, #12]
2836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 6767              		.loc 1 2838 3
 6768 000c 7B68     		ldr	r3, [r7, #4]
 6769 000e 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 6770 0012 012B     		cmp	r3, #1
 6771 0014 01D1     		bne	.L347
 6772              		.loc 1 2838 3 is_stmt 0 discriminator 1
 6773 0016 0223     		movs	r3, #2
 6774 0018 20E0     		b	.L348
 6775              	.L347:
 6776              		.loc 1 2838 3 discriminator 2
 6777 001a 7B68     		ldr	r3, [r7, #4]
 6778 001c 0122     		movs	r2, #1
 6779 001e 83F84020 		strb	r2, [r3, #64]
2839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 6780              		.loc 1 2840 17 is_stmt 1 discriminator 2
 6781 0022 7B68     		ldr	r3, [r7, #4]
 6782 0024 2422     		movs	r2, #36
 6783 0026 83F84120 		strb	r2, [r3, #65]
2841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 6784              		.loc 1 2843 17 discriminator 2
 6785 002a 7B68     		ldr	r3, [r7, #4]
 6786 002c 1B68     		ldr	r3, [r3]
 6787              		.loc 1 2843 10 discriminator 2
 6788 002e DB68     		ldr	r3, [r3, #12]
 6789 0030 FB60     		str	r3, [r7, #12]
2844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
2846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 6790              		.loc 1 2846 10 discriminator 2
 6791 0032 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc17XZfc.s 			page 191


 6792 0034 23F00C03 		bic	r3, r3, #12
 6793 0038 FB60     		str	r3, [r7, #12]
2847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_TE;
 6794              		.loc 1 2849 10 discriminator 2
 6795 003a FB68     		ldr	r3, [r7, #12]
 6796 003c 43F00803 		orr	r3, r3, #8
 6797 0040 FB60     		str	r3, [r7, #12]
2850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
2852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 6798              		.loc 1 2852 3 discriminator 2
 6799 0042 7B68     		ldr	r3, [r7, #4]
 6800 0044 1B68     		ldr	r3, [r3]
 6801 0046 FA68     		ldr	r2, [r7, #12]
 6802 0048 DA60     		str	r2, [r3, #12]
2853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6803              		.loc 1 2854 17 discriminator 2
 6804 004a 7B68     		ldr	r3, [r7, #4]
 6805 004c 2022     		movs	r2, #32
 6806 004e 83F84120 		strb	r2, [r3, #65]
2855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 6807              		.loc 1 2857 3 discriminator 2
 6808 0052 7B68     		ldr	r3, [r7, #4]
 6809 0054 0022     		movs	r2, #0
 6810 0056 83F84020 		strb	r2, [r3, #64]
2858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 6811              		.loc 1 2859 10 discriminator 2
 6812 005a 0023     		movs	r3, #0
 6813              	.L348:
2860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6814              		.loc 1 2860 1
 6815 005c 1846     		mov	r0, r3
 6816 005e 1437     		adds	r7, r7, #20
 6817              	.LCFI216:
 6818              		.cfi_def_cfa_offset 4
 6819 0060 BD46     		mov	sp, r7
 6820              	.LCFI217:
 6821              		.cfi_def_cfa_register 13
 6822              		@ sp needed
 6823 0062 80BC     		pop	{r7}
 6824              	.LCFI218:
 6825              		.cfi_restore 7
 6826              		.cfi_def_cfa_offset 0
 6827 0064 7047     		bx	lr
 6828              		.cfi_endproc
 6829              	.LFE104:
 6831              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 6832              		.align	1
 6833              		.global	HAL_HalfDuplex_EnableReceiver
 6834              		.syntax unified
 6835              		.thumb
ARM GAS  /tmp/cc17XZfc.s 			page 192


 6836              		.thumb_func
 6838              	HAL_HalfDuplex_EnableReceiver:
 6839              	.LFB105:
2861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Enables the UART receiver and disables the UART transmitter.
2864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
2867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6840              		.loc 1 2869 1
 6841              		.cfi_startproc
 6842              		@ args = 0, pretend = 0, frame = 16
 6843              		@ frame_needed = 1, uses_anonymous_args = 0
 6844              		@ link register save eliminated.
 6845 0000 80B4     		push	{r7}
 6846              	.LCFI219:
 6847              		.cfi_def_cfa_offset 4
 6848              		.cfi_offset 7, -4
 6849 0002 85B0     		sub	sp, sp, #20
 6850              	.LCFI220:
 6851              		.cfi_def_cfa_offset 24
 6852 0004 00AF     		add	r7, sp, #0
 6853              	.LCFI221:
 6854              		.cfi_def_cfa_register 7
 6855 0006 7860     		str	r0, [r7, #4]
2870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 6856              		.loc 1 2870 12
 6857 0008 0023     		movs	r3, #0
 6858 000a FB60     		str	r3, [r7, #12]
2871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Locked */
2873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_LOCK(huart);
 6859              		.loc 1 2873 3
 6860 000c 7B68     		ldr	r3, [r7, #4]
 6861 000e 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 6862 0012 012B     		cmp	r3, #1
 6863 0014 01D1     		bne	.L350
 6864              		.loc 1 2873 3 is_stmt 0 discriminator 1
 6865 0016 0223     		movs	r3, #2
 6866 0018 20E0     		b	.L351
 6867              	.L350:
 6868              		.loc 1 2873 3 discriminator 2
 6869 001a 7B68     		ldr	r3, [r7, #4]
 6870 001c 0122     		movs	r2, #1
 6871 001e 83F84020 		strb	r2, [r3, #64]
2874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 6872              		.loc 1 2875 17 is_stmt 1 discriminator 2
 6873 0022 7B68     		ldr	r3, [r7, #4]
 6874 0024 2422     		movs	r2, #36
 6875 0026 83F84120 		strb	r2, [r3, #65]
2876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
ARM GAS  /tmp/cc17XZfc.s 			page 193


 6876              		.loc 1 2878 17 discriminator 2
 6877 002a 7B68     		ldr	r3, [r7, #4]
 6878 002c 1B68     		ldr	r3, [r3]
 6879              		.loc 1 2878 10 discriminator 2
 6880 002e DB68     		ldr	r3, [r3, #12]
 6881 0030 FB60     		str	r3, [r7, #12]
2879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear TE and RE bits */
2881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 6882              		.loc 1 2881 10 discriminator 2
 6883 0032 FB68     		ldr	r3, [r7, #12]
 6884 0034 23F00C03 		bic	r3, r3, #12
 6885 0038 FB60     		str	r3, [r7, #12]
2882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_RE;
 6886              		.loc 1 2884 10 discriminator 2
 6887 003a FB68     		ldr	r3, [r7, #12]
 6888 003c 43F00403 		orr	r3, r3, #4
 6889 0040 FB60     		str	r3, [r7, #12]
2885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Write to USART CR1 */
2887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 6890              		.loc 1 2887 3 discriminator 2
 6891 0042 7B68     		ldr	r3, [r7, #4]
 6892 0044 1B68     		ldr	r3, [r3]
 6893 0046 FA68     		ldr	r2, [r7, #12]
 6894 0048 DA60     		str	r2, [r3, #12]
2888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6895              		.loc 1 2889 17 discriminator 2
 6896 004a 7B68     		ldr	r3, [r7, #4]
 6897 004c 2022     		movs	r2, #32
 6898 004e 83F84120 		strb	r2, [r3, #65]
2890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Process Unlocked */
2892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 6899              		.loc 1 2892 3 discriminator 2
 6900 0052 7B68     		ldr	r3, [r7, #4]
 6901 0054 0022     		movs	r2, #0
 6902 0056 83F84020 		strb	r2, [r3, #64]
2893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 6903              		.loc 1 2894 10 discriminator 2
 6904 005a 0023     		movs	r3, #0
 6905              	.L351:
2895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6906              		.loc 1 2895 1
 6907 005c 1846     		mov	r0, r3
 6908 005e 1437     		adds	r7, r7, #20
 6909              	.LCFI222:
 6910              		.cfi_def_cfa_offset 4
 6911 0060 BD46     		mov	sp, r7
 6912              	.LCFI223:
 6913              		.cfi_def_cfa_register 13
 6914              		@ sp needed
 6915 0062 80BC     		pop	{r7}
ARM GAS  /tmp/cc17XZfc.s 			page 194


 6916              	.LCFI224:
 6917              		.cfi_restore 7
 6918              		.cfi_def_cfa_offset 0
 6919 0064 7047     		bx	lr
 6920              		.cfi_endproc
 6921              	.LFE105:
 6923              		.section	.text.HAL_UART_GetState,"ax",%progbits
 6924              		.align	1
 6925              		.global	HAL_UART_GetState
 6926              		.syntax unified
 6927              		.thumb
 6928              		.thumb_func
 6930              	HAL_UART_GetState:
 6931              	.LFB106:
2896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Errors functions
2902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *  @brief   UART State and Errors functions
2903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *
2904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @verbatim
2905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                  ##### Peripheral State and Errors functions #####
2907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ==============================================================================
2908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****  [..]
2909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    This subsection provides a set of functions allowing to return the State of
2910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    UART communication process, return Peripheral Errors occurred during communication
2911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    process
2912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetState() API can be helpful to check in run-time the state of the UART peripheral
2913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    (+) HAL_UART_GetError() check in run-time errors that could be occurred during communication.
2914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** @endverbatim
2916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Returns the UART state.
2921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL state
2924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
2926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6932              		.loc 1 2926 1
 6933              		.cfi_startproc
 6934              		@ args = 0, pretend = 0, frame = 16
 6935              		@ frame_needed = 1, uses_anonymous_args = 0
 6936              		@ link register save eliminated.
 6937 0000 80B4     		push	{r7}
 6938              	.LCFI225:
 6939              		.cfi_def_cfa_offset 4
 6940              		.cfi_offset 7, -4
 6941 0002 85B0     		sub	sp, sp, #20
 6942              	.LCFI226:
 6943              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc17XZfc.s 			page 195


 6944 0004 00AF     		add	r7, sp, #0
 6945              	.LCFI227:
 6946              		.cfi_def_cfa_register 7
 6947 0006 7860     		str	r0, [r7, #4]
2927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
 6948              		.loc 1 2927 12
 6949 0008 0023     		movs	r3, #0
 6950 000a FB60     		str	r3, [r7, #12]
 6951              		.loc 1 2927 27
 6952 000c 0023     		movs	r3, #0
 6953 000e BB60     		str	r3, [r7, #8]
2928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp1 = huart->gState;
 6954              		.loc 1 2928 16
 6955 0010 7B68     		ldr	r3, [r7, #4]
 6956 0012 93F84130 		ldrb	r3, [r3, #65]
 6957 0016 DBB2     		uxtb	r3, r3
 6958              		.loc 1 2928 9
 6959 0018 FB60     		str	r3, [r7, #12]
2929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   temp2 = huart->RxState;
 6960              		.loc 1 2929 16
 6961 001a 7B68     		ldr	r3, [r7, #4]
 6962 001c 93F84230 		ldrb	r3, [r3, #66]
 6963 0020 DBB2     		uxtb	r3, r3
 6964              		.loc 1 2929 9
 6965 0022 BB60     		str	r3, [r7, #8]
2930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
 6966              		.loc 1 2931 10
 6967 0024 FB68     		ldr	r3, [r7, #12]
 6968 0026 DAB2     		uxtb	r2, r3
 6969 0028 BB68     		ldr	r3, [r7, #8]
 6970 002a DBB2     		uxtb	r3, r3
 6971 002c 1343     		orrs	r3, r3, r2
 6972 002e DBB2     		uxtb	r3, r3
2932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 6973              		.loc 1 2932 1
 6974 0030 1846     		mov	r0, r3
 6975 0032 1437     		adds	r7, r7, #20
 6976              	.LCFI228:
 6977              		.cfi_def_cfa_offset 4
 6978 0034 BD46     		mov	sp, r7
 6979              	.LCFI229:
 6980              		.cfi_def_cfa_register 13
 6981              		@ sp needed
 6982 0036 80BC     		pop	{r7}
 6983              	.LCFI230:
 6984              		.cfi_restore 7
 6985              		.cfi_def_cfa_offset 0
 6986 0038 7047     		bx	lr
 6987              		.cfi_endproc
 6988              	.LFE106:
 6990              		.section	.text.HAL_UART_GetError,"ax",%progbits
 6991              		.align	1
 6992              		.global	HAL_UART_GetError
 6993              		.syntax unified
 6994              		.thumb
 6995              		.thumb_func
ARM GAS  /tmp/cc17XZfc.s 			page 196


 6997              	HAL_UART_GetError:
 6998              	.LFB107:
2933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Return the UART error code
2936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified UART.
2938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval UART Error Code
2939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
2941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 6999              		.loc 1 2941 1
 7000              		.cfi_startproc
 7001              		@ args = 0, pretend = 0, frame = 8
 7002              		@ frame_needed = 1, uses_anonymous_args = 0
 7003              		@ link register save eliminated.
 7004 0000 80B4     		push	{r7}
 7005              	.LCFI231:
 7006              		.cfi_def_cfa_offset 4
 7007              		.cfi_offset 7, -4
 7008 0002 83B0     		sub	sp, sp, #12
 7009              	.LCFI232:
 7010              		.cfi_def_cfa_offset 16
 7011 0004 00AF     		add	r7, sp, #0
 7012              	.LCFI233:
 7013              		.cfi_def_cfa_register 7
 7014 0006 7860     		str	r0, [r7, #4]
2942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return huart->ErrorCode;
 7015              		.loc 1 2942 15
 7016 0008 7B68     		ldr	r3, [r7, #4]
 7017 000a 5B6C     		ldr	r3, [r3, #68]
2943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 7018              		.loc 1 2943 1
 7019 000c 1846     		mov	r0, r3
 7020 000e 0C37     		adds	r7, r7, #12
 7021              	.LCFI234:
 7022              		.cfi_def_cfa_offset 4
 7023 0010 BD46     		mov	sp, r7
 7024              	.LCFI235:
 7025              		.cfi_def_cfa_register 13
 7026              		@ sp needed
 7027 0012 80BC     		pop	{r7}
 7028              	.LCFI236:
 7029              		.cfi_restore 7
 7030              		.cfi_def_cfa_offset 0
 7031 0014 7047     		bx	lr
 7032              		.cfi_endproc
 7033              	.LFE107:
 7035              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 7036              		.align	1
 7037              		.syntax unified
 7038              		.thumb
 7039              		.thumb_func
 7041              	UART_DMATransmitCplt:
 7042              	.LFB108:
2944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
ARM GAS  /tmp/cc17XZfc.s 			page 197


2946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @}
2951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @{
2955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
2960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval none
2961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
2965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Init the UART Callback settings */
2966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCall
2975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
2977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
2980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART transmit process complete callback.
2981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
2984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
2985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7043              		.loc 1 2986 1
 7044              		.cfi_startproc
 7045              		@ args = 0, pretend = 0, frame = 64
 7046              		@ frame_needed = 1, uses_anonymous_args = 0
 7047 0000 80B5     		push	{r7, lr}
 7048              	.LCFI237:
 7049              		.cfi_def_cfa_offset 8
 7050              		.cfi_offset 7, -8
 7051              		.cfi_offset 14, -4
 7052 0002 90B0     		sub	sp, sp, #64
 7053              	.LCFI238:
 7054              		.cfi_def_cfa_offset 72
 7055 0004 00AF     		add	r7, sp, #0
 7056              	.LCFI239:
 7057              		.cfi_def_cfa_register 7
 7058 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cc17XZfc.s 			page 198


2987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 7059              		.loc 1 2987 23
 7060 0008 7B68     		ldr	r3, [r7, #4]
 7061 000a 5B6A     		ldr	r3, [r3, #36]
 7062 000c FB63     		str	r3, [r7, #60]
2988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
2989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 7063              		.loc 1 2989 12
 7064 000e 7B68     		ldr	r3, [r7, #4]
 7065 0010 1B68     		ldr	r3, [r3]
 7066              		.loc 1 2989 22
 7067 0012 1B68     		ldr	r3, [r3]
 7068              		.loc 1 2989 28
 7069 0014 03F02003 		and	r3, r3, #32
 7070              		.loc 1 2989 6
 7071 0018 002B     		cmp	r3, #0
 7072 001a 37D1     		bne	.L357
2990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
2991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 7073              		.loc 1 2991 24
 7074 001c FB6B     		ldr	r3, [r7, #60]
 7075 001e 0022     		movs	r2, #0
 7076 0020 DA84     		strh	r2, [r3, #38]	@ movhi
 7077              	.L360:
 7078              	.LBB559:
2992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
2994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
2995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 7079              		.loc 1 2995 5 discriminator 1
 7080 0022 FB6B     		ldr	r3, [r7, #60]
 7081 0024 1B68     		ldr	r3, [r3]
 7082 0026 1433     		adds	r3, r3, #20
 7083 0028 7B62     		str	r3, [r7, #36]
 7084              	.LBB560:
 7085              	.LBB561:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7086              		.loc 2 1072 4 discriminator 1
 7087 002a 7B6A     		ldr	r3, [r7, #36]
 7088              		.syntax unified
 7089              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7090 002c 53E8003F 		ldrex r3, [r3]
 7091              	@ 0 "" 2
 7092              		.thumb
 7093              		.syntax unified
 7094 0030 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7095              		.loc 2 1073 10 discriminator 1
 7096 0032 3B6A     		ldr	r3, [r7, #32]
 7097              	.LBE561:
 7098              	.LBE560:
 7099              		.loc 1 2995 5 discriminator 1
 7100 0034 23F08003 		bic	r3, r3, #128
 7101 0038 BB63     		str	r3, [r7, #56]
 7102 003a FB6B     		ldr	r3, [r7, #60]
 7103 003c 1B68     		ldr	r3, [r3]
 7104 003e 1433     		adds	r3, r3, #20
ARM GAS  /tmp/cc17XZfc.s 			page 199


 7105 0040 BA6B     		ldr	r2, [r7, #56]
 7106 0042 3A63     		str	r2, [r7, #48]
 7107 0044 FB62     		str	r3, [r7, #44]
 7108              	.LBB562:
 7109              	.LBB563:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7110              		.loc 2 1123 4 discriminator 1
 7111 0046 F96A     		ldr	r1, [r7, #44]
 7112 0048 3A6B     		ldr	r2, [r7, #48]
 7113              		.syntax unified
 7114              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7115 004a 41E80023 		strex r3, r2, [r1]
 7116              	@ 0 "" 2
 7117              		.thumb
 7118              		.syntax unified
 7119 004e BB62     		str	r3, [r7, #40]
 7120              		.loc 2 1124 10 discriminator 1
 7121 0050 BB6A     		ldr	r3, [r7, #40]
 7122              	.LBE563:
 7123              	.LBE562:
 7124              		.loc 1 2995 5 discriminator 1
 7125 0052 002B     		cmp	r3, #0
 7126 0054 E5D1     		bne	.L360
 7127              	.L363:
 7128              	.LBE559:
 7129              	.LBB564:
2996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
2997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
2998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 7130              		.loc 1 2998 5 discriminator 1
 7131 0056 FB6B     		ldr	r3, [r7, #60]
 7132 0058 1B68     		ldr	r3, [r3]
 7133 005a 0C33     		adds	r3, r3, #12
 7134 005c 3B61     		str	r3, [r7, #16]
 7135              	.LBB565:
 7136              	.LBB566:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7137              		.loc 2 1072 4 discriminator 1
 7138 005e 3B69     		ldr	r3, [r7, #16]
 7139              		.syntax unified
 7140              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7141 0060 53E8003F 		ldrex r3, [r3]
 7142              	@ 0 "" 2
 7143              		.thumb
 7144              		.syntax unified
 7145 0064 FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7146              		.loc 2 1073 10 discriminator 1
 7147 0066 FB68     		ldr	r3, [r7, #12]
 7148              	.LBE566:
 7149              	.LBE565:
 7150              		.loc 1 2998 5 discriminator 1
 7151 0068 43F04003 		orr	r3, r3, #64
 7152 006c 7B63     		str	r3, [r7, #52]
 7153 006e FB6B     		ldr	r3, [r7, #60]
 7154 0070 1B68     		ldr	r3, [r3]
 7155 0072 0C33     		adds	r3, r3, #12
ARM GAS  /tmp/cc17XZfc.s 			page 200


 7156 0074 7A6B     		ldr	r2, [r7, #52]
 7157 0076 FA61     		str	r2, [r7, #28]
 7158 0078 BB61     		str	r3, [r7, #24]
 7159              	.LBB567:
 7160              	.LBB568:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7161              		.loc 2 1123 4 discriminator 1
 7162 007a B969     		ldr	r1, [r7, #24]
 7163 007c FA69     		ldr	r2, [r7, #28]
 7164              		.syntax unified
 7165              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7166 007e 41E80023 		strex r3, r2, [r1]
 7167              	@ 0 "" 2
 7168              		.thumb
 7169              		.syntax unified
 7170 0082 7B61     		str	r3, [r7, #20]
 7171              		.loc 2 1124 10 discriminator 1
 7172 0084 7B69     		ldr	r3, [r7, #20]
 7173              	.LBE568:
 7174              	.LBE567:
 7175              		.loc 1 2998 5 discriminator 1
 7176 0086 002B     		cmp	r3, #0
 7177 0088 E5D1     		bne	.L363
 7178              	.LBE564:
2999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Circular mode */
3002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Tx complete callback*/
3006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxCpltCallback(huart);
3007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
3009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
3010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 7179              		.loc 1 3012 1
 7180 008a 02E0     		b	.L365
 7181              	.L357:
3009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 7182              		.loc 1 3009 5
 7183 008c F86B     		ldr	r0, [r7, #60]
 7184 008e FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 7185              	.L365:
 7186              		.loc 1 3012 1
 7187 0092 00BF     		nop
 7188 0094 4037     		adds	r7, r7, #64
 7189              	.LCFI240:
 7190              		.cfi_def_cfa_offset 8
 7191 0096 BD46     		mov	sp, r7
 7192              	.LCFI241:
 7193              		.cfi_def_cfa_register 13
 7194              		@ sp needed
 7195 0098 80BD     		pop	{r7, pc}
 7196              		.cfi_endproc
ARM GAS  /tmp/cc17XZfc.s 			page 201


 7197              	.LFE108:
 7199              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 7200              		.align	1
 7201              		.syntax unified
 7202              		.thumb
 7203              		.thumb_func
 7205              	UART_DMATxHalfCplt:
 7206              	.LFB109:
3013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback
3016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
3021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7207              		.loc 1 3021 1
 7208              		.cfi_startproc
 7209              		@ args = 0, pretend = 0, frame = 16
 7210              		@ frame_needed = 1, uses_anonymous_args = 0
 7211 0000 80B5     		push	{r7, lr}
 7212              	.LCFI242:
 7213              		.cfi_def_cfa_offset 8
 7214              		.cfi_offset 7, -8
 7215              		.cfi_offset 14, -4
 7216 0002 84B0     		sub	sp, sp, #16
 7217              	.LCFI243:
 7218              		.cfi_def_cfa_offset 24
 7219 0004 00AF     		add	r7, sp, #0
 7220              	.LCFI244:
 7221              		.cfi_def_cfa_register 7
 7222 0006 7860     		str	r0, [r7, #4]
3022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 7223              		.loc 1 3022 23
 7224 0008 7B68     		ldr	r3, [r7, #4]
 7225 000a 5B6A     		ldr	r3, [r3, #36]
 7226 000c FB60     		str	r3, [r7, #12]
3023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
3027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 7227              		.loc 1 3029 3
 7228 000e F868     		ldr	r0, [r7, #12]
 7229 0010 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
3030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 7230              		.loc 1 3031 1
 7231 0014 00BF     		nop
 7232 0016 1037     		adds	r7, r7, #16
 7233              	.LCFI245:
 7234              		.cfi_def_cfa_offset 8
 7235 0018 BD46     		mov	sp, r7
 7236              	.LCFI246:
ARM GAS  /tmp/cc17XZfc.s 			page 202


 7237              		.cfi_def_cfa_register 13
 7238              		@ sp needed
 7239 001a 80BD     		pop	{r7, pc}
 7240              		.cfi_endproc
 7241              	.LFE109:
 7243              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 7244              		.align	1
 7245              		.syntax unified
 7246              		.thumb
 7247              		.thumb_func
 7249              	UART_DMAReceiveCplt:
 7250              	.LFB110:
3032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART receive process complete callback.
3035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
3040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7251              		.loc 1 3040 1
 7252              		.cfi_startproc
 7253              		@ args = 0, pretend = 0, frame = 112
 7254              		@ frame_needed = 1, uses_anonymous_args = 0
 7255 0000 80B5     		push	{r7, lr}
 7256              	.LCFI247:
 7257              		.cfi_def_cfa_offset 8
 7258              		.cfi_offset 7, -8
 7259              		.cfi_offset 14, -4
 7260 0002 9CB0     		sub	sp, sp, #112
 7261              	.LCFI248:
 7262              		.cfi_def_cfa_offset 120
 7263 0004 00AF     		add	r7, sp, #0
 7264              	.LCFI249:
 7265              		.cfi_def_cfa_register 7
 7266 0006 7860     		str	r0, [r7, #4]
3041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 7267              		.loc 1 3041 23
 7268 0008 7B68     		ldr	r3, [r7, #4]
 7269 000a 5B6A     		ldr	r3, [r3, #36]
 7270 000c FB66     		str	r3, [r7, #108]
3042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* DMA Normal mode*/
3044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 7271              		.loc 1 3044 12
 7272 000e 7B68     		ldr	r3, [r7, #4]
 7273 0010 1B68     		ldr	r3, [r3]
 7274              		.loc 1 3044 22
 7275 0012 1B68     		ldr	r3, [r3]
 7276              		.loc 1 3044 28
 7277 0014 03F02003 		and	r3, r3, #32
 7278              		.loc 1 3044 6
 7279 0018 002B     		cmp	r3, #0
 7280 001a 72D1     		bne	.L368
3045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0U;
ARM GAS  /tmp/cc17XZfc.s 			page 203


 7281              		.loc 1 3046 24
 7282 001c FB6E     		ldr	r3, [r7, #108]
 7283 001e 0022     		movs	r2, #0
 7284 0020 DA85     		strh	r2, [r3, #46]	@ movhi
 7285              	.L371:
 7286              	.LBB569:
3047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 7287              		.loc 1 3049 5 discriminator 1
 7288 0022 FB6E     		ldr	r3, [r7, #108]
 7289 0024 1B68     		ldr	r3, [r3]
 7290 0026 0C33     		adds	r3, r3, #12
 7291 0028 FB64     		str	r3, [r7, #76]
 7292              	.LBB570:
 7293              	.LBB571:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7294              		.loc 2 1072 4 discriminator 1
 7295 002a FB6C     		ldr	r3, [r7, #76]
 7296              		.syntax unified
 7297              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7298 002c 53E8003F 		ldrex r3, [r3]
 7299              	@ 0 "" 2
 7300              		.thumb
 7301              		.syntax unified
 7302 0030 BB64     		str	r3, [r7, #72]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7303              		.loc 2 1073 10 discriminator 1
 7304 0032 BB6C     		ldr	r3, [r7, #72]
 7305              	.LBE571:
 7306              	.LBE570:
 7307              		.loc 1 3049 5 discriminator 1
 7308 0034 23F48073 		bic	r3, r3, #256
 7309 0038 BB66     		str	r3, [r7, #104]
 7310 003a FB6E     		ldr	r3, [r7, #108]
 7311 003c 1B68     		ldr	r3, [r3]
 7312 003e 0C33     		adds	r3, r3, #12
 7313 0040 BA6E     		ldr	r2, [r7, #104]
 7314 0042 BA65     		str	r2, [r7, #88]
 7315 0044 7B65     		str	r3, [r7, #84]
 7316              	.LBB572:
 7317              	.LBB573:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7318              		.loc 2 1123 4 discriminator 1
 7319 0046 796D     		ldr	r1, [r7, #84]
 7320 0048 BA6D     		ldr	r2, [r7, #88]
 7321              		.syntax unified
 7322              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7323 004a 41E80023 		strex r3, r2, [r1]
 7324              	@ 0 "" 2
 7325              		.thumb
 7326              		.syntax unified
 7327 004e 3B65     		str	r3, [r7, #80]
 7328              		.loc 2 1124 10 discriminator 1
 7329 0050 3B6D     		ldr	r3, [r7, #80]
 7330              	.LBE573:
 7331              	.LBE572:
ARM GAS  /tmp/cc17XZfc.s 			page 204


 7332              		.loc 1 3049 5 discriminator 1
 7333 0052 002B     		cmp	r3, #0
 7334 0054 E5D1     		bne	.L371
 7335              	.L374:
 7336              	.LBE569:
 7337              	.LBB574:
3050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 7338              		.loc 1 3050 5 discriminator 1
 7339 0056 FB6E     		ldr	r3, [r7, #108]
 7340 0058 1B68     		ldr	r3, [r3]
 7341 005a 1433     		adds	r3, r3, #20
 7342 005c BB63     		str	r3, [r7, #56]
 7343              	.LBB575:
 7344              	.LBB576:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7345              		.loc 2 1072 4 discriminator 1
 7346 005e BB6B     		ldr	r3, [r7, #56]
 7347              		.syntax unified
 7348              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7349 0060 53E8003F 		ldrex r3, [r3]
 7350              	@ 0 "" 2
 7351              		.thumb
 7352              		.syntax unified
 7353 0064 7B63     		str	r3, [r7, #52]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7354              		.loc 2 1073 10 discriminator 1
 7355 0066 7B6B     		ldr	r3, [r7, #52]
 7356              	.LBE576:
 7357              	.LBE575:
 7358              		.loc 1 3050 5 discriminator 1
 7359 0068 23F00103 		bic	r3, r3, #1
 7360 006c 7B66     		str	r3, [r7, #100]
 7361 006e FB6E     		ldr	r3, [r7, #108]
 7362 0070 1B68     		ldr	r3, [r3]
 7363 0072 1433     		adds	r3, r3, #20
 7364 0074 7A6E     		ldr	r2, [r7, #100]
 7365 0076 7A64     		str	r2, [r7, #68]
 7366 0078 3B64     		str	r3, [r7, #64]
 7367              	.LBB577:
 7368              	.LBB578:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7369              		.loc 2 1123 4 discriminator 1
 7370 007a 396C     		ldr	r1, [r7, #64]
 7371 007c 7A6C     		ldr	r2, [r7, #68]
 7372              		.syntax unified
 7373              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7374 007e 41E80023 		strex r3, r2, [r1]
 7375              	@ 0 "" 2
 7376              		.thumb
 7377              		.syntax unified
 7378 0082 FB63     		str	r3, [r7, #60]
 7379              		.loc 2 1124 10 discriminator 1
 7380 0084 FB6B     		ldr	r3, [r7, #60]
 7381              	.LBE578:
 7382              	.LBE577:
 7383              		.loc 1 3050 5 discriminator 1
 7384 0086 002B     		cmp	r3, #0
ARM GAS  /tmp/cc17XZfc.s 			page 205


 7385 0088 E5D1     		bne	.L374
 7386              	.L377:
 7387              	.LBE574:
 7388              	.LBB579:
3051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit
3053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****        in the UART CR3 register */
3054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 7389              		.loc 1 3054 5 discriminator 1
 7390 008a FB6E     		ldr	r3, [r7, #108]
 7391 008c 1B68     		ldr	r3, [r3]
 7392 008e 1433     		adds	r3, r3, #20
 7393 0090 7B62     		str	r3, [r7, #36]
 7394              	.LBB580:
 7395              	.LBB581:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7396              		.loc 2 1072 4 discriminator 1
 7397 0092 7B6A     		ldr	r3, [r7, #36]
 7398              		.syntax unified
 7399              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7400 0094 53E8003F 		ldrex r3, [r3]
 7401              	@ 0 "" 2
 7402              		.thumb
 7403              		.syntax unified
 7404 0098 3B62     		str	r3, [r7, #32]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7405              		.loc 2 1073 10 discriminator 1
 7406 009a 3B6A     		ldr	r3, [r7, #32]
 7407              	.LBE581:
 7408              	.LBE580:
 7409              		.loc 1 3054 5 discriminator 1
 7410 009c 23F04003 		bic	r3, r3, #64
 7411 00a0 3B66     		str	r3, [r7, #96]
 7412 00a2 FB6E     		ldr	r3, [r7, #108]
 7413 00a4 1B68     		ldr	r3, [r3]
 7414 00a6 1433     		adds	r3, r3, #20
 7415 00a8 3A6E     		ldr	r2, [r7, #96]
 7416 00aa 3A63     		str	r2, [r7, #48]
 7417 00ac FB62     		str	r3, [r7, #44]
 7418              	.LBB582:
 7419              	.LBB583:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7420              		.loc 2 1123 4 discriminator 1
 7421 00ae F96A     		ldr	r1, [r7, #44]
 7422 00b0 3A6B     		ldr	r2, [r7, #48]
 7423              		.syntax unified
 7424              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7425 00b2 41E80023 		strex r3, r2, [r1]
 7426              	@ 0 "" 2
 7427              		.thumb
 7428              		.syntax unified
 7429 00b6 BB62     		str	r3, [r7, #40]
 7430              		.loc 2 1124 10 discriminator 1
 7431 00b8 BB6A     		ldr	r3, [r7, #40]
 7432              	.LBE583:
 7433              	.LBE582:
 7434              		.loc 1 3054 5 discriminator 1
ARM GAS  /tmp/cc17XZfc.s 			page 206


 7435 00ba 002B     		cmp	r3, #0
 7436 00bc E5D1     		bne	.L377
 7437              	.LBE579:
3055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
3057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 7438              		.loc 1 3057 20
 7439 00be FB6E     		ldr	r3, [r7, #108]
 7440 00c0 2022     		movs	r2, #32
 7441 00c2 83F84220 		strb	r2, [r3, #66]
3058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
3060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 7442              		.loc 1 3060 14
 7443 00c6 FB6E     		ldr	r3, [r7, #108]
 7444 00c8 1B6B     		ldr	r3, [r3, #48]
 7445              		.loc 1 3060 8
 7446 00ca 012B     		cmp	r3, #1
 7447 00cc 19D1     		bne	.L368
 7448              	.L380:
 7449              	.LBB584:
3061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 7450              		.loc 1 3062 7 discriminator 1
 7451 00ce FB6E     		ldr	r3, [r7, #108]
 7452 00d0 1B68     		ldr	r3, [r3]
 7453 00d2 0C33     		adds	r3, r3, #12
 7454 00d4 3B61     		str	r3, [r7, #16]
 7455              	.LBB585:
 7456              	.LBB586:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7457              		.loc 2 1072 4 discriminator 1
 7458 00d6 3B69     		ldr	r3, [r7, #16]
 7459              		.syntax unified
 7460              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7461 00d8 53E8003F 		ldrex r3, [r3]
 7462              	@ 0 "" 2
 7463              		.thumb
 7464              		.syntax unified
 7465 00dc FB60     		str	r3, [r7, #12]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7466              		.loc 2 1073 10 discriminator 1
 7467 00de FB68     		ldr	r3, [r7, #12]
 7468              	.LBE586:
 7469              	.LBE585:
 7470              		.loc 1 3062 7 discriminator 1
 7471 00e0 23F01003 		bic	r3, r3, #16
 7472 00e4 FB65     		str	r3, [r7, #92]
 7473 00e6 FB6E     		ldr	r3, [r7, #108]
 7474 00e8 1B68     		ldr	r3, [r3]
 7475 00ea 0C33     		adds	r3, r3, #12
 7476 00ec FA6D     		ldr	r2, [r7, #92]
 7477 00ee FA61     		str	r2, [r7, #28]
 7478 00f0 BB61     		str	r3, [r7, #24]
 7479              	.LBB587:
 7480              	.LBB588:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/cc17XZfc.s 			page 207


 7481              		.loc 2 1123 4 discriminator 1
 7482 00f2 B969     		ldr	r1, [r7, #24]
 7483 00f4 FA69     		ldr	r2, [r7, #28]
 7484              		.syntax unified
 7485              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7486 00f6 41E80023 		strex r3, r2, [r1]
 7487              	@ 0 "" 2
 7488              		.thumb
 7489              		.syntax unified
 7490 00fa 7B61     		str	r3, [r7, #20]
 7491              		.loc 2 1124 10 discriminator 1
 7492 00fc 7B69     		ldr	r3, [r7, #20]
 7493              	.LBE588:
 7494              	.LBE587:
 7495              		.loc 1 3062 7 discriminator 1
 7496 00fe 002B     		cmp	r3, #0
 7497 0100 E5D1     		bne	.L380
 7498              	.L368:
 7499              	.LBE584:
3063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize type of RxEvent that correspond to RxEvent callback execution;
3067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****    In this case, Rx Event type is Transfer Complete */
3068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_TC;
 7500              		.loc 1 3068 22
 7501 0102 FB6E     		ldr	r3, [r7, #108]
 7502 0104 0022     		movs	r2, #0
 7503 0106 5A63     		str	r2, [r3, #52]
3069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
3071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 7504              		.loc 1 3072 12
 7505 0108 FB6E     		ldr	r3, [r7, #108]
 7506 010a 1B6B     		ldr	r3, [r3, #48]
 7507              		.loc 1 3072 6
 7508 010c 012B     		cmp	r3, #1
 7509 010e 06D1     		bne	.L381
3073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize);
3077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 7510              		.loc 1 3079 5
 7511 0110 FB6E     		ldr	r3, [r7, #108]
 7512 0112 9B8D     		ldrh	r3, [r3, #44]
 7513 0114 1946     		mov	r1, r3
 7514 0116 F86E     		ldr	r0, [r7, #108]
 7515 0118 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
3080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In other cases : use Rx Complete callback */
ARM GAS  /tmp/cc17XZfc.s 			page 208


3085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx complete callback*/
3087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxCpltCallback(huart);
3088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx complete callback*/
3090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_RxCpltCallback(huart);
3091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 7516              		.loc 1 3093 1
 7517 011c 02E0     		b	.L383
 7518              	.L381:
3090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 7519              		.loc 1 3090 5
 7520 011e F86E     		ldr	r0, [r7, #108]
 7521 0120 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 7522              	.L383:
 7523              		.loc 1 3093 1
 7524 0124 00BF     		nop
 7525 0126 7037     		adds	r7, r7, #112
 7526              	.LCFI250:
 7527              		.cfi_def_cfa_offset 8
 7528 0128 BD46     		mov	sp, r7
 7529              	.LCFI251:
 7530              		.cfi_def_cfa_register 13
 7531              		@ sp needed
 7532 012a 80BD     		pop	{r7, pc}
 7533              		.cfi_endproc
 7534              	.LFE110:
 7536              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 7537              		.align	1
 7538              		.syntax unified
 7539              		.thumb
 7540              		.thumb_func
 7542              	UART_DMARxHalfCplt:
 7543              	.LFB111:
3094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback
3097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
3102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7544              		.loc 1 3102 1
 7545              		.cfi_startproc
 7546              		@ args = 0, pretend = 0, frame = 16
 7547              		@ frame_needed = 1, uses_anonymous_args = 0
 7548 0000 80B5     		push	{r7, lr}
 7549              	.LCFI252:
 7550              		.cfi_def_cfa_offset 8
 7551              		.cfi_offset 7, -8
 7552              		.cfi_offset 14, -4
 7553 0002 84B0     		sub	sp, sp, #16
 7554              	.LCFI253:
 7555              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc17XZfc.s 			page 209


 7556 0004 00AF     		add	r7, sp, #0
 7557              	.LCFI254:
 7558              		.cfi_def_cfa_register 7
 7559 0006 7860     		str	r0, [r7, #4]
3103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 7560              		.loc 1 3103 23
 7561 0008 7B68     		ldr	r3, [r7, #4]
 7562 000a 5B6A     		ldr	r3, [r3, #36]
 7563 000c FB60     		str	r3, [r7, #12]
3104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Initialize type of RxEvent that correspond to RxEvent callback execution;
3106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      In this case, Rx Event type is Half Transfer */
3107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxEventType = HAL_UART_RXEVENT_HT;
 7564              		.loc 1 3107 22
 7565 000e FB68     		ldr	r3, [r7, #12]
 7566 0010 0122     		movs	r2, #1
 7567 0012 5A63     		str	r2, [r3, #52]
3108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check current reception Mode :
3110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 7568              		.loc 1 3111 12
 7569 0014 FB68     		ldr	r3, [r7, #12]
 7570 0016 1B6B     		ldr	r3, [r3, #48]
 7571              		.loc 1 3111 6
 7572 0018 012B     		cmp	r3, #1
 7573 001a 08D1     		bne	.L385
3112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize / 2U);
3116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 7574              		.loc 1 3118 44
 7575 001c FB68     		ldr	r3, [r7, #12]
 7576 001e 9B8D     		ldrh	r3, [r3, #44]
 7577              		.loc 1 3118 5
 7578 0020 5B08     		lsrs	r3, r3, #1
 7579 0022 9BB2     		uxth	r3, r3
 7580 0024 1946     		mov	r1, r3
 7581 0026 F868     		ldr	r0, [r7, #12]
 7582 0028 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
3119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* In other cases : use Rx Half Complete callback */
3124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call registered Rx Half complete callback*/
3126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxHalfCpltCallback(huart);
3127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /*Call legacy weak Rx Half complete callback*/
3129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     HAL_UART_RxHalfCpltCallback(huart);
3130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
ARM GAS  /tmp/cc17XZfc.s 			page 210


 7583              		.loc 1 3132 1
 7584 002c 02E0     		b	.L387
 7585              	.L385:
3129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 7586              		.loc 1 3129 5
 7587 002e F868     		ldr	r0, [r7, #12]
 7588 0030 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
 7589              	.L387:
 7590              		.loc 1 3132 1
 7591 0034 00BF     		nop
 7592 0036 1037     		adds	r7, r7, #16
 7593              	.LCFI255:
 7594              		.cfi_def_cfa_offset 8
 7595 0038 BD46     		mov	sp, r7
 7596              	.LCFI256:
 7597              		.cfi_def_cfa_register 13
 7598              		@ sp needed
 7599 003a 80BD     		pop	{r7, pc}
 7600              		.cfi_endproc
 7601              	.LFE111:
 7603              		.section	.text.UART_DMAError,"ax",%progbits
 7604              		.align	1
 7605              		.syntax unified
 7606              		.thumb
 7607              		.thumb_func
 7609              	UART_DMAError:
 7610              	.LFB112:
3133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication error callback.
3136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
3141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7611              		.loc 1 3141 1
 7612              		.cfi_startproc
 7613              		@ args = 0, pretend = 0, frame = 16
 7614              		@ frame_needed = 1, uses_anonymous_args = 0
 7615 0000 80B5     		push	{r7, lr}
 7616              	.LCFI257:
 7617              		.cfi_def_cfa_offset 8
 7618              		.cfi_offset 7, -8
 7619              		.cfi_offset 14, -4
 7620 0002 84B0     		sub	sp, sp, #16
 7621              	.LCFI258:
 7622              		.cfi_def_cfa_offset 24
 7623 0004 00AF     		add	r7, sp, #0
 7624              	.LCFI259:
 7625              		.cfi_def_cfa_register 7
 7626 0006 7860     		str	r0, [r7, #4]
3142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 7627              		.loc 1 3142 12
 7628 0008 0023     		movs	r3, #0
 7629 000a FB60     		str	r3, [r7, #12]
3143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
ARM GAS  /tmp/cc17XZfc.s 			page 211


 7630              		.loc 1 3143 23
 7631 000c 7B68     		ldr	r3, [r7, #4]
 7632 000e 5B6A     		ldr	r3, [r3, #36]
 7633 0010 BB60     		str	r3, [r7, #8]
3144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
3146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 7634              		.loc 1 3146 16
 7635 0012 BB68     		ldr	r3, [r7, #8]
 7636 0014 1B68     		ldr	r3, [r3]
 7637 0016 5B69     		ldr	r3, [r3, #20]
 7638 0018 03F08003 		and	r3, r3, #128
 7639 001c 002B     		cmp	r3, #0
 7640 001e 14BF     		ite	ne
 7641 0020 0123     		movne	r3, #1
 7642 0022 0023     		moveq	r3, #0
 7643 0024 DBB2     		uxtb	r3, r3
 7644              		.loc 1 3146 14
 7645 0026 FB60     		str	r3, [r7, #12]
3147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 7646              		.loc 1 3147 13
 7647 0028 BB68     		ldr	r3, [r7, #8]
 7648 002a 93F84130 		ldrb	r3, [r3, #65]
 7649 002e DBB2     		uxtb	r3, r3
 7650              		.loc 1 3147 6
 7651 0030 212B     		cmp	r3, #33
 7652 0032 08D1     		bne	.L389
 7653              		.loc 1 3147 49 discriminator 1
 7654 0034 FB68     		ldr	r3, [r7, #12]
 7655 0036 002B     		cmp	r3, #0
 7656 0038 05D0     		beq	.L389
3148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 7657              		.loc 1 3149 24
 7658 003a BB68     		ldr	r3, [r7, #8]
 7659 003c 0022     		movs	r2, #0
 7660 003e DA84     		strh	r2, [r3, #38]	@ movhi
3150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 7661              		.loc 1 3150 5
 7662 0040 B868     		ldr	r0, [r7, #8]
 7663 0042 FFF7FEFF 		bl	UART_EndTxTransfer
 7664              	.L389:
3151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
3154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 7665              		.loc 1 3154 16
 7666 0046 BB68     		ldr	r3, [r7, #8]
 7667 0048 1B68     		ldr	r3, [r3]
 7668 004a 5B69     		ldr	r3, [r3, #20]
 7669 004c 03F04003 		and	r3, r3, #64
 7670 0050 002B     		cmp	r3, #0
 7671 0052 14BF     		ite	ne
 7672 0054 0123     		movne	r3, #1
 7673 0056 0023     		moveq	r3, #0
 7674 0058 DBB2     		uxtb	r3, r3
 7675              		.loc 1 3154 14
ARM GAS  /tmp/cc17XZfc.s 			page 212


 7676 005a FB60     		str	r3, [r7, #12]
3155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 7677              		.loc 1 3155 13
 7678 005c BB68     		ldr	r3, [r7, #8]
 7679 005e 93F84230 		ldrb	r3, [r3, #66]
 7680 0062 DBB2     		uxtb	r3, r3
 7681              		.loc 1 3155 6
 7682 0064 222B     		cmp	r3, #34
 7683 0066 08D1     		bne	.L390
 7684              		.loc 1 3155 50 discriminator 1
 7685 0068 FB68     		ldr	r3, [r7, #12]
 7686 006a 002B     		cmp	r3, #0
 7687 006c 05D0     		beq	.L390
3156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 7688              		.loc 1 3157 24
 7689 006e BB68     		ldr	r3, [r7, #8]
 7690 0070 0022     		movs	r2, #0
 7691 0072 DA85     		strh	r2, [r3, #46]	@ movhi
3158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 7692              		.loc 1 3158 5
 7693 0074 B868     		ldr	r0, [r7, #8]
 7694 0076 FFF7FEFF 		bl	UART_EndRxTransfer
 7695              	.L390:
3159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 7696              		.loc 1 3161 20
 7697 007a BB68     		ldr	r3, [r7, #8]
 7698 007c 5B6C     		ldr	r3, [r3, #68]
 7699 007e 43F01002 		orr	r2, r3, #16
 7700 0082 BB68     		ldr	r3, [r7, #8]
 7701 0084 5A64     		str	r2, [r3, #68]
3162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered error callback*/
3164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback(huart);
3165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak error callback*/
3167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 7702              		.loc 1 3167 3
 7703 0086 B868     		ldr	r0, [r7, #8]
 7704 0088 FFF7FEFF 		bl	HAL_UART_ErrorCallback
3168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 7705              		.loc 1 3169 1
 7706 008c 00BF     		nop
 7707 008e 1037     		adds	r7, r7, #16
 7708              	.LCFI260:
 7709              		.cfi_def_cfa_offset 8
 7710 0090 BD46     		mov	sp, r7
 7711              	.LCFI261:
 7712              		.cfi_def_cfa_register 13
 7713              		@ sp needed
 7714 0092 80BD     		pop	{r7, pc}
 7715              		.cfi_endproc
 7716              	.LFE112:
 7718              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
ARM GAS  /tmp/cc17XZfc.s 			page 213


 7719              		.align	1
 7720              		.syntax unified
 7721              		.thumb
 7722              		.thumb_func
 7724              	UART_WaitOnFlagUntilTimeout:
 7725              	.LFB113:
3170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  This function handles UART Communication Timeout. It waits
3173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         until a flag is no longer in the specified status.
3174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Flag specifies the UART flag to check.
3177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Status The actual Flag status (SET or RESET).
3178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Tickstart Tick start value
3179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Timeout Timeout duration
3180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
3183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****                                                      uint32_t Tickstart, uint32_t Timeout)
3184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7726              		.loc 1 3184 1
 7727              		.cfi_startproc
 7728              		@ args = 4, pretend = 0, frame = 64
 7729              		@ frame_needed = 1, uses_anonymous_args = 0
 7730 0000 80B5     		push	{r7, lr}
 7731              	.LCFI262:
 7732              		.cfi_def_cfa_offset 8
 7733              		.cfi_offset 7, -8
 7734              		.cfi_offset 14, -4
 7735 0002 90B0     		sub	sp, sp, #64
 7736              	.LCFI263:
 7737              		.cfi_def_cfa_offset 72
 7738 0004 00AF     		add	r7, sp, #0
 7739              	.LCFI264:
 7740              		.cfi_def_cfa_register 7
 7741 0006 F860     		str	r0, [r7, #12]
 7742 0008 B960     		str	r1, [r7, #8]
 7743 000a 3B60     		str	r3, [r7]
 7744 000c 1346     		mov	r3, r2
 7745 000e FB71     		strb	r3, [r7, #7]
3185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Wait until flag is set */
3186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 7746              		.loc 1 3186 9
 7747 0010 50E0     		b	.L392
 7748              	.L401:
3187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Check for the Timeout */
3189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
 7749              		.loc 1 3189 8
 7750 0012 BB6C     		ldr	r3, [r7, #72]
 7751 0014 B3F1FF3F 		cmp	r3, #-1
 7752 0018 4CD0     		beq	.L392
3190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 7753              		.loc 1 3191 10
 7754 001a BB6C     		ldr	r3, [r7, #72]
ARM GAS  /tmp/cc17XZfc.s 			page 214


 7755 001c 002B     		cmp	r3, #0
 7756 001e 07D0     		beq	.L396
 7757              		.loc 1 3191 32 discriminator 1
 7758 0020 FFF7FEFF 		bl	HAL_GetTick
 7759 0024 0246     		mov	r2, r0
 7760              		.loc 1 3191 46 discriminator 1
 7761 0026 3B68     		ldr	r3, [r7]
 7762 0028 D31A     		subs	r3, r2, r3
 7763              		.loc 1 3191 27 discriminator 1
 7764 002a BA6C     		ldr	r2, [r7, #72]
 7765 002c 9A42     		cmp	r2, r3
 7766 002e 41D2     		bcs	.L392
 7767              	.L396:
 7768              	.LBB589:
3192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
3194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE
 7769              		.loc 1 3194 9 discriminator 1
 7770 0030 FB68     		ldr	r3, [r7, #12]
 7771 0032 1B68     		ldr	r3, [r3]
 7772 0034 0C33     		adds	r3, r3, #12
 7773 0036 BB62     		str	r3, [r7, #40]
 7774              	.LBB590:
 7775              	.LBB591:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7776              		.loc 2 1072 4 discriminator 1
 7777 0038 BB6A     		ldr	r3, [r7, #40]
 7778              		.syntax unified
 7779              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7780 003a 53E8003F 		ldrex r3, [r3]
 7781              	@ 0 "" 2
 7782              		.thumb
 7783              		.syntax unified
 7784 003e 7B62     		str	r3, [r7, #36]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7785              		.loc 2 1073 10 discriminator 1
 7786 0040 7B6A     		ldr	r3, [r7, #36]
 7787              	.LBE591:
 7788              	.LBE590:
 7789              		.loc 1 3194 9 discriminator 1
 7790 0042 23F4D073 		bic	r3, r3, #416
 7791 0046 FB63     		str	r3, [r7, #60]
 7792 0048 FB68     		ldr	r3, [r7, #12]
 7793 004a 1B68     		ldr	r3, [r3]
 7794 004c 0C33     		adds	r3, r3, #12
 7795 004e FA6B     		ldr	r2, [r7, #60]
 7796 0050 7A63     		str	r2, [r7, #52]
 7797 0052 3B63     		str	r3, [r7, #48]
 7798              	.LBB592:
 7799              	.LBB593:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7800              		.loc 2 1123 4 discriminator 1
 7801 0054 396B     		ldr	r1, [r7, #48]
 7802 0056 7A6B     		ldr	r2, [r7, #52]
 7803              		.syntax unified
 7804              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7805 0058 41E80023 		strex r3, r2, [r1]
ARM GAS  /tmp/cc17XZfc.s 			page 215


 7806              	@ 0 "" 2
 7807              		.thumb
 7808              		.syntax unified
 7809 005c FB62     		str	r3, [r7, #44]
 7810              		.loc 2 1124 10 discriminator 1
 7811 005e FB6A     		ldr	r3, [r7, #44]
 7812              	.LBE593:
 7813              	.LBE592:
 7814              		.loc 1 3194 9 discriminator 1
 7815 0060 002B     		cmp	r3, #0
 7816 0062 E5D1     		bne	.L396
 7817              	.L399:
 7818              	.LBE589:
 7819              	.LBB594:
3195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 7820              		.loc 1 3195 9 discriminator 1
 7821 0064 FB68     		ldr	r3, [r7, #12]
 7822 0066 1B68     		ldr	r3, [r3]
 7823 0068 1433     		adds	r3, r3, #20
 7824 006a 7B61     		str	r3, [r7, #20]
 7825              	.LBB595:
 7826              	.LBB596:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7827              		.loc 2 1072 4 discriminator 1
 7828 006c 7B69     		ldr	r3, [r7, #20]
 7829              		.syntax unified
 7830              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7831 006e 53E8003F 		ldrex r3, [r3]
 7832              	@ 0 "" 2
 7833              		.thumb
 7834              		.syntax unified
 7835 0072 3B61     		str	r3, [r7, #16]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 7836              		.loc 2 1073 10 discriminator 1
 7837 0074 3B69     		ldr	r3, [r7, #16]
 7838              	.LBE596:
 7839              	.LBE595:
 7840              		.loc 1 3195 9 discriminator 1
 7841 0076 23F00103 		bic	r3, r3, #1
 7842 007a BB63     		str	r3, [r7, #56]
 7843 007c FB68     		ldr	r3, [r7, #12]
 7844 007e 1B68     		ldr	r3, [r3]
 7845 0080 1433     		adds	r3, r3, #20
 7846 0082 BA6B     		ldr	r2, [r7, #56]
 7847 0084 3A62     		str	r2, [r7, #32]
 7848 0086 FB61     		str	r3, [r7, #28]
 7849              	.LBB597:
 7850              	.LBB598:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 7851              		.loc 2 1123 4 discriminator 1
 7852 0088 F969     		ldr	r1, [r7, #28]
 7853 008a 3A6A     		ldr	r2, [r7, #32]
 7854              		.syntax unified
 7855              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7856 008c 41E80023 		strex r3, r2, [r1]
 7857              	@ 0 "" 2
 7858              		.thumb
ARM GAS  /tmp/cc17XZfc.s 			page 216


 7859              		.syntax unified
 7860 0090 BB61     		str	r3, [r7, #24]
 7861              		.loc 2 1124 10 discriminator 1
 7862 0092 BB69     		ldr	r3, [r7, #24]
 7863              	.LBE598:
 7864              	.LBE597:
 7865              		.loc 1 3195 9 discriminator 1
 7866 0094 002B     		cmp	r3, #0
 7867 0096 E5D1     		bne	.L399
 7868              	.LBE594:
3196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->gState  = HAL_UART_STATE_READY;
 7869              		.loc 1 3197 24
 7870 0098 FB68     		ldr	r3, [r7, #12]
 7871 009a 2022     		movs	r2, #32
 7872 009c 83F84120 		strb	r2, [r3, #65]
3198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 7873              		.loc 1 3198 24
 7874 00a0 FB68     		ldr	r3, [r7, #12]
 7875 00a2 2022     		movs	r2, #32
 7876 00a4 83F84220 		strb	r2, [r3, #66]
3199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Process Unlocked */
3201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         __HAL_UNLOCK(huart);
 7877              		.loc 1 3201 9
 7878 00a8 FB68     		ldr	r3, [r7, #12]
 7879 00aa 0022     		movs	r2, #0
 7880 00ac 83F84020 		strb	r2, [r3, #64]
3202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         return HAL_TIMEOUT;
 7881              		.loc 1 3203 16
 7882 00b0 0323     		movs	r3, #3
 7883 00b2 0FE0     		b	.L400
 7884              	.L392:
3186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 7885              		.loc 1 3186 11
 7886 00b4 FB68     		ldr	r3, [r7, #12]
 7887 00b6 1B68     		ldr	r3, [r3]
 7888 00b8 1A68     		ldr	r2, [r3]
 7889 00ba BB68     		ldr	r3, [r7, #8]
 7890 00bc 1340     		ands	r3, r3, r2
3186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 7891              		.loc 1 3186 50
 7892 00be BA68     		ldr	r2, [r7, #8]
 7893 00c0 9A42     		cmp	r2, r3
 7894 00c2 0CBF     		ite	eq
 7895 00c4 0123     		moveq	r3, #1
 7896 00c6 0023     		movne	r3, #0
 7897 00c8 DBB2     		uxtb	r3, r3
 7898 00ca 1A46     		mov	r2, r3
3186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 7899              		.loc 1 3186 59
 7900 00cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
3186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
 7901              		.loc 1 3186 9
 7902 00ce 9A42     		cmp	r2, r3
 7903 00d0 9FD0     		beq	.L401
ARM GAS  /tmp/cc17XZfc.s 			page 217


3204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 7904              		.loc 1 3207 10
 7905 00d2 0023     		movs	r3, #0
 7906              	.L400:
3208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 7907              		.loc 1 3208 1
 7908 00d4 1846     		mov	r0, r3
 7909 00d6 4037     		adds	r7, r7, #64
 7910              	.LCFI265:
 7911              		.cfi_def_cfa_offset 8
 7912 00d8 BD46     		mov	sp, r7
 7913              	.LCFI266:
 7914              		.cfi_def_cfa_register 13
 7915              		@ sp needed
 7916 00da 80BD     		pop	{r7, pc}
 7917              		.cfi_endproc
 7918              	.LFE113:
 7920              		.section	.text.UART_Start_Receive_IT,"ax",%progbits
 7921              		.align	1
 7922              		.global	UART_Start_Receive_IT
 7923              		.syntax unified
 7924              		.thumb
 7925              		.thumb_func
 7927              	UART_Start_Receive_IT:
 7928              	.LFB114:
3209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Start Receive operation in interrupt mode.
3212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in Interrupt mode
3213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 7929              		.loc 1 3222 1
 7930              		.cfi_startproc
 7931              		@ args = 0, pretend = 0, frame = 16
 7932              		@ frame_needed = 1, uses_anonymous_args = 0
 7933              		@ link register save eliminated.
 7934 0000 80B4     		push	{r7}
 7935              	.LCFI267:
 7936              		.cfi_def_cfa_offset 4
 7937              		.cfi_offset 7, -4
 7938 0002 85B0     		sub	sp, sp, #20
 7939              	.LCFI268:
 7940              		.cfi_def_cfa_offset 24
 7941 0004 00AF     		add	r7, sp, #0
 7942              	.LCFI269:
 7943              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cc17XZfc.s 			page 218


 7944 0006 F860     		str	r0, [r7, #12]
 7945 0008 B960     		str	r1, [r7, #8]
 7946 000a 1346     		mov	r3, r2
 7947 000c FB80     		strh	r3, [r7, #6]	@ movhi
3223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
 7948              		.loc 1 3223 21
 7949 000e FB68     		ldr	r3, [r7, #12]
 7950 0010 BA68     		ldr	r2, [r7, #8]
 7951 0012 9A62     		str	r2, [r3, #40]
3224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferSize = Size;
 7952              		.loc 1 3224 21
 7953 0014 FB68     		ldr	r3, [r7, #12]
 7954 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 7955 0018 9A85     		strh	r2, [r3, #44]	@ movhi
3225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = Size;
 7956              		.loc 1 3225 22
 7957 001a FB68     		ldr	r3, [r7, #12]
 7958 001c FA88     		ldrh	r2, [r7, #6]	@ movhi
 7959 001e DA85     		strh	r2, [r3, #46]	@ movhi
3226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 7960              		.loc 1 3227 20
 7961 0020 FB68     		ldr	r3, [r7, #12]
 7962 0022 0022     		movs	r2, #0
 7963 0024 5A64     		str	r2, [r3, #68]
3228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 7964              		.loc 1 3228 18
 7965 0026 FB68     		ldr	r3, [r7, #12]
 7966 0028 2222     		movs	r2, #34
 7967 002a 83F84220 		strb	r2, [r3, #66]
3229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.Parity != UART_PARITY_NONE)
 7968              		.loc 1 3230 18
 7969 002e FB68     		ldr	r3, [r7, #12]
 7970 0030 1B69     		ldr	r3, [r3, #16]
 7971              		.loc 1 3230 6
 7972 0032 002B     		cmp	r3, #0
 7973 0034 07D0     		beq	.L403
3231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
3233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 7974              		.loc 1 3233 5
 7975 0036 FB68     		ldr	r3, [r7, #12]
 7976 0038 1B68     		ldr	r3, [r3]
 7977 003a DA68     		ldr	r2, [r3, #12]
 7978 003c FB68     		ldr	r3, [r7, #12]
 7979 003e 1B68     		ldr	r3, [r3]
 7980 0040 42F48072 		orr	r2, r2, #256
 7981 0044 DA60     		str	r2, [r3, #12]
 7982              	.L403:
3234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 7983              		.loc 1 3237 3
 7984 0046 FB68     		ldr	r3, [r7, #12]
 7985 0048 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc17XZfc.s 			page 219


 7986 004a 5A69     		ldr	r2, [r3, #20]
 7987 004c FB68     		ldr	r3, [r7, #12]
 7988 004e 1B68     		ldr	r3, [r3]
 7989 0050 42F00102 		orr	r2, r2, #1
 7990 0054 5A61     		str	r2, [r3, #20]
3238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Data Register not empty Interrupt */
3240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 7991              		.loc 1 3240 3
 7992 0056 FB68     		ldr	r3, [r7, #12]
 7993 0058 1B68     		ldr	r3, [r3]
 7994 005a DA68     		ldr	r2, [r3, #12]
 7995 005c FB68     		ldr	r3, [r7, #12]
 7996 005e 1B68     		ldr	r3, [r3]
 7997 0060 42F02002 		orr	r2, r2, #32
 7998 0064 DA60     		str	r2, [r3, #12]
3241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 7999              		.loc 1 3242 10
 8000 0066 0023     		movs	r3, #0
3243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8001              		.loc 1 3243 1
 8002 0068 1846     		mov	r0, r3
 8003 006a 1437     		adds	r7, r7, #20
 8004              	.LCFI270:
 8005              		.cfi_def_cfa_offset 4
 8006 006c BD46     		mov	sp, r7
 8007              	.LCFI271:
 8008              		.cfi_def_cfa_register 13
 8009              		@ sp needed
 8010 006e 80BC     		pop	{r7}
 8011              	.LCFI272:
 8012              		.cfi_restore 7
 8013              		.cfi_def_cfa_offset 0
 8014 0070 7047     		bx	lr
 8015              		.cfi_endproc
 8016              	.LFE114:
 8018              		.section	.text.UART_Start_Receive_DMA,"ax",%progbits
 8019              		.align	1
 8020              		.global	UART_Start_Receive_DMA
 8021              		.syntax unified
 8022              		.thumb
 8023              		.thumb_func
 8025              	UART_Start_Receive_DMA:
 8026              	.LFB115:
3244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Start Receive operation in DMA mode.
3247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in DMA mode.
3248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  /tmp/cc17XZfc.s 			page 220


3256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8027              		.loc 1 3257 1
 8028              		.cfi_startproc
 8029              		@ args = 0, pretend = 0, frame = 96
 8030              		@ frame_needed = 1, uses_anonymous_args = 0
 8031 0000 80B5     		push	{r7, lr}
 8032              	.LCFI273:
 8033              		.cfi_def_cfa_offset 8
 8034              		.cfi_offset 7, -8
 8035              		.cfi_offset 14, -4
 8036 0002 98B0     		sub	sp, sp, #96
 8037              	.LCFI274:
 8038              		.cfi_def_cfa_offset 104
 8039 0004 00AF     		add	r7, sp, #0
 8040              	.LCFI275:
 8041              		.cfi_def_cfa_register 7
 8042 0006 F860     		str	r0, [r7, #12]
 8043 0008 B960     		str	r1, [r7, #8]
 8044 000a 1346     		mov	r3, r2
 8045 000c FB80     		strh	r3, [r7, #6]	@ movhi
3258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t *tmp;
3259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
 8046              		.loc 1 3260 21
 8047 000e BA68     		ldr	r2, [r7, #8]
 8048 0010 FB68     		ldr	r3, [r7, #12]
 8049 0012 9A62     		str	r2, [r3, #40]
3261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferSize = Size;
 8050              		.loc 1 3261 21
 8051 0014 FB68     		ldr	r3, [r7, #12]
 8052 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 8053 0018 9A85     		strh	r2, [r3, #44]	@ movhi
3262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 8054              		.loc 1 3263 20
 8055 001a FB68     		ldr	r3, [r7, #12]
 8056 001c 0022     		movs	r2, #0
 8057 001e 5A64     		str	r2, [r3, #68]
3264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 8058              		.loc 1 3264 18
 8059 0020 FB68     		ldr	r3, [r7, #12]
 8060 0022 2222     		movs	r2, #34
 8061 0024 83F84220 		strb	r2, [r3, #66]
3265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART DMA transfer complete callback */
3267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8062              		.loc 1 3267 8
 8063 0028 FB68     		ldr	r3, [r7, #12]
 8064 002a DB6B     		ldr	r3, [r3, #60]
 8065              		.loc 1 3267 35
 8066 002c 3E4A     		ldr	r2, .L417
 8067 002e 9A62     		str	r2, [r3, #40]
3268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the UART DMA Half transfer complete callback */
3270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8068              		.loc 1 3270 8
ARM GAS  /tmp/cc17XZfc.s 			page 221


 8069 0030 FB68     		ldr	r3, [r7, #12]
 8070 0032 DB6B     		ldr	r3, [r3, #60]
 8071              		.loc 1 3270 39
 8072 0034 3D4A     		ldr	r2, .L417+4
 8073 0036 DA62     		str	r2, [r3, #44]
3271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the DMA error callback */
3273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferErrorCallback = UART_DMAError;
 8074              		.loc 1 3273 8
 8075 0038 FB68     		ldr	r3, [r7, #12]
 8076 003a DB6B     		ldr	r3, [r3, #60]
 8077              		.loc 1 3273 36
 8078 003c 3C4A     		ldr	r2, .L417+8
 8079 003e 1A63     		str	r2, [r3, #48]
3274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Set the DMA abort callback */
3276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 8080              		.loc 1 3276 8
 8081 0040 FB68     		ldr	r3, [r7, #12]
 8082 0042 DB6B     		ldr	r3, [r3, #60]
 8083              		.loc 1 3276 36
 8084 0044 0022     		movs	r2, #0
 8085 0046 5A63     		str	r2, [r3, #52]
3277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the DMA stream */
3279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmp = (uint32_t *)&pData;
 8086              		.loc 1 3279 7
 8087 0048 07F10803 		add	r3, r7, #8
 8088 004c FB65     		str	r3, [r7, #92]
3280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8089              		.loc 1 3280 3
 8090 004e FB68     		ldr	r3, [r7, #12]
 8091 0050 D86B     		ldr	r0, [r3, #60]
 8092              		.loc 1 3280 51
 8093 0052 FB68     		ldr	r3, [r7, #12]
 8094 0054 1B68     		ldr	r3, [r3]
 8095              		.loc 1 3280 45
 8096 0056 0433     		adds	r3, r3, #4
 8097              		.loc 1 3280 3
 8098 0058 1946     		mov	r1, r3
 8099 005a FB6D     		ldr	r3, [r7, #92]
 8100 005c 1A68     		ldr	r2, [r3]
 8101 005e FB88     		ldrh	r3, [r7, #6]
 8102 0060 FFF7FEFF 		bl	HAL_DMA_Start_IT
 8103              	.LBB599:
3281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the secon
3283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_CLEAR_OREFLAG(huart);
 8104              		.loc 1 3283 3
 8105 0064 0023     		movs	r3, #0
 8106 0066 3B61     		str	r3, [r7, #16]
 8107 0068 FB68     		ldr	r3, [r7, #12]
 8108 006a 1B68     		ldr	r3, [r3]
 8109 006c 1B68     		ldr	r3, [r3]
 8110 006e 3B61     		str	r3, [r7, #16]
 8111 0070 FB68     		ldr	r3, [r7, #12]
 8112 0072 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc17XZfc.s 			page 222


 8113 0074 5B68     		ldr	r3, [r3, #4]
 8114 0076 3B61     		str	r3, [r7, #16]
 8115 0078 3B69     		ldr	r3, [r7, #16]
 8116              	.LBE599:
3284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.Parity != UART_PARITY_NONE)
 8117              		.loc 1 3285 18
 8118 007a FB68     		ldr	r3, [r7, #12]
 8119 007c 1B69     		ldr	r3, [r3, #16]
 8120              		.loc 1 3285 6
 8121 007e 002B     		cmp	r3, #0
 8122 0080 19D0     		beq	.L412
 8123              	.L409:
 8124              	.LBB600:
3286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
3288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8125              		.loc 1 3288 5 discriminator 1
 8126 0082 FB68     		ldr	r3, [r7, #12]
 8127 0084 1B68     		ldr	r3, [r3]
 8128 0086 0C33     		adds	r3, r3, #12
 8129 0088 3B64     		str	r3, [r7, #64]
 8130              	.LBB601:
 8131              	.LBB602:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8132              		.loc 2 1072 4 discriminator 1
 8133 008a 3B6C     		ldr	r3, [r7, #64]
 8134              		.syntax unified
 8135              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8136 008c 53E8003F 		ldrex r3, [r3]
 8137              	@ 0 "" 2
 8138              		.thumb
 8139              		.syntax unified
 8140 0090 FB63     		str	r3, [r7, #60]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8141              		.loc 2 1073 10 discriminator 1
 8142 0092 FB6B     		ldr	r3, [r7, #60]
 8143              	.LBE602:
 8144              	.LBE601:
 8145              		.loc 1 3288 5 discriminator 1
 8146 0094 43F48073 		orr	r3, r3, #256
 8147 0098 BB65     		str	r3, [r7, #88]
 8148 009a FB68     		ldr	r3, [r7, #12]
 8149 009c 1B68     		ldr	r3, [r3]
 8150 009e 0C33     		adds	r3, r3, #12
 8151 00a0 BA6D     		ldr	r2, [r7, #88]
 8152 00a2 FA64     		str	r2, [r7, #76]
 8153 00a4 BB64     		str	r3, [r7, #72]
 8154              	.LBB603:
 8155              	.LBB604:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8156              		.loc 2 1123 4 discriminator 1
 8157 00a6 B96C     		ldr	r1, [r7, #72]
 8158 00a8 FA6C     		ldr	r2, [r7, #76]
 8159              		.syntax unified
 8160              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8161 00aa 41E80023 		strex r3, r2, [r1]
ARM GAS  /tmp/cc17XZfc.s 			page 223


 8162              	@ 0 "" 2
 8163              		.thumb
 8164              		.syntax unified
 8165 00ae 7B64     		str	r3, [r7, #68]
 8166              		.loc 2 1124 10 discriminator 1
 8167 00b0 7B6C     		ldr	r3, [r7, #68]
 8168              	.LBE604:
 8169              	.LBE603:
 8170              		.loc 1 3288 5 discriminator 1
 8171 00b2 002B     		cmp	r3, #0
 8172 00b4 E5D1     		bne	.L409
 8173              	.L412:
 8174              	.LBE600:
 8175              	.LBB605:
3289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8176              		.loc 1 3292 3 discriminator 1
 8177 00b6 FB68     		ldr	r3, [r7, #12]
 8178 00b8 1B68     		ldr	r3, [r3]
 8179 00ba 1433     		adds	r3, r3, #20
 8180 00bc FB62     		str	r3, [r7, #44]
 8181              	.LBB606:
 8182              	.LBB607:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8183              		.loc 2 1072 4 discriminator 1
 8184 00be FB6A     		ldr	r3, [r7, #44]
 8185              		.syntax unified
 8186              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8187 00c0 53E8003F 		ldrex r3, [r3]
 8188              	@ 0 "" 2
 8189              		.thumb
 8190              		.syntax unified
 8191 00c4 BB62     		str	r3, [r7, #40]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8192              		.loc 2 1073 10 discriminator 1
 8193 00c6 BB6A     		ldr	r3, [r7, #40]
 8194              	.LBE607:
 8195              	.LBE606:
 8196              		.loc 1 3292 3 discriminator 1
 8197 00c8 43F00103 		orr	r3, r3, #1
 8198 00cc 7B65     		str	r3, [r7, #84]
 8199 00ce FB68     		ldr	r3, [r7, #12]
 8200 00d0 1B68     		ldr	r3, [r3]
 8201 00d2 1433     		adds	r3, r3, #20
 8202 00d4 7A6D     		ldr	r2, [r7, #84]
 8203 00d6 BA63     		str	r2, [r7, #56]
 8204 00d8 7B63     		str	r3, [r7, #52]
 8205              	.LBB608:
 8206              	.LBB609:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8207              		.loc 2 1123 4 discriminator 1
 8208 00da 796B     		ldr	r1, [r7, #52]
 8209 00dc BA6B     		ldr	r2, [r7, #56]
 8210              		.syntax unified
 8211              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cc17XZfc.s 			page 224


 8212 00de 41E80023 		strex r3, r2, [r1]
 8213              	@ 0 "" 2
 8214              		.thumb
 8215              		.syntax unified
 8216 00e2 3B63     		str	r3, [r7, #48]
 8217              		.loc 2 1124 10 discriminator 1
 8218 00e4 3B6B     		ldr	r3, [r7, #48]
 8219              	.LBE609:
 8220              	.LBE608:
 8221              		.loc 1 3292 3 discriminator 1
 8222 00e6 002B     		cmp	r3, #0
 8223 00e8 E5D1     		bne	.L412
 8224              	.L415:
 8225              	.LBE605:
 8226              	.LBB610:
3293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Enable the DMA transfer for the receiver request by setting the DMAR bit
3295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   in the UART CR3 register */
3296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8227              		.loc 1 3296 3 discriminator 1
 8228 00ea FB68     		ldr	r3, [r7, #12]
 8229 00ec 1B68     		ldr	r3, [r3]
 8230 00ee 1433     		adds	r3, r3, #20
 8231 00f0 BB61     		str	r3, [r7, #24]
 8232              	.LBB611:
 8233              	.LBB612:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8234              		.loc 2 1072 4 discriminator 1
 8235 00f2 BB69     		ldr	r3, [r7, #24]
 8236              		.syntax unified
 8237              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8238 00f4 53E8003F 		ldrex r3, [r3]
 8239              	@ 0 "" 2
 8240              		.thumb
 8241              		.syntax unified
 8242 00f8 7B61     		str	r3, [r7, #20]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8243              		.loc 2 1073 10 discriminator 1
 8244 00fa 7B69     		ldr	r3, [r7, #20]
 8245              	.LBE612:
 8246              	.LBE611:
 8247              		.loc 1 3296 3 discriminator 1
 8248 00fc 43F04003 		orr	r3, r3, #64
 8249 0100 3B65     		str	r3, [r7, #80]
 8250 0102 FB68     		ldr	r3, [r7, #12]
 8251 0104 1B68     		ldr	r3, [r3]
 8252 0106 1433     		adds	r3, r3, #20
 8253 0108 3A6D     		ldr	r2, [r7, #80]
 8254 010a 7A62     		str	r2, [r7, #36]
 8255 010c 3B62     		str	r3, [r7, #32]
 8256              	.LBB613:
 8257              	.LBB614:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8258              		.loc 2 1123 4 discriminator 1
 8259 010e 396A     		ldr	r1, [r7, #32]
 8260 0110 7A6A     		ldr	r2, [r7, #36]
 8261              		.syntax unified
ARM GAS  /tmp/cc17XZfc.s 			page 225


 8262              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8263 0112 41E80023 		strex r3, r2, [r1]
 8264              	@ 0 "" 2
 8265              		.thumb
 8266              		.syntax unified
 8267 0116 FB61     		str	r3, [r7, #28]
 8268              		.loc 2 1124 10 discriminator 1
 8269 0118 FB69     		ldr	r3, [r7, #28]
 8270              	.LBE614:
 8271              	.LBE613:
 8272              		.loc 1 3296 3 discriminator 1
 8273 011a 002B     		cmp	r3, #0
 8274 011c E5D1     		bne	.L415
 8275              	.LBE610:
3297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 8276              		.loc 1 3298 10
 8277 011e 0023     		movs	r3, #0
3299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8278              		.loc 1 3299 1
 8279 0120 1846     		mov	r0, r3
 8280 0122 6037     		adds	r7, r7, #96
 8281              	.LCFI276:
 8282              		.cfi_def_cfa_offset 8
 8283 0124 BD46     		mov	sp, r7
 8284              	.LCFI277:
 8285              		.cfi_def_cfa_register 13
 8286              		@ sp needed
 8287 0126 80BD     		pop	{r7, pc}
 8288              	.L418:
 8289              		.align	2
 8290              	.L417:
 8291 0128 00000000 		.word	UART_DMAReceiveCplt
 8292 012c 00000000 		.word	UART_DMARxHalfCplt
 8293 0130 00000000 		.word	UART_DMAError
 8294              		.cfi_endproc
 8295              	.LFE115:
 8297              		.section	.text.UART_EndTxTransfer,"ax",%progbits
 8298              		.align	1
 8299              		.syntax unified
 8300              		.thumb
 8301              		.thumb_func
 8303              	UART_EndTxTransfer:
 8304              	.LFB116:
3300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
3303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
3307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8305              		.loc 1 3307 1
 8306              		.cfi_startproc
 8307              		@ args = 0, pretend = 0, frame = 32
 8308              		@ frame_needed = 1, uses_anonymous_args = 0
 8309              		@ link register save eliminated.
ARM GAS  /tmp/cc17XZfc.s 			page 226


 8310 0000 80B4     		push	{r7}
 8311              	.LCFI278:
 8312              		.cfi_def_cfa_offset 4
 8313              		.cfi_offset 7, -4
 8314 0002 89B0     		sub	sp, sp, #36
 8315              	.LCFI279:
 8316              		.cfi_def_cfa_offset 40
 8317 0004 00AF     		add	r7, sp, #0
 8318              	.LCFI280:
 8319              		.cfi_def_cfa_register 7
 8320 0006 7860     		str	r0, [r7, #4]
 8321              	.L422:
 8322              	.LBB615:
3308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
3309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8323              		.loc 1 3309 3 discriminator 1
 8324 0008 7B68     		ldr	r3, [r7, #4]
 8325 000a 1B68     		ldr	r3, [r3]
 8326 000c 0C33     		adds	r3, r3, #12
 8327 000e FB60     		str	r3, [r7, #12]
 8328              	.LBB616:
 8329              	.LBB617:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8330              		.loc 2 1072 4 discriminator 1
 8331 0010 FB68     		ldr	r3, [r7, #12]
 8332              		.syntax unified
 8333              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8334 0012 53E8003F 		ldrex r3, [r3]
 8335              	@ 0 "" 2
 8336              		.thumb
 8337              		.syntax unified
 8338 0016 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8339              		.loc 2 1073 10 discriminator 1
 8340 0018 BB68     		ldr	r3, [r7, #8]
 8341              	.LBE617:
 8342              	.LBE616:
 8343              		.loc 1 3309 3 discriminator 1
 8344 001a 23F0C003 		bic	r3, r3, #192
 8345 001e FB61     		str	r3, [r7, #28]
 8346 0020 7B68     		ldr	r3, [r7, #4]
 8347 0022 1B68     		ldr	r3, [r3]
 8348 0024 0C33     		adds	r3, r3, #12
 8349 0026 FA69     		ldr	r2, [r7, #28]
 8350 0028 BA61     		str	r2, [r7, #24]
 8351 002a 7B61     		str	r3, [r7, #20]
 8352              	.LBB618:
 8353              	.LBB619:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8354              		.loc 2 1123 4 discriminator 1
 8355 002c 7969     		ldr	r1, [r7, #20]
 8356 002e BA69     		ldr	r2, [r7, #24]
 8357              		.syntax unified
 8358              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8359 0030 41E80023 		strex r3, r2, [r1]
 8360              	@ 0 "" 2
 8361              		.thumb
ARM GAS  /tmp/cc17XZfc.s 			page 227


 8362              		.syntax unified
 8363 0034 3B61     		str	r3, [r7, #16]
 8364              		.loc 2 1124 10 discriminator 1
 8365 0036 3B69     		ldr	r3, [r7, #16]
 8366              	.LBE619:
 8367              	.LBE618:
 8368              		.loc 1 3309 3 discriminator 1
 8369 0038 002B     		cmp	r3, #0
 8370 003a E5D1     		bne	.L422
 8371              	.LBE615:
3310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
3312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 8372              		.loc 1 3312 17
 8373 003c 7B68     		ldr	r3, [r7, #4]
 8374 003e 2022     		movs	r2, #32
 8375 0040 83F84120 		strb	r2, [r3, #65]
3313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8376              		.loc 1 3313 1
 8377 0044 00BF     		nop
 8378 0046 2437     		adds	r7, r7, #36
 8379              	.LCFI281:
 8380              		.cfi_def_cfa_offset 4
 8381 0048 BD46     		mov	sp, r7
 8382              	.LCFI282:
 8383              		.cfi_def_cfa_register 13
 8384              		@ sp needed
 8385 004a 80BC     		pop	{r7}
 8386              	.LCFI283:
 8387              		.cfi_restore 7
 8388              		.cfi_def_cfa_offset 0
 8389 004c 7047     		bx	lr
 8390              		.cfi_endproc
 8391              	.LFE116:
 8393              		.section	.text.UART_EndRxTransfer,"ax",%progbits
 8394              		.align	1
 8395              		.syntax unified
 8396              		.thumb
 8397              		.thumb_func
 8399              	UART_EndRxTransfer:
 8400              	.LFB117:
3314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
3317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart UART handle.
3318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
3321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8401              		.loc 1 3321 1
 8402              		.cfi_startproc
 8403              		@ args = 0, pretend = 0, frame = 80
 8404              		@ frame_needed = 1, uses_anonymous_args = 0
 8405              		@ link register save eliminated.
 8406 0000 80B4     		push	{r7}
 8407              	.LCFI284:
 8408              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc17XZfc.s 			page 228


 8409              		.cfi_offset 7, -4
 8410 0002 95B0     		sub	sp, sp, #84
 8411              	.LCFI285:
 8412              		.cfi_def_cfa_offset 88
 8413 0004 00AF     		add	r7, sp, #0
 8414              	.LCFI286:
 8415              		.cfi_def_cfa_register 7
 8416 0006 7860     		str	r0, [r7, #4]
 8417              	.L426:
 8418              	.LBB620:
3322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8419              		.loc 1 3323 3 discriminator 1
 8420 0008 7B68     		ldr	r3, [r7, #4]
 8421 000a 1B68     		ldr	r3, [r3]
 8422 000c 0C33     		adds	r3, r3, #12
 8423 000e 7B63     		str	r3, [r7, #52]
 8424              	.LBB621:
 8425              	.LBB622:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8426              		.loc 2 1072 4 discriminator 1
 8427 0010 7B6B     		ldr	r3, [r7, #52]
 8428              		.syntax unified
 8429              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8430 0012 53E8003F 		ldrex r3, [r3]
 8431              	@ 0 "" 2
 8432              		.thumb
 8433              		.syntax unified
 8434 0016 3B63     		str	r3, [r7, #48]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8435              		.loc 2 1073 10 discriminator 1
 8436 0018 3B6B     		ldr	r3, [r7, #48]
 8437              	.LBE622:
 8438              	.LBE621:
 8439              		.loc 1 3323 3 discriminator 1
 8440 001a 23F49073 		bic	r3, r3, #288
 8441 001e FB64     		str	r3, [r7, #76]
 8442 0020 7B68     		ldr	r3, [r7, #4]
 8443 0022 1B68     		ldr	r3, [r3]
 8444 0024 0C33     		adds	r3, r3, #12
 8445 0026 FA6C     		ldr	r2, [r7, #76]
 8446 0028 3A64     		str	r2, [r7, #64]
 8447 002a FB63     		str	r3, [r7, #60]
 8448              	.LBB623:
 8449              	.LBB624:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8450              		.loc 2 1123 4 discriminator 1
 8451 002c F96B     		ldr	r1, [r7, #60]
 8452 002e 3A6C     		ldr	r2, [r7, #64]
 8453              		.syntax unified
 8454              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8455 0030 41E80023 		strex r3, r2, [r1]
 8456              	@ 0 "" 2
 8457              		.thumb
 8458              		.syntax unified
 8459 0034 BB63     		str	r3, [r7, #56]
 8460              		.loc 2 1124 10 discriminator 1
ARM GAS  /tmp/cc17XZfc.s 			page 229


 8461 0036 BB6B     		ldr	r3, [r7, #56]
 8462              	.LBE624:
 8463              	.LBE623:
 8464              		.loc 1 3323 3 discriminator 1
 8465 0038 002B     		cmp	r3, #0
 8466 003a E5D1     		bne	.L426
 8467              	.L429:
 8468              	.LBE620:
 8469              	.LBB625:
3324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8470              		.loc 1 3324 3 discriminator 1
 8471 003c 7B68     		ldr	r3, [r7, #4]
 8472 003e 1B68     		ldr	r3, [r3]
 8473 0040 1433     		adds	r3, r3, #20
 8474 0042 3B62     		str	r3, [r7, #32]
 8475              	.LBB626:
 8476              	.LBB627:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8477              		.loc 2 1072 4 discriminator 1
 8478 0044 3B6A     		ldr	r3, [r7, #32]
 8479              		.syntax unified
 8480              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8481 0046 53E8003F 		ldrex r3, [r3]
 8482              	@ 0 "" 2
 8483              		.thumb
 8484              		.syntax unified
 8485 004a FB61     		str	r3, [r7, #28]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8486              		.loc 2 1073 10 discriminator 1
 8487 004c FB69     		ldr	r3, [r7, #28]
 8488              	.LBE627:
 8489              	.LBE626:
 8490              		.loc 1 3324 3 discriminator 1
 8491 004e 23F00103 		bic	r3, r3, #1
 8492 0052 BB64     		str	r3, [r7, #72]
 8493 0054 7B68     		ldr	r3, [r7, #4]
 8494 0056 1B68     		ldr	r3, [r3]
 8495 0058 1433     		adds	r3, r3, #20
 8496 005a BA6C     		ldr	r2, [r7, #72]
 8497 005c FA62     		str	r2, [r7, #44]
 8498 005e BB62     		str	r3, [r7, #40]
 8499              	.LBB628:
 8500              	.LBB629:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8501              		.loc 2 1123 4 discriminator 1
 8502 0060 B96A     		ldr	r1, [r7, #40]
 8503 0062 FA6A     		ldr	r2, [r7, #44]
 8504              		.syntax unified
 8505              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8506 0064 41E80023 		strex r3, r2, [r1]
 8507              	@ 0 "" 2
 8508              		.thumb
 8509              		.syntax unified
 8510 0068 7B62     		str	r3, [r7, #36]
 8511              		.loc 2 1124 10 discriminator 1
 8512 006a 7B6A     		ldr	r3, [r7, #36]
 8513              	.LBE629:
ARM GAS  /tmp/cc17XZfc.s 			page 230


 8514              	.LBE628:
 8515              		.loc 1 3324 3 discriminator 1
 8516 006c 002B     		cmp	r3, #0
 8517 006e E5D1     		bne	.L429
 8518              	.LBE625:
3325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
3327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8519              		.loc 1 3327 12
 8520 0070 7B68     		ldr	r3, [r7, #4]
 8521 0072 1B6B     		ldr	r3, [r3, #48]
 8522              		.loc 1 3327 6
 8523 0074 012B     		cmp	r3, #1
 8524 0076 19D1     		bne	.L430
 8525              	.L433:
 8526              	.LBB630:
3328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8527              		.loc 1 3329 5 discriminator 1
 8528 0078 7B68     		ldr	r3, [r7, #4]
 8529 007a 1B68     		ldr	r3, [r3]
 8530 007c 0C33     		adds	r3, r3, #12
 8531 007e FB60     		str	r3, [r7, #12]
 8532              	.LBB631:
 8533              	.LBB632:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8534              		.loc 2 1072 4 discriminator 1
 8535 0080 FB68     		ldr	r3, [r7, #12]
 8536              		.syntax unified
 8537              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 8538 0082 53E8003F 		ldrex r3, [r3]
 8539              	@ 0 "" 2
 8540              		.thumb
 8541              		.syntax unified
 8542 0086 BB60     		str	r3, [r7, #8]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 8543              		.loc 2 1073 10 discriminator 1
 8544 0088 BB68     		ldr	r3, [r7, #8]
 8545              	.LBE632:
 8546              	.LBE631:
 8547              		.loc 1 3329 5 discriminator 1
 8548 008a 23F01003 		bic	r3, r3, #16
 8549 008e 7B64     		str	r3, [r7, #68]
 8550 0090 7B68     		ldr	r3, [r7, #4]
 8551 0092 1B68     		ldr	r3, [r3]
 8552 0094 0C33     		adds	r3, r3, #12
 8553 0096 7A6C     		ldr	r2, [r7, #68]
 8554 0098 BA61     		str	r2, [r7, #24]
 8555 009a 7B61     		str	r3, [r7, #20]
 8556              	.LBB633:
 8557              	.LBB634:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 8558              		.loc 2 1123 4 discriminator 1
 8559 009c 7969     		ldr	r1, [r7, #20]
 8560 009e BA69     		ldr	r2, [r7, #24]
 8561              		.syntax unified
 8562              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/cc17XZfc.s 			page 231


 8563 00a0 41E80023 		strex r3, r2, [r1]
 8564              	@ 0 "" 2
 8565              		.thumb
 8566              		.syntax unified
 8567 00a4 3B61     		str	r3, [r7, #16]
 8568              		.loc 2 1124 10 discriminator 1
 8569 00a6 3B69     		ldr	r3, [r7, #16]
 8570              	.LBE634:
 8571              	.LBE633:
 8572              		.loc 1 3329 5 discriminator 1
 8573 00a8 002B     		cmp	r3, #0
 8574 00aa E5D1     		bne	.L433
 8575              	.L430:
 8576              	.LBE630:
3330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
3333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 8577              		.loc 1 3333 18
 8578 00ac 7B68     		ldr	r3, [r7, #4]
 8579 00ae 2022     		movs	r2, #32
 8580 00b0 83F84220 		strb	r2, [r3, #66]
3334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8581              		.loc 1 3334 24
 8582 00b4 7B68     		ldr	r3, [r7, #4]
 8583 00b6 0022     		movs	r2, #0
 8584 00b8 1A63     		str	r2, [r3, #48]
3335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8585              		.loc 1 3335 1
 8586 00ba 00BF     		nop
 8587 00bc 5437     		adds	r7, r7, #84
 8588              	.LCFI287:
 8589              		.cfi_def_cfa_offset 4
 8590 00be BD46     		mov	sp, r7
 8591              	.LCFI288:
 8592              		.cfi_def_cfa_register 13
 8593              		@ sp needed
 8594 00c0 80BC     		pop	{r7}
 8595              	.LCFI289:
 8596              		.cfi_restore 7
 8597              		.cfi_def_cfa_offset 0
 8598 00c2 7047     		bx	lr
 8599              		.cfi_endproc
 8600              	.LFE117:
 8602              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 8603              		.align	1
 8604              		.syntax unified
 8605              		.thumb
 8606              		.thumb_func
 8608              	UART_DMAAbortOnError:
 8609              	.LFB118:
3336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
3339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
3340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
ARM GAS  /tmp/cc17XZfc.s 			page 232


3342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
3345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8610              		.loc 1 3345 1
 8611              		.cfi_startproc
 8612              		@ args = 0, pretend = 0, frame = 16
 8613              		@ frame_needed = 1, uses_anonymous_args = 0
 8614 0000 80B5     		push	{r7, lr}
 8615              	.LCFI290:
 8616              		.cfi_def_cfa_offset 8
 8617              		.cfi_offset 7, -8
 8618              		.cfi_offset 14, -4
 8619 0002 84B0     		sub	sp, sp, #16
 8620              	.LCFI291:
 8621              		.cfi_def_cfa_offset 24
 8622 0004 00AF     		add	r7, sp, #0
 8623              	.LCFI292:
 8624              		.cfi_def_cfa_register 7
 8625 0006 7860     		str	r0, [r7, #4]
3346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8626              		.loc 1 3346 23
 8627 0008 7B68     		ldr	r3, [r7, #4]
 8628 000a 5B6A     		ldr	r3, [r3, #36]
 8629 000c FB60     		str	r3, [r7, #12]
3347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 8630              		.loc 1 3347 22
 8631 000e FB68     		ldr	r3, [r7, #12]
 8632 0010 0022     		movs	r2, #0
 8633 0012 DA85     		strh	r2, [r3, #46]	@ movhi
3348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 8634              		.loc 1 3348 22
 8635 0014 FB68     		ldr	r3, [r7, #12]
 8636 0016 0022     		movs	r2, #0
 8637 0018 DA84     		strh	r2, [r3, #38]	@ movhi
3349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered error callback*/
3352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCallback(huart);
3353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak error callback*/
3355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 8638              		.loc 1 3355 3
 8639 001a F868     		ldr	r0, [r7, #12]
 8640 001c FFF7FEFF 		bl	HAL_UART_ErrorCallback
3356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8641              		.loc 1 3357 1
 8642 0020 00BF     		nop
 8643 0022 1037     		adds	r7, r7, #16
 8644              	.LCFI293:
 8645              		.cfi_def_cfa_offset 8
 8646 0024 BD46     		mov	sp, r7
 8647              	.LCFI294:
 8648              		.cfi_def_cfa_register 13
 8649              		@ sp needed
 8650 0026 80BD     		pop	{r7, pc}
ARM GAS  /tmp/cc17XZfc.s 			page 233


 8651              		.cfi_endproc
 8652              	.LFE118:
 8654              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 8655              		.align	1
 8656              		.syntax unified
 8657              		.thumb
 8658              		.thumb_func
 8660              	UART_DMATxAbortCallback:
 8661              	.LFB119:
3358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
3361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
3362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
3364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
3369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8662              		.loc 1 3369 1
 8663              		.cfi_startproc
 8664              		@ args = 0, pretend = 0, frame = 16
 8665              		@ frame_needed = 1, uses_anonymous_args = 0
 8666 0000 80B5     		push	{r7, lr}
 8667              	.LCFI295:
 8668              		.cfi_def_cfa_offset 8
 8669              		.cfi_offset 7, -8
 8670              		.cfi_offset 14, -4
 8671 0002 84B0     		sub	sp, sp, #16
 8672              	.LCFI296:
 8673              		.cfi_def_cfa_offset 24
 8674 0004 00AF     		add	r7, sp, #0
 8675              	.LCFI297:
 8676              		.cfi_def_cfa_register 7
 8677 0006 7860     		str	r0, [r7, #4]
3370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8678              		.loc 1 3370 23
 8679 0008 7B68     		ldr	r3, [r7, #4]
 8680 000a 5B6A     		ldr	r3, [r3, #36]
 8681 000c FB60     		str	r3, [r7, #12]
3371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
 8682              		.loc 1 3372 8
 8683 000e FB68     		ldr	r3, [r7, #12]
 8684 0010 9B6B     		ldr	r3, [r3, #56]
 8685              		.loc 1 3372 36
 8686 0012 0022     		movs	r2, #0
 8687 0014 5A63     		str	r2, [r3, #52]
3373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 8688              		.loc 1 3375 12
 8689 0016 FB68     		ldr	r3, [r7, #12]
 8690 0018 DB6B     		ldr	r3, [r3, #60]
 8691              		.loc 1 3375 6
ARM GAS  /tmp/cc17XZfc.s 			page 234


 8692 001a 002B     		cmp	r3, #0
 8693 001c 04D0     		beq	.L436
3376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
 8694              		.loc 1 3377 14
 8695 001e FB68     		ldr	r3, [r7, #12]
 8696 0020 DB6B     		ldr	r3, [r3, #60]
 8697              		.loc 1 3377 22
 8698 0022 5B6B     		ldr	r3, [r3, #52]
 8699              		.loc 1 3377 8
 8700 0024 002B     		cmp	r3, #0
 8701 0026 17D1     		bne	.L438
 8702              	.L436:
3378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
3380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 8703              		.loc 1 3384 22
 8704 0028 FB68     		ldr	r3, [r7, #12]
 8705 002a 0022     		movs	r2, #0
 8706 002c DA84     		strh	r2, [r3, #38]	@ movhi
3385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 8707              		.loc 1 3385 22
 8708 002e FB68     		ldr	r3, [r7, #12]
 8709 0030 0022     		movs	r2, #0
 8710 0032 DA85     		strh	r2, [r3, #46]	@ movhi
3386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
3388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 8711              		.loc 1 3388 20
 8712 0034 FB68     		ldr	r3, [r7, #12]
 8713 0036 0022     		movs	r2, #0
 8714 0038 5A64     		str	r2, [r3, #68]
3389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 8715              		.loc 1 3391 18
 8716 003a FB68     		ldr	r3, [r7, #12]
 8717 003c 2022     		movs	r2, #32
 8718 003e 83F84120 		strb	r2, [r3, #65]
3392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 8719              		.loc 1 3392 18
 8720 0042 FB68     		ldr	r3, [r7, #12]
 8721 0044 2022     		movs	r2, #32
 8722 0046 83F84220 		strb	r2, [r3, #66]
3393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8723              		.loc 1 3393 24
 8724 004a FB68     		ldr	r3, [r7, #12]
 8725 004c 0022     		movs	r2, #0
 8726 004e 1A63     		str	r2, [r3, #48]
3394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort complete callback */
ARM GAS  /tmp/cc17XZfc.s 			page 235


3398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 8727              		.loc 1 3401 3
 8728 0050 F868     		ldr	r0, [r7, #12]
 8729 0052 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 8730 0056 00E0     		b	.L435
 8731              	.L438:
3379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 8732              		.loc 1 3379 7
 8733 0058 00BF     		nop
 8734              	.L435:
3402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8735              		.loc 1 3403 1
 8736 005a 1037     		adds	r7, r7, #16
 8737              	.LCFI298:
 8738              		.cfi_def_cfa_offset 8
 8739 005c BD46     		mov	sp, r7
 8740              	.LCFI299:
 8741              		.cfi_def_cfa_register 13
 8742              		@ sp needed
 8743 005e 80BD     		pop	{r7, pc}
 8744              		.cfi_endproc
 8745              	.LFE119:
 8747              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 8748              		.align	1
 8749              		.syntax unified
 8750              		.thumb
 8751              		.thumb_func
 8753              	UART_DMARxAbortCallback:
 8754              	.LFB120:
3404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
3407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
3408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
3410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
3415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8755              		.loc 1 3415 1
 8756              		.cfi_startproc
 8757              		@ args = 0, pretend = 0, frame = 16
 8758              		@ frame_needed = 1, uses_anonymous_args = 0
 8759 0000 80B5     		push	{r7, lr}
 8760              	.LCFI300:
 8761              		.cfi_def_cfa_offset 8
 8762              		.cfi_offset 7, -8
 8763              		.cfi_offset 14, -4
 8764 0002 84B0     		sub	sp, sp, #16
 8765              	.LCFI301:
 8766              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc17XZfc.s 			page 236


 8767 0004 00AF     		add	r7, sp, #0
 8768              	.LCFI302:
 8769              		.cfi_def_cfa_register 7
 8770 0006 7860     		str	r0, [r7, #4]
3416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8771              		.loc 1 3416 23
 8772 0008 7B68     		ldr	r3, [r7, #4]
 8773 000a 5B6A     		ldr	r3, [r3, #36]
 8774 000c FB60     		str	r3, [r7, #12]
3417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 8775              		.loc 1 3418 8
 8776 000e FB68     		ldr	r3, [r7, #12]
 8777 0010 DB6B     		ldr	r3, [r3, #60]
 8778              		.loc 1 3418 36
 8779 0012 0022     		movs	r2, #0
 8780 0014 5A63     		str	r2, [r3, #52]
3419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 8781              		.loc 1 3421 12
 8782 0016 FB68     		ldr	r3, [r7, #12]
 8783 0018 9B6B     		ldr	r3, [r3, #56]
 8784              		.loc 1 3421 6
 8785 001a 002B     		cmp	r3, #0
 8786 001c 04D0     		beq	.L440
3422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
 8787              		.loc 1 3423 14
 8788 001e FB68     		ldr	r3, [r7, #12]
 8789 0020 9B6B     		ldr	r3, [r3, #56]
 8790              		.loc 1 3423 22
 8791 0022 5B6B     		ldr	r3, [r3, #52]
 8792              		.loc 1 3423 8
 8793 0024 002B     		cmp	r3, #0
 8794 0026 17D1     		bne	.L442
 8795              	.L440:
3424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return;
3426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 8796              		.loc 1 3430 22
 8797 0028 FB68     		ldr	r3, [r7, #12]
 8798 002a 0022     		movs	r2, #0
 8799 002c DA84     		strh	r2, [r3, #38]	@ movhi
3431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 8800              		.loc 1 3431 22
 8801 002e FB68     		ldr	r3, [r7, #12]
 8802 0030 0022     		movs	r2, #0
 8803 0032 DA85     		strh	r2, [r3, #46]	@ movhi
3432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Reset ErrorCode */
3434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 8804              		.loc 1 3434 20
ARM GAS  /tmp/cc17XZfc.s 			page 237


 8805 0034 FB68     		ldr	r3, [r7, #12]
 8806 0036 0022     		movs	r2, #0
 8807 0038 5A64     		str	r2, [r3, #68]
3435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 8808              		.loc 1 3437 18
 8809 003a FB68     		ldr	r3, [r7, #12]
 8810 003c 2022     		movs	r2, #32
 8811 003e 83F84120 		strb	r2, [r3, #65]
3438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 8812              		.loc 1 3438 18
 8813 0042 FB68     		ldr	r3, [r7, #12]
 8814 0044 2022     		movs	r2, #32
 8815 0046 83F84220 		strb	r2, [r3, #66]
3439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8816              		.loc 1 3439 24
 8817 004a FB68     		ldr	r3, [r7, #12]
 8818 004c 0022     		movs	r2, #0
 8819 004e 1A63     		str	r2, [r3, #48]
3440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort complete callback */
3444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 8820              		.loc 1 3447 3
 8821 0050 F868     		ldr	r0, [r7, #12]
 8822 0052 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 8823 0056 00E0     		b	.L439
 8824              	.L442:
3425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
 8825              		.loc 1 3425 7
 8826 0058 00BF     		nop
 8827              	.L439:
3448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8828              		.loc 1 3449 1
 8829 005a 1037     		adds	r7, r7, #16
 8830              	.LCFI303:
 8831              		.cfi_def_cfa_offset 8
 8832 005c BD46     		mov	sp, r7
 8833              	.LCFI304:
 8834              		.cfi_def_cfa_register 13
 8835              		@ sp needed
 8836 005e 80BD     		pop	{r7, pc}
 8837              		.cfi_endproc
 8838              	.LFE120:
 8840              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 8841              		.align	1
 8842              		.syntax unified
 8843              		.thumb
 8844              		.thumb_func
 8846              	UART_DMATxOnlyAbortCallback:
 8847              	.LFB121:
ARM GAS  /tmp/cc17XZfc.s 			page 238


3450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
3453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
3454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
3455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
3456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8848              		.loc 1 3461 1
 8849              		.cfi_startproc
 8850              		@ args = 0, pretend = 0, frame = 16
 8851              		@ frame_needed = 1, uses_anonymous_args = 0
 8852 0000 80B5     		push	{r7, lr}
 8853              	.LCFI305:
 8854              		.cfi_def_cfa_offset 8
 8855              		.cfi_offset 7, -8
 8856              		.cfi_offset 14, -4
 8857 0002 84B0     		sub	sp, sp, #16
 8858              	.LCFI306:
 8859              		.cfi_def_cfa_offset 24
 8860 0004 00AF     		add	r7, sp, #0
 8861              	.LCFI307:
 8862              		.cfi_def_cfa_register 7
 8863 0006 7860     		str	r0, [r7, #4]
3462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8864              		.loc 1 3462 23
 8865 0008 7B68     		ldr	r3, [r7, #4]
 8866 000a 5B6A     		ldr	r3, [r3, #36]
 8867 000c FB60     		str	r3, [r7, #12]
3463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 8868              		.loc 1 3464 22
 8869 000e FB68     		ldr	r3, [r7, #12]
 8870 0010 0022     		movs	r2, #0
 8871 0012 DA84     		strh	r2, [r3, #38]	@ movhi
3465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
3467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 8872              		.loc 1 3467 17
 8873 0014 FB68     		ldr	r3, [r7, #12]
 8874 0016 2022     		movs	r2, #32
 8875 0018 83F84120 		strb	r2, [r3, #65]
3468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
3472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
3473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
3475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
 8876              		.loc 1 3475 3
 8877 001c F868     		ldr	r0, [r7, #12]
 8878 001e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
ARM GAS  /tmp/cc17XZfc.s 			page 239


3476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8879              		.loc 1 3477 1
 8880 0022 00BF     		nop
 8881 0024 1037     		adds	r7, r7, #16
 8882              	.LCFI308:
 8883              		.cfi_def_cfa_offset 8
 8884 0026 BD46     		mov	sp, r7
 8885              	.LCFI309:
 8886              		.cfi_def_cfa_register 13
 8887              		@ sp needed
 8888 0028 80BD     		pop	{r7, pc}
 8889              		.cfi_endproc
 8890              	.LFE121:
 8892              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 8893              		.align	1
 8894              		.syntax unified
 8895              		.thumb
 8896              		.thumb_func
 8898              	UART_DMARxOnlyAbortCallback:
 8899              	.LFB122:
3478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
3481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
3482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
3483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
3484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
3485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
3486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8900              		.loc 1 3489 1
 8901              		.cfi_startproc
 8902              		@ args = 0, pretend = 0, frame = 16
 8903              		@ frame_needed = 1, uses_anonymous_args = 0
 8904 0000 80B5     		push	{r7, lr}
 8905              	.LCFI310:
 8906              		.cfi_def_cfa_offset 8
 8907              		.cfi_offset 7, -8
 8908              		.cfi_offset 14, -4
 8909 0002 84B0     		sub	sp, sp, #16
 8910              	.LCFI311:
 8911              		.cfi_def_cfa_offset 24
 8912 0004 00AF     		add	r7, sp, #0
 8913              	.LCFI312:
 8914              		.cfi_def_cfa_register 7
 8915 0006 7860     		str	r0, [r7, #4]
3490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8916              		.loc 1 3490 23
 8917 0008 7B68     		ldr	r3, [r7, #4]
 8918 000a 5B6A     		ldr	r3, [r3, #36]
 8919 000c FB60     		str	r3, [r7, #12]
3491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 8920              		.loc 1 3492 22
ARM GAS  /tmp/cc17XZfc.s 			page 240


 8921 000e FB68     		ldr	r3, [r7, #12]
 8922 0010 0022     		movs	r2, #0
 8923 0012 DA85     		strh	r2, [r3, #46]	@ movhi
3493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
3495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 8924              		.loc 1 3495 18
 8925 0014 FB68     		ldr	r3, [r7, #12]
 8926 0016 2022     		movs	r2, #32
 8927 0018 83F84220 		strb	r2, [r3, #66]
3496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8928              		.loc 1 3496 24
 8929 001c FB68     		ldr	r3, [r7, #12]
 8930 001e 0022     		movs	r2, #0
 8931 0020 1A63     		str	r2, [r3, #48]
3497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call user Abort complete callback */
3499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
3501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
3502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
3504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
 8932              		.loc 1 3504 3
 8933 0022 F868     		ldr	r0, [r7, #12]
 8934 0024 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
3505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 8935              		.loc 1 3506 1
 8936 0028 00BF     		nop
 8937 002a 1037     		adds	r7, r7, #16
 8938              	.LCFI313:
 8939              		.cfi_def_cfa_offset 8
 8940 002c BD46     		mov	sp, r7
 8941              	.LCFI314:
 8942              		.cfi_def_cfa_register 13
 8943              		@ sp needed
 8944 002e 80BD     		pop	{r7, pc}
 8945              		.cfi_endproc
 8946              	.LFE122:
 8948              		.section	.text.UART_Transmit_IT,"ax",%progbits
 8949              		.align	1
 8950              		.syntax unified
 8951              		.thumb
 8952              		.thumb_func
 8954              	UART_Transmit_IT:
 8955              	.LFB123:
3507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
3510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
3515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 8956              		.loc 1 3515 1
ARM GAS  /tmp/cc17XZfc.s 			page 241


 8957              		.cfi_startproc
 8958              		@ args = 0, pretend = 0, frame = 16
 8959              		@ frame_needed = 1, uses_anonymous_args = 0
 8960              		@ link register save eliminated.
 8961 0000 80B4     		push	{r7}
 8962              	.LCFI315:
 8963              		.cfi_def_cfa_offset 4
 8964              		.cfi_offset 7, -4
 8965 0002 85B0     		sub	sp, sp, #20
 8966              	.LCFI316:
 8967              		.cfi_def_cfa_offset 24
 8968 0004 00AF     		add	r7, sp, #0
 8969              	.LCFI317:
 8970              		.cfi_def_cfa_register 7
 8971 0006 7860     		str	r0, [r7, #4]
3516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   const uint16_t *tmp;
3517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8972              		.loc 1 3519 12
 8973 0008 7B68     		ldr	r3, [r7, #4]
 8974 000a 93F84130 		ldrb	r3, [r3, #65]
 8975 000e DBB2     		uxtb	r3, r3
 8976              		.loc 1 3519 6
 8977 0010 212B     		cmp	r3, #33
 8978 0012 3ED1     		bne	.L446
3520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8979              		.loc 1 3521 21
 8980 0014 7B68     		ldr	r3, [r7, #4]
 8981 0016 9B68     		ldr	r3, [r3, #8]
 8982              		.loc 1 3521 8
 8983 0018 B3F5805F 		cmp	r3, #4096
 8984 001c 14D1     		bne	.L447
 8985              		.loc 1 3521 71 discriminator 1
 8986 001e 7B68     		ldr	r3, [r7, #4]
 8987 0020 1B69     		ldr	r3, [r3, #16]
 8988              		.loc 1 3521 56 discriminator 1
 8989 0022 002B     		cmp	r3, #0
 8990 0024 10D1     		bne	.L447
3522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       tmp = (const uint16_t *) huart->pTxBuffPtr;
 8991              		.loc 1 3523 11
 8992 0026 7B68     		ldr	r3, [r7, #4]
 8993 0028 1B6A     		ldr	r3, [r3, #32]
 8994 002a FB60     		str	r3, [r7, #12]
3524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8995              		.loc 1 3524 40
 8996 002c FB68     		ldr	r3, [r7, #12]
 8997 002e 1B88     		ldrh	r3, [r3]
 8998              		.loc 1 3524 29
 8999 0030 1A46     		mov	r2, r3
 9000              		.loc 1 3524 12
 9001 0032 7B68     		ldr	r3, [r7, #4]
 9002 0034 1B68     		ldr	r3, [r3]
 9003              		.loc 1 3524 29
 9004 0036 C2F30802 		ubfx	r2, r2, #0, #9
ARM GAS  /tmp/cc17XZfc.s 			page 242


 9005              		.loc 1 3524 27
 9006 003a 5A60     		str	r2, [r3, #4]
3525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 9007              		.loc 1 3525 25
 9008 003c 7B68     		ldr	r3, [r7, #4]
 9009 003e 1B6A     		ldr	r3, [r3, #32]
 9010 0040 9A1C     		adds	r2, r3, #2
 9011 0042 7B68     		ldr	r3, [r7, #4]
 9012 0044 1A62     		str	r2, [r3, #32]
 9013 0046 08E0     		b	.L448
 9014              	.L447:
3526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
3528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 9015              		.loc 1 3529 45
 9016 0048 7B68     		ldr	r3, [r7, #4]
 9017 004a 1B6A     		ldr	r3, [r3, #32]
 9018              		.loc 1 3529 57
 9019 004c 591C     		adds	r1, r3, #1
 9020 004e 7A68     		ldr	r2, [r7, #4]
 9021 0050 1162     		str	r1, [r2, #32]
 9022              		.loc 1 3529 39
 9023 0052 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 9024              		.loc 1 3529 12
 9025 0054 7B68     		ldr	r3, [r7, #4]
 9026 0056 1B68     		ldr	r3, [r3]
 9027              		.loc 1 3529 27
 9028 0058 5A60     		str	r2, [r3, #4]
 9029              	.L448:
3530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (--huart->TxXferCount == 0U)
 9030              		.loc 1 3532 16
 9031 005a 7B68     		ldr	r3, [r7, #4]
 9032 005c DB8C     		ldrh	r3, [r3, #38]	@ movhi
 9033 005e 9BB2     		uxth	r3, r3
 9034              		.loc 1 3532 9
 9035 0060 013B     		subs	r3, r3, #1
 9036 0062 9BB2     		uxth	r3, r3
 9037              		.loc 1 3532 8
 9038 0064 7A68     		ldr	r2, [r7, #4]
 9039 0066 1946     		mov	r1, r3	@ movhi
 9040 0068 D184     		strh	r1, [r2, #38]	@ movhi
 9041 006a 002B     		cmp	r3, #0
 9042 006c 0FD1     		bne	.L449
3533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 9043              		.loc 1 3535 7
 9044 006e 7B68     		ldr	r3, [r7, #4]
 9045 0070 1B68     		ldr	r3, [r3]
 9046 0072 DA68     		ldr	r2, [r3, #12]
 9047 0074 7B68     		ldr	r3, [r7, #4]
 9048 0076 1B68     		ldr	r3, [r3]
 9049 0078 22F08002 		bic	r2, r2, #128
 9050 007c DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/cc17XZfc.s 			page 243


3536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 9051              		.loc 1 3538 7
 9052 007e 7B68     		ldr	r3, [r7, #4]
 9053 0080 1B68     		ldr	r3, [r3]
 9054 0082 DA68     		ldr	r2, [r3, #12]
 9055 0084 7B68     		ldr	r3, [r7, #4]
 9056 0086 1B68     		ldr	r3, [r3]
 9057 0088 42F04002 		orr	r2, r2, #64
 9058 008c DA60     		str	r2, [r3, #12]
 9059              	.L449:
3539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 9060              		.loc 1 3540 12
 9061 008e 0023     		movs	r3, #0
 9062 0090 00E0     		b	.L450
 9063              	.L446:
3541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 9064              		.loc 1 3544 12
 9065 0092 0223     		movs	r3, #2
 9066              	.L450:
3545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 9067              		.loc 1 3546 1
 9068 0094 1846     		mov	r0, r3
 9069 0096 1437     		adds	r7, r7, #20
 9070              	.LCFI318:
 9071              		.cfi_def_cfa_offset 4
 9072 0098 BD46     		mov	sp, r7
 9073              	.LCFI319:
 9074              		.cfi_def_cfa_register 13
 9075              		@ sp needed
 9076 009a 80BC     		pop	{r7}
 9077              	.LCFI320:
 9078              		.cfi_restore 7
 9079              		.cfi_def_cfa_offset 0
 9080 009c 7047     		bx	lr
 9081              		.cfi_endproc
 9082              	.LFE123:
 9084              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 9085              		.align	1
 9086              		.syntax unified
 9087              		.thumb
 9088              		.thumb_func
 9090              	UART_EndTransmit_IT:
 9091              	.LFB124:
3547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Wraps up transmission in non blocking mode.
3550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
ARM GAS  /tmp/cc17XZfc.s 			page 244


3554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
3555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 9092              		.loc 1 3555 1
 9093              		.cfi_startproc
 9094              		@ args = 0, pretend = 0, frame = 8
 9095              		@ frame_needed = 1, uses_anonymous_args = 0
 9096 0000 80B5     		push	{r7, lr}
 9097              	.LCFI321:
 9098              		.cfi_def_cfa_offset 8
 9099              		.cfi_offset 7, -8
 9100              		.cfi_offset 14, -4
 9101 0002 82B0     		sub	sp, sp, #8
 9102              	.LCFI322:
 9103              		.cfi_def_cfa_offset 16
 9104 0004 00AF     		add	r7, sp, #0
 9105              	.LCFI323:
 9106              		.cfi_def_cfa_register 7
 9107 0006 7860     		str	r0, [r7, #4]
3556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
3557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 9108              		.loc 1 3557 3
 9109 0008 7B68     		ldr	r3, [r7, #4]
 9110 000a 1B68     		ldr	r3, [r3]
 9111 000c DA68     		ldr	r2, [r3, #12]
 9112 000e 7B68     		ldr	r3, [r7, #4]
 9113 0010 1B68     		ldr	r3, [r3]
 9114 0012 22F04002 		bic	r2, r2, #64
 9115 0016 DA60     		str	r2, [r3, #12]
3558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
3560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 9116              		.loc 1 3560 17
 9117 0018 7B68     		ldr	r3, [r7, #4]
 9118 001a 2022     		movs	r2, #32
 9119 001c 83F84120 		strb	r2, [r3, #65]
3561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->TxCpltCallback(huart);
3565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 9120              		.loc 1 3567 3
 9121 0020 7868     		ldr	r0, [r7, #4]
 9122 0022 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
3568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   return HAL_OK;
 9123              		.loc 1 3570 10
 9124 0026 0023     		movs	r3, #0
3571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 9125              		.loc 1 3571 1
 9126 0028 1846     		mov	r0, r3
 9127 002a 0837     		adds	r7, r7, #8
 9128              	.LCFI324:
 9129              		.cfi_def_cfa_offset 8
 9130 002c BD46     		mov	sp, r7
ARM GAS  /tmp/cc17XZfc.s 			page 245


 9131              	.LCFI325:
 9132              		.cfi_def_cfa_register 13
 9133              		@ sp needed
 9134 002e 80BD     		pop	{r7, pc}
 9135              		.cfi_endproc
 9136              	.LFE124:
 9138              		.section	.text.UART_Receive_IT,"ax",%progbits
 9139              		.align	1
 9140              		.syntax unified
 9141              		.thumb
 9142              		.thumb_func
 9144              	UART_Receive_IT:
 9145              	.LFB125:
3572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode
3575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval HAL status
3578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
3580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 9146              		.loc 1 3580 1
 9147              		.cfi_startproc
 9148              		@ args = 0, pretend = 0, frame = 48
 9149              		@ frame_needed = 1, uses_anonymous_args = 0
 9150 0000 80B5     		push	{r7, lr}
 9151              	.LCFI326:
 9152              		.cfi_def_cfa_offset 8
 9153              		.cfi_offset 7, -8
 9154              		.cfi_offset 14, -4
 9155 0002 8CB0     		sub	sp, sp, #48
 9156              	.LCFI327:
 9157              		.cfi_def_cfa_offset 56
 9158 0004 00AF     		add	r7, sp, #0
 9159              	.LCFI328:
 9160              		.cfi_def_cfa_register 7
 9161 0006 7860     		str	r0, [r7, #4]
3581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint8_t  *pdata8bits;
3582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint16_t *pdata16bits;
3583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 9162              		.loc 1 3585 12
 9163 0008 7B68     		ldr	r3, [r7, #4]
 9164 000a 93F84230 		ldrb	r3, [r3, #66]
 9165 000e DBB2     		uxtb	r3, r3
 9166              		.loc 1 3585 6
 9167 0010 222B     		cmp	r3, #34
 9168 0012 40F0AE80 		bne	.L454
3586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 9169              		.loc 1 3587 21
 9170 0016 7B68     		ldr	r3, [r7, #4]
 9171 0018 9B68     		ldr	r3, [r3, #8]
 9172              		.loc 1 3587 8
 9173 001a B3F5805F 		cmp	r3, #4096
ARM GAS  /tmp/cc17XZfc.s 			page 246


 9174 001e 17D1     		bne	.L455
 9175              		.loc 1 3587 71 discriminator 1
 9176 0020 7B68     		ldr	r3, [r7, #4]
 9177 0022 1B69     		ldr	r3, [r3, #16]
 9178              		.loc 1 3587 56 discriminator 1
 9179 0024 002B     		cmp	r3, #0
 9180 0026 13D1     		bne	.L455
3588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits  = NULL;
 9181              		.loc 1 3589 19
 9182 0028 0023     		movs	r3, #0
 9183 002a FB62     		str	r3, [r7, #44]
3590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 9184              		.loc 1 3590 19
 9185 002c 7B68     		ldr	r3, [r7, #4]
 9186 002e 9B6A     		ldr	r3, [r3, #40]
 9187 0030 BB62     		str	r3, [r7, #40]
3591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 9188              		.loc 1 3591 38
 9189 0032 7B68     		ldr	r3, [r7, #4]
 9190 0034 1B68     		ldr	r3, [r3]
 9191              		.loc 1 3591 48
 9192 0036 5B68     		ldr	r3, [r3, #4]
 9193              		.loc 1 3591 22
 9194 0038 9BB2     		uxth	r3, r3
 9195 003a C3F30803 		ubfx	r3, r3, #0, #9
 9196 003e 9AB2     		uxth	r2, r3
 9197              		.loc 1 3591 20
 9198 0040 BB6A     		ldr	r3, [r7, #40]
 9199 0042 1A80     		strh	r2, [r3]	@ movhi
3592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pRxBuffPtr += 2U;
 9200              		.loc 1 3592 25
 9201 0044 7B68     		ldr	r3, [r7, #4]
 9202 0046 9B6A     		ldr	r3, [r3, #40]
 9203 0048 9A1C     		adds	r2, r3, #2
 9204 004a 7B68     		ldr	r3, [r7, #4]
 9205 004c 9A62     		str	r2, [r3, #40]
 9206 004e 26E0     		b	.L456
 9207              	.L455:
3593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     else
3595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 9208              		.loc 1 3596 18
 9209 0050 7B68     		ldr	r3, [r7, #4]
 9210 0052 9B6A     		ldr	r3, [r3, #40]
 9211 0054 FB62     		str	r3, [r7, #44]
3597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       pdata16bits  = NULL;
 9212              		.loc 1 3597 20
 9213 0056 0023     		movs	r3, #0
 9214 0058 BB62     		str	r3, [r7, #40]
3598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLE
 9215              		.loc 1 3599 23
 9216 005a 7B68     		ldr	r3, [r7, #4]
 9217 005c 9B68     		ldr	r3, [r3, #8]
 9218              		.loc 1 3599 10
ARM GAS  /tmp/cc17XZfc.s 			page 247


 9219 005e B3F5805F 		cmp	r3, #4096
 9220 0062 07D0     		beq	.L457
 9221              		.loc 1 3599 74 discriminator 1
 9222 0064 7B68     		ldr	r3, [r7, #4]
 9223 0066 9B68     		ldr	r3, [r3, #8]
 9224              		.loc 1 3599 58 discriminator 1
 9225 0068 002B     		cmp	r3, #0
 9226 006a 0AD1     		bne	.L458
 9227              		.loc 1 3599 124 discriminator 2
 9228 006c 7B68     		ldr	r3, [r7, #4]
 9229 006e 1B69     		ldr	r3, [r3, #16]
 9230              		.loc 1 3599 109 discriminator 2
 9231 0070 002B     		cmp	r3, #0
 9232 0072 06D1     		bne	.L458
 9233              	.L457:
3600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 9234              		.loc 1 3601 38
 9235 0074 7B68     		ldr	r3, [r7, #4]
 9236 0076 1B68     		ldr	r3, [r3]
 9237              		.loc 1 3601 48
 9238 0078 5B68     		ldr	r3, [r3, #4]
 9239              		.loc 1 3601 23
 9240 007a DAB2     		uxtb	r2, r3
 9241              		.loc 1 3601 21
 9242 007c FB6A     		ldr	r3, [r7, #44]
 9243 007e 1A70     		strb	r2, [r3]
 9244 0080 08E0     		b	.L459
 9245              	.L458:
3602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
3604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 9246              		.loc 1 3605 38
 9247 0082 7B68     		ldr	r3, [r7, #4]
 9248 0084 1B68     		ldr	r3, [r3]
 9249              		.loc 1 3605 48
 9250 0086 5B68     		ldr	r3, [r3, #4]
 9251              		.loc 1 3605 23
 9252 0088 DBB2     		uxtb	r3, r3
 9253 008a 03F07F03 		and	r3, r3, #127
 9254 008e DAB2     		uxtb	r2, r3
 9255              		.loc 1 3605 21
 9256 0090 FB6A     		ldr	r3, [r7, #44]
 9257 0092 1A70     		strb	r2, [r3]
 9258              	.L459:
3606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->pRxBuffPtr += 1U;
 9259              		.loc 1 3607 25
 9260 0094 7B68     		ldr	r3, [r7, #4]
 9261 0096 9B6A     		ldr	r3, [r3, #40]
 9262 0098 5A1C     		adds	r2, r3, #1
 9263 009a 7B68     		ldr	r3, [r7, #4]
 9264 009c 9A62     		str	r2, [r3, #40]
 9265              	.L456:
3608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
ARM GAS  /tmp/cc17XZfc.s 			page 248


3610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     if (--huart->RxXferCount == 0U)
 9266              		.loc 1 3610 16
 9267 009e 7B68     		ldr	r3, [r7, #4]
 9268 00a0 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 9269 00a2 9BB2     		uxth	r3, r3
 9270              		.loc 1 3610 9
 9271 00a4 013B     		subs	r3, r3, #1
 9272 00a6 9BB2     		uxth	r3, r3
 9273              		.loc 1 3610 8
 9274 00a8 7A68     		ldr	r2, [r7, #4]
 9275 00aa 1946     		mov	r1, r3	@ movhi
 9276 00ac D185     		strh	r1, [r2, #46]	@ movhi
 9277 00ae 002B     		cmp	r3, #0
 9278 00b0 5DD1     		bne	.L460
3611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     {
3612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Data Register not empty Interrupt */
3613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 9279              		.loc 1 3613 7
 9280 00b2 7B68     		ldr	r3, [r7, #4]
 9281 00b4 1B68     		ldr	r3, [r3]
 9282 00b6 DA68     		ldr	r2, [r3, #12]
 9283 00b8 7B68     		ldr	r3, [r7, #4]
 9284 00ba 1B68     		ldr	r3, [r3]
 9285 00bc 22F02002 		bic	r2, r2, #32
 9286 00c0 DA60     		str	r2, [r3, #12]
3614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt */
3616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 9287              		.loc 1 3616 7
 9288 00c2 7B68     		ldr	r3, [r7, #4]
 9289 00c4 1B68     		ldr	r3, [r3]
 9290 00c6 DA68     		ldr	r2, [r3, #12]
 9291 00c8 7B68     		ldr	r3, [r7, #4]
 9292 00ca 1B68     		ldr	r3, [r3]
 9293 00cc 22F48072 		bic	r2, r2, #256
 9294 00d0 DA60     		str	r2, [r3, #12]
3617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 9295              		.loc 1 3619 7
 9296 00d2 7B68     		ldr	r3, [r7, #4]
 9297 00d4 1B68     		ldr	r3, [r3]
 9298 00d6 5A69     		ldr	r2, [r3, #20]
 9299 00d8 7B68     		ldr	r3, [r7, #4]
 9300 00da 1B68     		ldr	r3, [r3]
 9301 00dc 22F00102 		bic	r2, r2, #1
 9302 00e0 5A61     		str	r2, [r3, #20]
3620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 9303              		.loc 1 3622 22
 9304 00e2 7B68     		ldr	r3, [r7, #4]
 9305 00e4 2022     		movs	r2, #32
 9306 00e6 83F84220 		strb	r2, [r3, #66]
3623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Initialize type of RxEvent to Transfer Complete */
3625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       huart->RxEventType = HAL_UART_RXEVENT_TC;
ARM GAS  /tmp/cc17XZfc.s 			page 249


 9307              		.loc 1 3625 26
 9308 00ea 7B68     		ldr	r3, [r7, #4]
 9309 00ec 0022     		movs	r2, #0
 9310 00ee 5A63     		str	r2, [r3, #52]
3626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       /* Check current reception Mode :
3628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****          If Reception till IDLE event has been selected : */
3629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 9311              		.loc 1 3629 16
 9312 00f0 7B68     		ldr	r3, [r7, #4]
 9313 00f2 1B6B     		ldr	r3, [r3, #48]
 9314              		.loc 1 3629 10
 9315 00f4 012B     		cmp	r3, #1
 9316 00f6 35D1     		bne	.L461
3630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Set reception type to Standard */
3632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 9317              		.loc 1 3632 30
 9318 00f8 7B68     		ldr	r3, [r7, #4]
 9319 00fa 0022     		movs	r2, #0
 9320 00fc 1A63     		str	r2, [r3, #48]
 9321              	.L464:
 9322              	.LBB635:
3633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Disable IDLE interrupt */
3635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 9323              		.loc 1 3635 9 discriminator 1
 9324 00fe 7B68     		ldr	r3, [r7, #4]
 9325 0100 1B68     		ldr	r3, [r3]
 9326 0102 0C33     		adds	r3, r3, #12
 9327 0104 7B61     		str	r3, [r7, #20]
 9328              	.LBB636:
 9329              	.LBB637:
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 9330              		.loc 2 1072 4 discriminator 1
 9331 0106 7B69     		ldr	r3, [r7, #20]
 9332              		.syntax unified
 9333              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 9334 0108 53E8003F 		ldrex r3, [r3]
 9335              	@ 0 "" 2
 9336              		.thumb
 9337              		.syntax unified
 9338 010c 3B61     		str	r3, [r7, #16]
1073:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 9339              		.loc 2 1073 10 discriminator 1
 9340 010e 3B69     		ldr	r3, [r7, #16]
 9341              	.LBE637:
 9342              	.LBE636:
 9343              		.loc 1 3635 9 discriminator 1
 9344 0110 23F01003 		bic	r3, r3, #16
 9345 0114 7B62     		str	r3, [r7, #36]
 9346 0116 7B68     		ldr	r3, [r7, #4]
 9347 0118 1B68     		ldr	r3, [r3]
 9348 011a 0C33     		adds	r3, r3, #12
 9349 011c 7A6A     		ldr	r2, [r7, #36]
 9350 011e 3A62     		str	r2, [r7, #32]
 9351 0120 FB61     		str	r3, [r7, #28]
ARM GAS  /tmp/cc17XZfc.s 			page 250


 9352              	.LBB638:
 9353              	.LBB639:
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 9354              		.loc 2 1123 4 discriminator 1
 9355 0122 F969     		ldr	r1, [r7, #28]
 9356 0124 3A6A     		ldr	r2, [r7, #32]
 9357              		.syntax unified
 9358              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 9359 0126 41E80023 		strex r3, r2, [r1]
 9360              	@ 0 "" 2
 9361              		.thumb
 9362              		.syntax unified
 9363 012a BB61     		str	r3, [r7, #24]
 9364              		.loc 2 1124 10 discriminator 1
 9365 012c BB69     		ldr	r3, [r7, #24]
 9366              	.LBE639:
 9367              	.LBE638:
 9368              		.loc 1 3635 9 discriminator 1
 9369 012e 002B     		cmp	r3, #0
 9370 0130 E5D1     		bne	.L464
 9371              	.LBE635:
3636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Check if IDLE flag is set */
3638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 9372              		.loc 1 3638 13
 9373 0132 7B68     		ldr	r3, [r7, #4]
 9374 0134 1B68     		ldr	r3, [r3]
 9375 0136 1B68     		ldr	r3, [r3]
 9376 0138 03F01003 		and	r3, r3, #16
 9377              		.loc 1 3638 12
 9378 013c 102B     		cmp	r3, #16
 9379 013e 0AD1     		bne	.L465
 9380              	.LBB640:
3639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         {
3640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           /* Clear IDLE flag in ISR */
3641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****           __HAL_UART_CLEAR_IDLEFLAG(huart);
 9381              		.loc 1 3641 11
 9382 0140 0023     		movs	r3, #0
 9383 0142 FB60     		str	r3, [r7, #12]
 9384 0144 7B68     		ldr	r3, [r7, #4]
 9385 0146 1B68     		ldr	r3, [r3]
 9386 0148 1B68     		ldr	r3, [r3]
 9387 014a FB60     		str	r3, [r7, #12]
 9388 014c 7B68     		ldr	r3, [r7, #4]
 9389 014e 1B68     		ldr	r3, [r3]
 9390 0150 5B68     		ldr	r3, [r3, #4]
 9391 0152 FB60     		str	r3, [r7, #12]
 9392 0154 FB68     		ldr	r3, [r7, #12]
 9393              	.L465:
 9394              	.LBE640:
3642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         }
3643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx Event callback*/
3646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxEventCallback(huart, huart->RxXferSize);
3647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
ARM GAS  /tmp/cc17XZfc.s 			page 251


3649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 9395              		.loc 1 3649 9
 9396 0156 7B68     		ldr	r3, [r7, #4]
 9397 0158 9B8D     		ldrh	r3, [r3, #44]
 9398 015a 1946     		mov	r1, r3
 9399 015c 7868     		ldr	r0, [r7, #4]
 9400 015e FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
 9401 0162 02E0     		b	.L466
 9402              	.L461:
3650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       else
3653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       {
3654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /* Standard reception API called */
3655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call registered Rx complete callback*/
3657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         huart->RxCpltCallback(huart);
3658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         /*Call legacy weak Rx complete callback*/
3660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****         HAL_UART_RxCpltCallback(huart);
 9403              		.loc 1 3660 9
 9404 0164 7868     		ldr	r0, [r7, #4]
 9405 0166 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 9406              	.L466:
3661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       }
3663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****       return HAL_OK;
 9407              		.loc 1 3664 14
 9408 016a 0023     		movs	r3, #0
 9409 016c 02E0     		b	.L467
 9410              	.L460:
3665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     }
3666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_OK;
 9411              		.loc 1 3666 12
 9412 016e 0023     		movs	r3, #0
 9413 0170 00E0     		b	.L467
 9414              	.L454:
3667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     return HAL_BUSY;
 9415              		.loc 1 3670 12
 9416 0172 0223     		movs	r3, #2
 9417              	.L467:
3671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 9418              		.loc 1 3672 1
 9419 0174 1846     		mov	r0, r3
 9420 0176 3037     		adds	r7, r7, #48
 9421              	.LCFI329:
 9422              		.cfi_def_cfa_offset 8
 9423 0178 BD46     		mov	sp, r7
 9424              	.LCFI330:
 9425              		.cfi_def_cfa_register 13
 9426              		@ sp needed
 9427 017a 80BD     		pop	{r7, pc}
ARM GAS  /tmp/cc17XZfc.s 			page 252


 9428              		.cfi_endproc
 9429              	.LFE125:
 9431              		.section	.text.UART_SetConfig,"ax",%progbits
 9432              		.align	1
 9433              		.syntax unified
 9434              		.thumb
 9435              		.thumb_func
 9437              	UART_SetConfig:
 9438              	.LFB126:
3673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** /**
3675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @brief  Configures the UART peripheral.
3676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   * @retval None
3679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   */
3680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart)
3681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** {
 9439              		.loc 1 3681 1
 9440              		.cfi_startproc
 9441              		@ args = 0, pretend = 0, frame = 16
 9442              		@ frame_needed = 1, uses_anonymous_args = 0
 9443 0000 80B5     		push	{r7, lr}
 9444              	.LCFI331:
 9445              		.cfi_def_cfa_offset 8
 9446              		.cfi_offset 7, -8
 9447              		.cfi_offset 14, -4
 9448 0002 84B0     		sub	sp, sp, #16
 9449              	.LCFI332:
 9450              		.cfi_def_cfa_offset 24
 9451 0004 00AF     		add	r7, sp, #0
 9452              	.LCFI333:
 9453              		.cfi_def_cfa_register 7
 9454 0006 7860     		str	r0, [r7, #4]
3682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t tmpreg;
3683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   uint32_t pclk;
3684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Check the parameters */
3686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
3689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
3690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
3692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits
3693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      according to huart->Init.StopBits value */
3694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 9455              		.loc 1 3694 3
 9456 0008 7B68     		ldr	r3, [r7, #4]
 9457 000a 1B68     		ldr	r3, [r3]
 9458 000c 1B69     		ldr	r3, [r3, #16]
 9459 000e 23F44051 		bic	r1, r3, #12288
 9460 0012 7B68     		ldr	r3, [r7, #4]
 9461 0014 DA68     		ldr	r2, [r3, #12]
 9462 0016 7B68     		ldr	r3, [r7, #4]
 9463 0018 1B68     		ldr	r3, [r3]
 9464 001a 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/cc17XZfc.s 			page 253


 9465 001c 1A61     		str	r2, [r3, #16]
3695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
3697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART Word Length, Parity and mode:
3698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set the M bits according to huart->Init.WordLength value
3699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set PCE and PS bits according to huart->Init.Parity value
3700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set TE and RE bits according to huart->Init.Mode value
3701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****      Set OVER8 bit according to huart->Init.OverSampling value */
3702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
3704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
3705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
3706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | 
3707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              tmpreg);
3708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 9466              		.loc 1 3709 33
 9467 001e 7B68     		ldr	r3, [r7, #4]
 9468 0020 9A68     		ldr	r2, [r3, #8]
 9469              		.loc 1 3709 58
 9470 0022 7B68     		ldr	r3, [r7, #4]
 9471 0024 1B69     		ldr	r3, [r3, #16]
 9472              		.loc 1 3709 45
 9473 0026 1A43     		orrs	r2, r2, r3
 9474              		.loc 1 3709 79
 9475 0028 7B68     		ldr	r3, [r7, #4]
 9476 002a 5B69     		ldr	r3, [r3, #20]
 9477              		.loc 1 3709 10
 9478 002c 1343     		orrs	r3, r3, r2
 9479 002e BB60     		str	r3, [r7, #8]
3710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
 9480              		.loc 1 3710 3
 9481 0030 7B68     		ldr	r3, [r7, #4]
 9482 0032 1B68     		ldr	r3, [r3]
 9483 0034 DB68     		ldr	r3, [r3, #12]
 9484 0036 23F4B053 		bic	r3, r3, #5632
 9485 003a 23F00C03 		bic	r3, r3, #12
 9486 003e 7A68     		ldr	r2, [r7, #4]
 9487 0040 1268     		ldr	r2, [r2]
 9488 0042 B968     		ldr	r1, [r7, #8]
 9489 0044 0B43     		orrs	r3, r3, r1
 9490 0046 D360     		str	r3, [r2, #12]
3711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE),
3712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****              tmpreg);
3713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
3714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
3716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
3717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 9491              		.loc 1 3717 3
 9492 0048 7B68     		ldr	r3, [r7, #4]
 9493 004a 1B68     		ldr	r3, [r3]
 9494 004c 5B69     		ldr	r3, [r3, #20]
 9495 004e 23F44071 		bic	r1, r3, #768
 9496 0052 7B68     		ldr	r3, [r7, #4]
 9497 0054 9A69     		ldr	r2, [r3, #24]
 9498 0056 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc17XZfc.s 			page 254


 9499 0058 1B68     		ldr	r3, [r3]
 9500 005a 0A43     		orrs	r2, r2, r1
 9501 005c 5A61     		str	r2, [r3, #20]
3718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if(huart->Instance == USART1)
 9502              		.loc 1 3720 11
 9503 005e 7B68     		ldr	r3, [r7, #4]
 9504 0060 1B68     		ldr	r3, [r3]
 9505              		.loc 1 3720 5
 9506 0062 2C4A     		ldr	r2, .L471
 9507 0064 9342     		cmp	r3, r2
 9508 0066 03D1     		bne	.L469
3721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     pclk = HAL_RCC_GetPCLK2Freq();
 9509              		.loc 1 3722 12
 9510 0068 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 9511 006c F860     		str	r0, [r7, #12]
 9512 006e 02E0     		b	.L470
 9513              	.L469:
3723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     pclk = HAL_RCC_GetPCLK1Freq();
 9514              		.loc 1 3726 12
 9515 0070 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 9516 0074 F860     		str	r0, [r7, #12]
 9517              	.L470:
3727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** 
3729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration ---------------------*/
3730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #if defined(USART_CR1_OVER8)
3731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
3734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   else
3736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   {
3737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****     huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
3738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   }
3739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #else
3740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c ****   huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 9518              		.loc 1 3740 26
 9519 0076 FA68     		ldr	r2, [r7, #12]
 9520 0078 1346     		mov	r3, r2
 9521 007a 9B00     		lsls	r3, r3, #2
 9522 007c 1344     		add	r3, r3, r2
 9523 007e 9A00     		lsls	r2, r3, #2
 9524 0080 1A44     		add	r2, r2, r3
 9525 0082 7B68     		ldr	r3, [r7, #4]
 9526 0084 5B68     		ldr	r3, [r3, #4]
 9527 0086 9B00     		lsls	r3, r3, #2
 9528 0088 B2FBF3F3 		udiv	r3, r2, r3
 9529 008c 224A     		ldr	r2, .L471+4
 9530 008e A2FB0323 		umull	r2, r3, r2, r3
 9531 0092 5B09     		lsrs	r3, r3, #5
 9532 0094 1901     		lsls	r1, r3, #4
ARM GAS  /tmp/cc17XZfc.s 			page 255


 9533 0096 FA68     		ldr	r2, [r7, #12]
 9534 0098 1346     		mov	r3, r2
 9535 009a 9B00     		lsls	r3, r3, #2
 9536 009c 1344     		add	r3, r3, r2
 9537 009e 9A00     		lsls	r2, r3, #2
 9538 00a0 1A44     		add	r2, r2, r3
 9539 00a2 7B68     		ldr	r3, [r7, #4]
 9540 00a4 5B68     		ldr	r3, [r3, #4]
 9541 00a6 9B00     		lsls	r3, r3, #2
 9542 00a8 B2FBF3F2 		udiv	r2, r2, r3
 9543 00ac 1A4B     		ldr	r3, .L471+4
 9544 00ae A3FB0203 		umull	r0, r3, r3, r2
 9545 00b2 5B09     		lsrs	r3, r3, #5
 9546 00b4 6420     		movs	r0, #100
 9547 00b6 00FB03F3 		mul	r3, r0, r3
 9548 00ba D31A     		subs	r3, r2, r3
 9549 00bc 1B01     		lsls	r3, r3, #4
 9550 00be 3233     		adds	r3, r3, #50
 9551 00c0 154A     		ldr	r2, .L471+4
 9552 00c2 A2FB0323 		umull	r2, r3, r2, r3
 9553 00c6 5B09     		lsrs	r3, r3, #5
 9554 00c8 03F0F003 		and	r3, r3, #240
 9555 00cc 1944     		add	r1, r1, r3
 9556 00ce FA68     		ldr	r2, [r7, #12]
 9557 00d0 1346     		mov	r3, r2
 9558 00d2 9B00     		lsls	r3, r3, #2
 9559 00d4 1344     		add	r3, r3, r2
 9560 00d6 9A00     		lsls	r2, r3, #2
 9561 00d8 1A44     		add	r2, r2, r3
 9562 00da 7B68     		ldr	r3, [r7, #4]
 9563 00dc 5B68     		ldr	r3, [r3, #4]
 9564 00de 9B00     		lsls	r3, r3, #2
 9565 00e0 B2FBF3F2 		udiv	r2, r2, r3
 9566 00e4 0C4B     		ldr	r3, .L471+4
 9567 00e6 A3FB0203 		umull	r0, r3, r3, r2
 9568 00ea 5B09     		lsrs	r3, r3, #5
 9569 00ec 6420     		movs	r0, #100
 9570 00ee 00FB03F3 		mul	r3, r0, r3
 9571 00f2 D31A     		subs	r3, r2, r3
 9572 00f4 1B01     		lsls	r3, r3, #4
 9573 00f6 3233     		adds	r3, r3, #50
 9574 00f8 074A     		ldr	r2, .L471+4
 9575 00fa A2FB0323 		umull	r2, r3, r2, r3
 9576 00fe 5B09     		lsrs	r3, r3, #5
 9577 0100 03F00F02 		and	r2, r3, #15
 9578              		.loc 1 3740 8
 9579 0104 7B68     		ldr	r3, [r7, #4]
 9580 0106 1B68     		ldr	r3, [r3]
 9581              		.loc 1 3740 26
 9582 0108 0A44     		add	r2, r2, r1
 9583              		.loc 1 3740 24
 9584 010a 9A60     		str	r2, [r3, #8]
3741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** #endif /* USART_CR1_OVER8 */
3742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c **** }
 9585              		.loc 1 3742 1
 9586 010c 00BF     		nop
 9587 010e 1037     		adds	r7, r7, #16
ARM GAS  /tmp/cc17XZfc.s 			page 256


 9588              	.LCFI334:
 9589              		.cfi_def_cfa_offset 8
 9590 0110 BD46     		mov	sp, r7
 9591              	.LCFI335:
 9592              		.cfi_def_cfa_register 13
 9593              		@ sp needed
 9594 0112 80BD     		pop	{r7, pc}
 9595              	.L472:
 9596              		.align	2
 9597              	.L471:
 9598 0114 00380140 		.word	1073821696
 9599 0118 1F85EB51 		.word	1374389535
 9600              		.cfi_endproc
 9601              	.LFE126:
 9603              		.text
 9604              	.Letext0:
 9605              		.file 3 "/usr/local/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 9606              		.file 4 "/usr/local/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 9607              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 9608              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 9609              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 9610              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 9611              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
ARM GAS  /tmp/cc17XZfc.s 			page 257


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_uart.c
     /tmp/cc17XZfc.s:18     .text.HAL_UART_Init:0000000000000000 $t
     /tmp/cc17XZfc.s:24     .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/cc17XZfc.s:660    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/cc17XZfc.s:9437   .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/cc17XZfc.s:138    .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/cc17XZfc.s:144    .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/cc17XZfc.s:265    .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/cc17XZfc.s:271    .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/cc17XZfc.s:410    .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/cc17XZfc.s:416    .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/cc17XZfc.s:566    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/cc17XZfc.s:572    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/cc17XZfc.s:702    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/cc17XZfc.s:654    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/cc17XZfc.s:696    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/cc17XZfc.s:738    .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/cc17XZfc.s:744    .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/cc17XZfc.s:7724   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/cc17XZfc.s:947    .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/cc17XZfc.s:953    .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/cc17XZfc.s:1180   .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/cc17XZfc.s:1186   .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/cc17XZfc.s:1280   .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/cc17XZfc.s:1286   .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/cc17XZfc.s:7927   .text.UART_Start_Receive_IT:0000000000000000 UART_Start_Receive_IT
     /tmp/cc17XZfc.s:1357   .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/cc17XZfc.s:1363   .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/cc17XZfc.s:1543   .text.HAL_UART_Transmit_DMA:00000000000000d4 $d
     /tmp/cc17XZfc.s:7041   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/cc17XZfc.s:7205   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/cc17XZfc.s:7609   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/cc17XZfc.s:1550   .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/cc17XZfc.s:1556   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/cc17XZfc.s:8025   .text.UART_Start_Receive_DMA:0000000000000000 UART_Start_Receive_DMA
     /tmp/cc17XZfc.s:1627   .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/cc17XZfc.s:1633   .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/cc17XZfc.s:1926   .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/cc17XZfc.s:1932   .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/cc17XZfc.s:2210   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/cc17XZfc.s:2216   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/cc17XZfc.s:8303   .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/cc17XZfc.s:8399   .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/cc17XZfc.s:2433   .text.HAL_UARTEx_ReceiveToIdle:0000000000000000 $t
     /tmp/cc17XZfc.s:2439   .text.HAL_UARTEx_ReceiveToIdle:0000000000000000 HAL_UARTEx_ReceiveToIdle
     /tmp/cc17XZfc.s:2750   .text.HAL_UARTEx_ReceiveToIdle_IT:0000000000000000 $t
     /tmp/cc17XZfc.s:2756   .text.HAL_UARTEx_ReceiveToIdle_IT:0000000000000000 HAL_UARTEx_ReceiveToIdle_IT
     /tmp/cc17XZfc.s:2915   .text.HAL_UARTEx_ReceiveToIdle_DMA:0000000000000000 $t
     /tmp/cc17XZfc.s:2921   .text.HAL_UARTEx_ReceiveToIdle_DMA:0000000000000000 HAL_UARTEx_ReceiveToIdle_DMA
     /tmp/cc17XZfc.s:3080   .text.HAL_UARTEx_GetRxEventType:0000000000000000 $t
     /tmp/cc17XZfc.s:3086   .text.HAL_UARTEx_GetRxEventType:0000000000000000 HAL_UARTEx_GetRxEventType
     /tmp/cc17XZfc.s:3125   .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/cc17XZfc.s:3131   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/cc17XZfc.s:3544   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/cc17XZfc.s:3550   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/cc17XZfc.s:3741   .text.HAL_UART_AbortReceive:0000000000000000 $t
ARM GAS  /tmp/cc17XZfc.s 			page 258


     /tmp/cc17XZfc.s:3747   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/cc17XZfc.s:4051   .text.HAL_UART_Abort_IT:0000000000000000 $t
     /tmp/cc17XZfc.s:4057   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/cc17XZfc.s:6205   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/cc17XZfc.s:4518   .text.HAL_UART_Abort_IT:0000000000000220 $d
     /tmp/cc17XZfc.s:8660   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/cc17XZfc.s:8753   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
     /tmp/cc17XZfc.s:4524   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/cc17XZfc.s:4530   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/cc17XZfc.s:6247   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/cc17XZfc.s:4733   .text.HAL_UART_AbortTransmit_IT:00000000000000e4 $d
     /tmp/cc17XZfc.s:8846   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/cc17XZfc.s:4738   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/cc17XZfc.s:4744   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/cc17XZfc.s:6289   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/cc17XZfc.s:5064   .text.HAL_UART_AbortReceive_IT:0000000000000160 $d
     /tmp/cc17XZfc.s:8898   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/cc17XZfc.s:5069   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/cc17XZfc.s:5075   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/cc17XZfc.s:9144   .text.UART_Receive_IT:0000000000000000 UART_Receive_IT
     /tmp/cc17XZfc.s:6163   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/cc17XZfc.s:6331   .text.HAL_UARTEx_RxEventCallback:0000000000000000 HAL_UARTEx_RxEventCallback
     /tmp/cc17XZfc.s:5726   .text.HAL_UART_IRQHandler:00000000000003e0 $d
     /tmp/cc17XZfc.s:8608   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/cc17XZfc.s:5731   .text.HAL_UART_IRQHandler:00000000000003e4 $t
     /tmp/cc17XZfc.s:8954   .text.UART_Transmit_IT:0000000000000000 UART_Transmit_IT
     /tmp/cc17XZfc.s:9090   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/cc17XZfc.s:5989   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/cc17XZfc.s:5995   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/cc17XZfc.s:6031   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/cc17XZfc.s:6037   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/cc17XZfc.s:6073   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cc17XZfc.s:6079   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cc17XZfc.s:6115   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/cc17XZfc.s:6121   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/cc17XZfc.s:6157   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/cc17XZfc.s:6199   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/cc17XZfc.s:6241   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/cc17XZfc.s:6283   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/cc17XZfc.s:6325   .text.HAL_UARTEx_RxEventCallback:0000000000000000 $t
     /tmp/cc17XZfc.s:6369   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/cc17XZfc.s:6375   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/cc17XZfc.s:6490   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/cc17XZfc.s:6496   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/cc17XZfc.s:6615   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 $t
     /tmp/cc17XZfc.s:6621   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 HAL_MultiProcessor_ExitMuteMode
     /tmp/cc17XZfc.s:6740   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/cc17XZfc.s:6746   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/cc17XZfc.s:6832   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/cc17XZfc.s:6838   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/cc17XZfc.s:6924   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/cc17XZfc.s:6930   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/cc17XZfc.s:6991   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/cc17XZfc.s:6997   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
     /tmp/cc17XZfc.s:7036   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/cc17XZfc.s:7200   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/cc17XZfc.s:7244   .text.UART_DMAReceiveCplt:0000000000000000 $t
ARM GAS  /tmp/cc17XZfc.s 			page 259


     /tmp/cc17XZfc.s:7249   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/cc17XZfc.s:7537   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/cc17XZfc.s:7542   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/cc17XZfc.s:7604   .text.UART_DMAError:0000000000000000 $t
     /tmp/cc17XZfc.s:7719   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/cc17XZfc.s:7921   .text.UART_Start_Receive_IT:0000000000000000 $t
     /tmp/cc17XZfc.s:8019   .text.UART_Start_Receive_DMA:0000000000000000 $t
     /tmp/cc17XZfc.s:8291   .text.UART_Start_Receive_DMA:0000000000000128 $d
     /tmp/cc17XZfc.s:8298   .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/cc17XZfc.s:8394   .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/cc17XZfc.s:8603   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/cc17XZfc.s:8655   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/cc17XZfc.s:8748   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/cc17XZfc.s:8841   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/cc17XZfc.s:8893   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/cc17XZfc.s:8949   .text.UART_Transmit_IT:0000000000000000 $t
     /tmp/cc17XZfc.s:9085   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/cc17XZfc.s:9139   .text.UART_Receive_IT:0000000000000000 $t
     /tmp/cc17XZfc.s:9432   .text.UART_SetConfig:0000000000000000 $t
     /tmp/cc17XZfc.s:9598   .text.UART_SetConfig:0000000000000114 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq
