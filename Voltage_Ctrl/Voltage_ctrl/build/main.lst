ARM GAS  /tmp/ccLne6l3.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.LL_ADC_REG_SetSequencerRanks,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  23              	LL_ADC_REG_SetSequencerRanks:
  24              	.LFB79:
  25              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h"
   1:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @file    stm32f1xx_ll_adc.h
   4:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief   Header file of ADC LL module.
   6:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   ******************************************************************************
   7:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @attention
   8:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *
   9:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * Copyright (c) 2017 STMicroelectronics.
  10:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * All rights reserved.
  11:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *
  12:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * in the root directory of this software component.
  14:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *
  16:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   ******************************************************************************
  17:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
  18:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
  19:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #ifndef __STM32F1xx_LL_ADC_H
  21:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __STM32F1xx_LL_ADC_H
  22:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
  23:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #ifdef __cplusplus
  24:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** extern "C" {
  25:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif
  26:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
  27:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #include "stm32f1xx.h"
  29:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
  30:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @addtogroup STM32F1xx_LL_Driver
  31:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
  32:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
  33:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 2


  34:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined (ADC1) || defined (ADC2) || defined (ADC3)
  35:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
  36:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL ADC
  37:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
  38:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
  39:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
  40:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
  43:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Private constants ---------------------------------------------------------*/
  44:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Constants ADC Private Constants
  45:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
  46:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
  47:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
  48:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Internal mask for ADC group regular sequencer:                             */
  49:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* To select into literal LL_ADC_REG_RANK_x the relevant bits for:            */
  50:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* - sequencer register offset                                                */
  51:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  52:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
  53:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Internal register offset for ADC group regular sequencer configuration */
  54:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
  55:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_SQR1_REGOFFSET                 0x00000000U
  56:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_SQR2_REGOFFSET                 0x00000100U
  57:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_SQR3_REGOFFSET                 0x00000200U
  58:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_SQR4_REGOFFSET                 0x00000300U
  59:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
  60:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_SQRX_REGOFFSET_MASK        (ADC_SQR1_REGOFFSET | ADC_SQR2_REGOFFSET | ADC_SQR3_REGO
  61:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_ID_SQRX_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
  62:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
  63:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Definition of ADC group regular sequencer bits information to be inserted  */
  64:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* into ADC group regular sequencer ranks literals definition.                */
  65:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_1_SQRX_BITOFFSET_POS  ( 0U) /* Value equivalent to POSITION_VAL(ADC_SQR3_SQ1) 
  66:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_2_SQRX_BITOFFSET_POS  ( 5U) /* Value equivalent to POSITION_VAL(ADC_SQR3_SQ2) 
  67:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_3_SQRX_BITOFFSET_POS  (10U) /* Value equivalent to POSITION_VAL(ADC_SQR3_SQ3) 
  68:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_4_SQRX_BITOFFSET_POS  (15U) /* Value equivalent to POSITION_VAL(ADC_SQR3_SQ4) 
  69:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_5_SQRX_BITOFFSET_POS  (20U) /* Value equivalent to POSITION_VAL(ADC_SQR3_SQ5) 
  70:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_6_SQRX_BITOFFSET_POS  (25U) /* Value equivalent to POSITION_VAL(ADC_SQR3_SQ6) 
  71:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_7_SQRX_BITOFFSET_POS  ( 0U) /* Value equivalent to POSITION_VAL(ADC_SQR2_SQ7) 
  72:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_8_SQRX_BITOFFSET_POS  ( 5U) /* Value equivalent to POSITION_VAL(ADC_SQR2_SQ8) 
  73:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_9_SQRX_BITOFFSET_POS  (10U) /* Value equivalent to POSITION_VAL(ADC_SQR2_SQ9) 
  74:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_10_SQRX_BITOFFSET_POS (15U) /* Value equivalent to POSITION_VAL(ADC_SQR2_SQ10)
  75:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_11_SQRX_BITOFFSET_POS (20U) /* Value equivalent to POSITION_VAL(ADC_SQR2_SQ11)
  76:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_12_SQRX_BITOFFSET_POS (25U) /* Value equivalent to POSITION_VAL(ADC_SQR2_SQ12)
  77:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_13_SQRX_BITOFFSET_POS ( 0U) /* Value equivalent to POSITION_VAL(ADC_SQR1_SQ13)
  78:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_14_SQRX_BITOFFSET_POS ( 5U) /* Value equivalent to POSITION_VAL(ADC_SQR1_SQ14)
  79:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_15_SQRX_BITOFFSET_POS (10U) /* Value equivalent to POSITION_VAL(ADC_SQR1_SQ15)
  80:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_REG_RANK_16_SQRX_BITOFFSET_POS (15U) /* Value equivalent to POSITION_VAL(ADC_SQR1_SQ16)
  81:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
  82:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Internal mask for ADC group injected sequencer:                            */
  83:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_RANK_x the relevant bits for:            */
  84:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* - data register offset                                                     */
  85:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* - offset register offset                                                   */
  86:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  87:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
  88:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Internal register offset for ADC group injected data register */
  89:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
  90:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_JDR1_REGOFFSET                 0x00000000U
ARM GAS  /tmp/ccLne6l3.s 			page 3


  91:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_JDR2_REGOFFSET                 0x00000100U
  92:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_JDR3_REGOFFSET                 0x00000200U
  93:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_JDR4_REGOFFSET                 0x00000300U
  94:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
  95:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Internal register offset for ADC group injected offset configuration */
  96:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
  97:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_JOFR1_REGOFFSET                0x00000000U
  98:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_JOFR2_REGOFFSET                0x00001000U
  99:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_JOFR3_REGOFFSET                0x00002000U
 100:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_JOFR4_REGOFFSET                0x00003000U
 101:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 102:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_INJ_JDRX_REGOFFSET_MASK        (ADC_JDR1_REGOFFSET | ADC_JDR2_REGOFFSET | ADC_JDR3_REGO
 103:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_INJ_JOFRX_REGOFFSET_MASK       (ADC_JOFR1_REGOFFSET | ADC_JOFR2_REGOFFSET | ADC_JOFR3_R
 104:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_INJ_RANK_ID_JSQR_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
 105:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 106:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Internal mask for ADC channel:                                             */
 107:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* To select into literal LL_ADC_CHANNEL_x the relevant bits for:             */
 108:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* - channel identifier defined by number                                     */
 109:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* - channel differentiation between external channels (connected to          */
 110:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*   GPIO pins) and internal channels (connected to internal paths)           */
 111:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* - channel sampling time defined by SMPRx register offset                   */
 112:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*   and SMPx bits positions into SMPRx register                              */
 113:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK         (ADC_CR1_AWDCH)
 114:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS ( 0U)/* Value equivalent to POSITION_VAL(ADC_CHANNEL_ID
 115:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_ID_MASK                (ADC_CHANNEL_ID_NUMBER_MASK | ADC_CHANNEL_ID_INTERNAL_CH
 116:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Equivalent mask of ADC_CHANNEL_NUMBER_MASK aligned on register LSB (bit 0) */
 117:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 0x0000001FU /* Equivalent to shift: (ADC_CHANNEL_NUMBER_
 118:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 119:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Channel differentiation between external and internal channels */
 120:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH         0x80000000U   /* Marker of internal channel */
 121:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_2       0x40000000U   /* Marker of internal channel for other AD
 122:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_MASK    (ADC_CHANNEL_ID_INTERNAL_CH | ADC_CHANNEL_ID_INTERNAL_CH
 123:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 124:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Internal register offset for ADC channel sampling time configuration */
 125:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
 126:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_SMPR1_REGOFFSET                0x00000000U
 127:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_SMPR2_REGOFFSET                0x02000000U
 128:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_SMPRX_REGOFFSET_MASK   (ADC_SMPR1_REGOFFSET | ADC_SMPR2_REGOFFSET)
 129:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 130:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_MASK    0x01F00000U
 131:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_POS     (20U)           /* Value equivalent to POSITION_VAL(ADC_
 132:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 133:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Definition of channels ID number information to be inserted into           */
 134:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* channels literals definition.                                              */
 135:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_0_NUMBER               0x00000000U
 136:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_1_NUMBER               (                                                       
 137:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_2_NUMBER               (                                                      A
 138:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_3_NUMBER               (                                                      A
 139:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_4_NUMBER               (                                    ADC_CR1_AWDCH_2    
 140:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_5_NUMBER               (                                    ADC_CR1_AWDCH_2    
 141:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_6_NUMBER               (                                    ADC_CR1_AWDCH_2 | A
 142:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_7_NUMBER               (                                    ADC_CR1_AWDCH_2 | A
 143:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_8_NUMBER               (                  ADC_CR1_AWDCH_3                      
 144:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_9_NUMBER               (                  ADC_CR1_AWDCH_3                      
 145:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_10_NUMBER              (                  ADC_CR1_AWDCH_3                   | A
 146:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_11_NUMBER              (                  ADC_CR1_AWDCH_3                   | A
 147:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_12_NUMBER              (                  ADC_CR1_AWDCH_3 | ADC_CR1_AWDCH_2    
ARM GAS  /tmp/ccLne6l3.s 			page 4


 148:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_13_NUMBER              (                  ADC_CR1_AWDCH_3 | ADC_CR1_AWDCH_2    
 149:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_14_NUMBER              (                  ADC_CR1_AWDCH_3 | ADC_CR1_AWDCH_2 | A
 150:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_15_NUMBER              (                  ADC_CR1_AWDCH_3 | ADC_CR1_AWDCH_2 | A
 151:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_16_NUMBER              (ADC_CR1_AWDCH_4                                        
 152:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_17_NUMBER              (ADC_CR1_AWDCH_4                                        
 153:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 154:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Definition of channels sampling time information to be inserted into       */
 155:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* channels literals definition.                                              */
 156:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_0_SMP                  (ADC_SMPR2_REGOFFSET | (( 0U) << ADC_CHANNEL_SMPx_BITOFF
 157:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_1_SMP                  (ADC_SMPR2_REGOFFSET | (( 3U) << ADC_CHANNEL_SMPx_BITOFF
 158:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_2_SMP                  (ADC_SMPR2_REGOFFSET | (( 6U) << ADC_CHANNEL_SMPx_BITOFF
 159:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_3_SMP                  (ADC_SMPR2_REGOFFSET | (( 9U) << ADC_CHANNEL_SMPx_BITOFF
 160:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_4_SMP                  (ADC_SMPR2_REGOFFSET | ((12U) << ADC_CHANNEL_SMPx_BITOFF
 161:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_5_SMP                  (ADC_SMPR2_REGOFFSET | ((15U) << ADC_CHANNEL_SMPx_BITOFF
 162:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_6_SMP                  (ADC_SMPR2_REGOFFSET | ((18U) << ADC_CHANNEL_SMPx_BITOFF
 163:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_7_SMP                  (ADC_SMPR2_REGOFFSET | ((21U) << ADC_CHANNEL_SMPx_BITOFF
 164:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_8_SMP                  (ADC_SMPR2_REGOFFSET | ((24U) << ADC_CHANNEL_SMPx_BITOFF
 165:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_9_SMP                  (ADC_SMPR2_REGOFFSET | ((27U) << ADC_CHANNEL_SMPx_BITOFF
 166:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_10_SMP                 (ADC_SMPR1_REGOFFSET | (( 0U) << ADC_CHANNEL_SMPx_BITOFF
 167:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_11_SMP                 (ADC_SMPR1_REGOFFSET | (( 3U) << ADC_CHANNEL_SMPx_BITOFF
 168:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_12_SMP                 (ADC_SMPR1_REGOFFSET | (( 6U) << ADC_CHANNEL_SMPx_BITOFF
 169:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_13_SMP                 (ADC_SMPR1_REGOFFSET | (( 9U) << ADC_CHANNEL_SMPx_BITOFF
 170:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_14_SMP                 (ADC_SMPR1_REGOFFSET | ((12U) << ADC_CHANNEL_SMPx_BITOFF
 171:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_15_SMP                 (ADC_SMPR1_REGOFFSET | ((15U) << ADC_CHANNEL_SMPx_BITOFF
 172:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_16_SMP                 (ADC_SMPR1_REGOFFSET | ((18U) << ADC_CHANNEL_SMPx_BITOFF
 173:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CHANNEL_17_SMP                 (ADC_SMPR1_REGOFFSET | ((21U) << ADC_CHANNEL_SMPx_BITOFF
 174:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 175:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Internal mask for ADC analog watchdog:                                     */
 176:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* To select into literals LL_ADC_AWD_CHANNELx_xxx the relevant bits for:     */
 177:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* (concatenation of multiple bits used in different analog watchdogs,        */
 178:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* (feature of several watchdogs not available on all STM32 families)).       */
 179:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* - analog watchdog 1: monitored channel defined by number,                  */
 180:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*   selection of ADC group (ADC groups regular and-or injected).             */
 181:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 182:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog channel configuration */
 183:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_AWD_CR1_REGOFFSET              0x00000000U
 184:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 185:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_MASK         (ADC_AWD_CR1_REGOFFSET)
 186:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 187:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_AWD_CR1_CHANNEL_MASK           (ADC_CR1_AWDCH | ADC_CR1_JAWDEN | ADC_CR1_AWDEN | ADC_CR
 188:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_AWD_CR_ALL_CHANNEL_MASK        (ADC_AWD_CR1_CHANNEL_MASK)
 189:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 190:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog threshold configuration */
 191:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_AWD_TR1_HIGH_REGOFFSET         0x00000000U
 192:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_AWD_TR1_LOW_REGOFFSET          0x00000001U
 193:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_MASK         (ADC_AWD_TR1_HIGH_REGOFFSET | ADC_AWD_TR1_LOW_REGOFFSET)
 194:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 195:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* ADC registers bits positions */
 196:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define ADC_CR1_DUALMOD_BITOFFSET_POS      (16U) /* Value equivalent to POSITION_VAL(ADC_CR1_DUALMO
 197:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 198:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 199:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 200:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 201:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 202:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 203:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Private macros ------------------------------------------------------------*/
 204:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Macros ADC Private Macros
ARM GAS  /tmp/ccLne6l3.s 			page 5


 205:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 206:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 207:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 208:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 209:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Driver macro reserved for internal use: isolate bits with the
 210:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         selected mask and shift them to the register LSB
 211:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (shift mask on register position bit 0).
 212:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __BITS__ Bits in register 32 bits
 213:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __MASK__ Mask in register 32 bits
 214:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Bits in register 32 bits
 215:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 216:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __ADC_MASK_SHIFT(__BITS__, __MASK__)                                   \
 217:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   (((__BITS__) & (__MASK__)) >> POSITION_VAL((__MASK__)))
 218:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 219:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 220:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Driver macro reserved for internal use: set a pointer to
 221:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         a register from a register basis from which an offset
 222:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         is applied.
 223:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __REG__ Register basis from which the offset is applied.
 224:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __REG_OFFFSET__ Offset to be applied (unit: number of registers).
 225:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Pointer to register address
 226:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 227:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __ADC_PTR_REG_OFFSET(__REG__, __REG_OFFFSET__)                         \
 228:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****  ((__IO uint32_t *)((uint32_t) ((uint32_t)(&(__REG__)) + ((__REG_OFFFSET__) << 2U))))
 229:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 230:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 231:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 232:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 233:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 234:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 235:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Exported types ------------------------------------------------------------*/
 236:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined(USE_FULL_LL_DRIVER)
 237:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_ES_INIT ADC Exported Init structure
 238:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 239:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 240:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 241:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 242:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC common parameters
 243:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         and multimode
 244:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (all ADC instances belonging to the same ADC common instance).
 245:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_CommonInit()
 246:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         is conditioned to ADC instances state (all ADC instances
 247:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         sharing the same ADC common instance):
 248:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         All ADC instances sharing the same ADC common instance must be
 249:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         disabled.
 250:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 251:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** typedef struct
 252:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
 253:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t Multimode;                   /*!< Set ADC multimode configuration to operate in independ
 254:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 255:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              
 256:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 257:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** } LL_ADC_CommonInitTypeDef;
 258:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 259:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC instance.
 260:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC instance.
 261:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Affects both group regular and group injected (availability
ARM GAS  /tmp/ccLne6l3.s 			page 6


 262:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         of ADC group injected depends on STM32 families).
 263:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 264:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Instance .
 265:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_Init()
 266:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         is conditioned to ADC state:
 267:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC instance must be disabled.
 268:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 269:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 270:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 271:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 272:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 273:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 274:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 275:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         refer to description of each function for setting
 276:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         conditioned to ADC state.
 277:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 278:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** typedef struct
 279:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
 280:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t DataAlignment;               /*!< Set ADC conversion data alignment.
 281:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_DATA_A
 282:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              
 283:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 284:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 285:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t SequencersScanMode;          /*!< Set ADC scan selection.
 286:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_SCAN_S
 287:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              
 288:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 289:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 290:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** } LL_ADC_InitTypeDef;
 291:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 292:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 293:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group regular.
 294:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group regular.
 295:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 296:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 297:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (functions with prefix "REG").
 298:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_REG_Init()
 299:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         is conditioned to ADC state:
 300:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC instance must be disabled.
 301:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 302:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 303:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 304:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 305:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 306:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 307:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 308:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         refer to description of each function for setting
 309:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         conditioned to ADC state.
 310:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 311:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** typedef struct
 312:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
 313:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group regular conversion trigger source: inter
 314:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_TR
 315:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              @note On this STM32 series, external trigger is set wi
 316:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                                    (only trigger polarity available on this STM32 s
 317:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              
 318:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
ARM GAS  /tmp/ccLne6l3.s 			page 7


 319:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 320:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group regular sequencer length.
 321:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 322:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              @note This parameter is discarded if scan mode is disa
 323:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              
 324:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 325:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 326:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group regular sequencer discontinuous mode: se
 327:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 328:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              @note This parameter has an effect only if group regul
 329:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 330:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              
 331:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 332:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 333:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t ContinuousMode;              /*!< Set ADC continuous conversion mode on ADC group regula
 334:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_CO
 335:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              Note: It is not possible to enable both ADC group regu
 336:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              
 337:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 338:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 339:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t DMATransfer;                 /*!< Set ADC group regular conversion data transfer: no tra
 340:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_DM
 341:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              
 342:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 343:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 344:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** } LL_ADC_REG_InitTypeDef;
 345:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 346:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 347:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group injected.
 348:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group injected.
 349:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 350:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 351:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (functions with prefix "INJ").
 352:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_INJ_Init()
 353:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         is conditioned to ADC state:
 354:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC instance must be disabled.
 355:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 356:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 357:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 358:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 359:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 360:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 361:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 362:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         refer to description of each function for setting
 363:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         conditioned to ADC state.
 364:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 365:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** typedef struct
 366:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
 367:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group injected conversion trigger source: inte
 368:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 369:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              @note On this STM32 series, external trigger is set wi
 370:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                                    (only trigger polarity available on this STM32 s
 371:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              
 372:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 373:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 374:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group injected sequencer length.
 375:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
ARM GAS  /tmp/ccLne6l3.s 			page 8


 376:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              @note This parameter is discarded if scan mode is disa
 377:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              
 378:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 379:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 380:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group injected sequencer discontinuous mode: s
 381:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 382:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              @note This parameter has an effect only if group injec
 383:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 384:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              
 385:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 386:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 387:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t TrigAuto;                    /*!< Set ADC group injected conversion trigger: independent
 388:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 389:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              Note: This parameter must be set to set to independent
 390:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              
 391:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 392:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 393:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** } LL_ADC_INJ_InitTypeDef;
 394:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 395:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 396:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 397:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 398:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif /* USE_FULL_LL_DRIVER */
 399:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 400:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Exported constants --------------------------------------------------------*/
 401:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Constants ADC Exported Constants
 402:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 403:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 404:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 405:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_FLAG ADC flags
 406:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief    Flags defines which can be used with LL_ADC_ReadReg function
 407:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 408:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 409:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_FLAG_STRT                   ADC_SR_STRT        /*!< ADC flag ADC group regular conve
 410:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_FLAG_EOS                    ADC_SR_EOC         /*!< ADC flag ADC group regular end o
 411:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_FLAG_JSTRT                  ADC_SR_JSTRT       /*!< ADC flag ADC group injected conv
 412:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS                   ADC_SR_JEOC        /*!< ADC flag ADC group injected end 
 413:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1                   ADC_SR_AWD         /*!< ADC flag ADC analog watchdog 1 *
 414:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
 415:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_MST                ADC_SR_EOC         /*!< ADC flag ADC multimode master gr
 416:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_SLV                ADC_SR_EOC         /*!< ADC flag ADC multimode slave gro
 417:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_MST               ADC_SR_JEOC        /*!< ADC flag ADC multimode master gr
 418:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_SLV               ADC_SR_JEOC        /*!< ADC flag ADC multimode slave gro
 419:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_MST               ADC_SR_AWD         /*!< ADC flag ADC multimode master an
 420:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_SLV               ADC_SR_AWD         /*!< ADC flag ADC multimode slave ana
 421:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif
 422:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 423:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 424:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 425:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 426:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_IT ADC interruptions for configuration (interruption enable or disable)
 427:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief    IT defines which can be used with LL_ADC_ReadReg and  LL_ADC_WriteReg functions
 428:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 429:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 430:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_IT_EOS                      ADC_CR1_EOCIE      /*!< ADC interruption ADC group regul
 431:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_IT_JEOS                     ADC_CR1_JEOCIE     /*!< ADC interruption ADC group injec
 432:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_IT_AWD1                     ADC_CR1_AWDIE      /*!< ADC interruption ADC analog watc
ARM GAS  /tmp/ccLne6l3.s 			page 9


 433:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 434:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 435:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 436:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 437:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REGISTERS  ADC registers compliant with specific purpose
 438:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 439:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 440:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* List of ADC registers intended to be used (most commonly) with             */
 441:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* DMA transfer.                                                              */
 442:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Refer to function @ref LL_ADC_DMA_GetRegAddr().                            */
 443:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA          0x00000000U   /* ADC group regular conversion data reg
 444:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
 445:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA_MULTI    0x00000001U   /* ADC group regular conversion data reg
 446:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif
 447:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 448:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 449:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 450:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 451:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_PATH_INTERNAL  ADC common - Measurement path to internal channels
 452:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 453:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 454:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Note: Other measurement paths to internal channels may be available        */
 455:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       (connections to other peripherals).                                  */
 456:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       If they are not listed below, they do not require any specific       */
 457:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       path enable. In this case, Access to measurement path is done        */
 458:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       only by selecting the corresponding ADC internal channel.            */
 459:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_NONE          0x00000000U            /*!< ADC measurement paths all di
 460:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VREFINT       (ADC_CR2_TSVREFE)      /*!< ADC measurement path to inte
 461:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_TEMPSENSOR    (ADC_CR2_TSVREFE)      /*!< ADC measurement path to inte
 462:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 463:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 464:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 465:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 466:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_RESOLUTION  ADC instance - Resolution
 467:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 468:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 469:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B              0x00000000U                         /*!< ADC resolution 
 470:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 471:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 472:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 473:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 474:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_DATA_ALIGN  ADC instance - Data alignment
 475:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 476:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 477:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_RIGHT            0x00000000U            /*!< ADC conversion data alignmen
 478:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_LEFT             (ADC_CR2_ALIGN)        /*!< ADC conversion data alignmen
 479:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 480:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 481:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 482:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 483:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_SCAN_SELECTION ADC instance - Scan selection
 484:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 485:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 486:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_SEQ_SCAN_DISABLE            0x00000000U    /*!< ADC conversion is performed in unita
 487:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_SEQ_SCAN_ENABLE             (ADC_CR1_SCAN) /*!< ADC conversions are performed in seq
 488:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 489:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
ARM GAS  /tmp/ccLne6l3.s 			page 10


 490:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 491:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 492:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_GROUPS  ADC instance - Groups
 493:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 494:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 495:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR               0x00000001U   /*!< ADC group regular (available on all S
 496:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_GROUP_INJECTED              0x00000002U   /*!< ADC group injected (not available on 
 497:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR_INJECTED      0x00000003U   /*!< ADC both groups regular and injected 
 498:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 499:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 500:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 501:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 502:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL  ADC instance - Channel number
 503:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 504:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 505:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_0                   (ADC_CHANNEL_0_NUMBER  | ADC_CHANNEL_0_SMP)  /*!< ADC ex
 506:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_1                   (ADC_CHANNEL_1_NUMBER  | ADC_CHANNEL_1_SMP)  /*!< ADC ex
 507:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_2                   (ADC_CHANNEL_2_NUMBER  | ADC_CHANNEL_2_SMP)  /*!< ADC ex
 508:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_3                   (ADC_CHANNEL_3_NUMBER  | ADC_CHANNEL_3_SMP)  /*!< ADC ex
 509:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_4                   (ADC_CHANNEL_4_NUMBER  | ADC_CHANNEL_4_SMP)  /*!< ADC ex
 510:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_5                   (ADC_CHANNEL_5_NUMBER  | ADC_CHANNEL_5_SMP)  /*!< ADC ex
 511:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_6                   (ADC_CHANNEL_6_NUMBER  | ADC_CHANNEL_6_SMP)  /*!< ADC ex
 512:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_7                   (ADC_CHANNEL_7_NUMBER  | ADC_CHANNEL_7_SMP)  /*!< ADC ex
 513:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_8                   (ADC_CHANNEL_8_NUMBER  | ADC_CHANNEL_8_SMP)  /*!< ADC ex
 514:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_9                   (ADC_CHANNEL_9_NUMBER  | ADC_CHANNEL_9_SMP)  /*!< ADC ex
 515:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_10                  (ADC_CHANNEL_10_NUMBER | ADC_CHANNEL_10_SMP) /*!< ADC ex
 516:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_11                  (ADC_CHANNEL_11_NUMBER | ADC_CHANNEL_11_SMP) /*!< ADC ex
 517:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_12                  (ADC_CHANNEL_12_NUMBER | ADC_CHANNEL_12_SMP) /*!< ADC ex
 518:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_13                  (ADC_CHANNEL_13_NUMBER | ADC_CHANNEL_13_SMP) /*!< ADC ex
 519:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_14                  (ADC_CHANNEL_14_NUMBER | ADC_CHANNEL_14_SMP) /*!< ADC ex
 520:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_15                  (ADC_CHANNEL_15_NUMBER | ADC_CHANNEL_15_SMP) /*!< ADC ex
 521:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_16                  (ADC_CHANNEL_16_NUMBER | ADC_CHANNEL_16_SMP) /*!< ADC ex
 522:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_17                  (ADC_CHANNEL_17_NUMBER | ADC_CHANNEL_17_SMP) /*!< ADC ex
 523:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 524:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 525:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 526:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 527:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 528:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 529:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_SOURCE  ADC group regular - Trigger source
 530:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 531:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 532:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* ADC group regular external triggers for ADC instances: ADC1, ADC2, ADC3 (for ADC instances ADCx 
 533:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_SOFTWARE           (ADC_CR2_EXTSEL_2 | ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_0)
 534:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH3       (ADC_CR2_EXTSEL_1)                                      
 535:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* ADC group regular external triggers for ADC instances: ADC1, ADC2 (for ADC instances ADCx availa
 536:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH1       0x00000000U                                             
 537:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH2       (ADC_CR2_EXTSEL_0)                                      
 538:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH2       (ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_0)                   
 539:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_TRGO      (ADC_CR2_EXTSEL_2)                                      
 540:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_CH4       (ADC_CR2_EXTSEL_2 | ADC_CR2_EXTSEL_0)                   
 541:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_EXTI_LINE11    (ADC_CR2_EXTSEL_2 | ADC_CR2_EXTSEL_1)                   
 542:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined (STM32F101xE) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F105xC
 543:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Note: TIM8_TRGO is available on ADC1 and ADC2 only in high-density and     */
 544:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       XL-density devices.                                                  */
 545:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Note: To use TIM8_TRGO on ADC1 or ADC2, a remap of trigger must be done    */
 546:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       A remap of trigger must be done at top level (refer to               */
ARM GAS  /tmp/ccLne6l3.s 			page 11


 547:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       AFIO peripheral).                                                    */
 548:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO      (LL_ADC_REG_TRIG_EXT_EXTI_LINE11)                       
 549:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif /* STM32F101xE || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
 550:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined (STM32F103xE) || defined (STM32F103xG)
 551:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* ADC group regular external triggers for ADC instances: ADC3 (for ADC instances ADCx available on
 552:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_CH1       (LL_ADC_REG_TRIG_EXT_TIM1_CH1)                          
 553:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH3       (LL_ADC_REG_TRIG_EXT_TIM1_CH2)                          
 554:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_CH1       (LL_ADC_REG_TRIG_EXT_TIM2_CH2)                          
 555:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO_ADC3 (LL_ADC_REG_TRIG_EXT_TIM3_TRGO)                         
 556:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM5_CH1       (LL_ADC_REG_TRIG_EXT_TIM4_CH4)                          
 557:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM5_CH3       (LL_ADC_REG_TRIG_EXT_EXTI_LINE11)                       
 558:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif
 559:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 560:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 561:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 562:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 563:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_EDGE  ADC group regular - Trigger edge
 564:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 565:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 566:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISING         ADC_CR2_EXTTRIG                         /*!< ADC group r
 567:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 568:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 569:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 570:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 571:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_CONTINUOUS_MODE  ADC group regular - Continuous mode
 572:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** * @{
 573:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** */
 574:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_CONV_SINGLE             0x00000000U             /*!< ADC conversions are perform
 575:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_CONV_CONTINUOUS         (ADC_CR2_CONT)          /*!< ADC conversions are perform
 576:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 577:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 578:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 579:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 580:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DMA_TRANSFER  ADC group regular - DMA transfer of ADC conversion data
 581:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 582:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 583:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_NONE       0x00000000U              /*!< ADC conversions are not tr
 584:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_UNLIMITED  (ADC_CR2_DMA)                        /*!< ADC conversion
 585:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 586:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 587:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 588:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 589:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_SCAN_LENGTH  ADC group regular - Sequencer scan length
 590:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 591:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 592:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DISABLE        0x00000000U                                             
 593:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS  (                                             ADC_SQR1_L
 594:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS  (                              ADC_SQR1_L_1             
 595:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS  (                              ADC_SQR1_L_1 | ADC_SQR1_L
 596:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS  (               ADC_SQR1_L_2                            
 597:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS  (               ADC_SQR1_L_2                | ADC_SQR1_L
 598:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1             
 599:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
 600:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS  (ADC_SQR1_L_3                                           
 601:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS (ADC_SQR1_L_3                               | ADC_SQR1_L
 602:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1             
 603:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1 | ADC_SQR1_L
ARM GAS  /tmp/ccLne6l3.s 			page 12


 604:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                            
 605:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                | ADC_SQR1_L
 606:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1             
 607:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
 608:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 609:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 610:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 611:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 612:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_DISCONT_MODE  ADC group regular - Sequencer discontinuous mode
 613:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 614:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 615:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_DISABLE     0x00000000U                                             
 616:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_1RANK       (                                                       
 617:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_2RANKS      (                                        ADC_CR1_DISCNUM
 618:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_3RANKS      (                    ADC_CR1_DISCNUM_1                  
 619:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_4RANKS      (                    ADC_CR1_DISCNUM_1 | ADC_CR1_DISCNUM
 620:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_5RANKS      (ADC_CR1_DISCNUM_2                                      
 621:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_6RANKS      (ADC_CR1_DISCNUM_2                     | ADC_CR1_DISCNUM
 622:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_7RANKS      (ADC_CR1_DISCNUM_2 | ADC_CR1_DISCNUM_1                  
 623:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_8RANKS      (ADC_CR1_DISCNUM_2 | ADC_CR1_DISCNUM_1 | ADC_CR1_DISCNUM
 624:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 625:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 626:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 627:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 628:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_RANKS  ADC group regular - Sequencer ranks
 629:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 630:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 631:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_1                  (ADC_SQR3_REGOFFSET | ADC_REG_RANK_1_SQRX_BITOFFSET_POS)
 632:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_2                  (ADC_SQR3_REGOFFSET | ADC_REG_RANK_2_SQRX_BITOFFSET_POS)
 633:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_3                  (ADC_SQR3_REGOFFSET | ADC_REG_RANK_3_SQRX_BITOFFSET_POS)
 634:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_4                  (ADC_SQR3_REGOFFSET | ADC_REG_RANK_4_SQRX_BITOFFSET_POS)
 635:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_5                  (ADC_SQR3_REGOFFSET | ADC_REG_RANK_5_SQRX_BITOFFSET_POS)
 636:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_6                  (ADC_SQR3_REGOFFSET | ADC_REG_RANK_6_SQRX_BITOFFSET_POS)
 637:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_7                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_7_SQRX_BITOFFSET_POS)
 638:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_8                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_8_SQRX_BITOFFSET_POS)
 639:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_9                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_9_SQRX_BITOFFSET_POS)
 640:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_10                 (ADC_SQR2_REGOFFSET | ADC_REG_RANK_10_SQRX_BITOFFSET_POS
 641:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_11                 (ADC_SQR2_REGOFFSET | ADC_REG_RANK_11_SQRX_BITOFFSET_POS
 642:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_12                 (ADC_SQR2_REGOFFSET | ADC_REG_RANK_12_SQRX_BITOFFSET_POS
 643:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_13                 (ADC_SQR1_REGOFFSET | ADC_REG_RANK_13_SQRX_BITOFFSET_POS
 644:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_14                 (ADC_SQR1_REGOFFSET | ADC_REG_RANK_14_SQRX_BITOFFSET_POS
 645:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_15                 (ADC_SQR1_REGOFFSET | ADC_REG_RANK_15_SQRX_BITOFFSET_POS
 646:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_REG_RANK_16                 (ADC_SQR1_REGOFFSET | ADC_REG_RANK_16_SQRX_BITOFFSET_POS
 647:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 648:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 649:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 650:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 651:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_SOURCE  ADC group injected - Trigger source
 652:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 653:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 654:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* ADC group injected external triggers for ADC instances: ADC1, ADC2, ADC3 (for ADC instances ADCx
 655:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_SOFTWARE           (ADC_CR2_JEXTSEL_2 | ADC_CR2_JEXTSEL_1 | ADC_CR2_JEXTSEL
 656:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO      0x00000000U                                             
 657:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_CH4       (ADC_CR2_JEXTSEL_0)                                     
 658:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* ADC group injected external triggers for ADC instances: ADC1, ADC2 (for ADC instances ADCx avail
 659:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_TRGO      (ADC_CR2_JEXTSEL_1)                                     
 660:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_CH1       (ADC_CR2_JEXTSEL_1 | ADC_CR2_JEXTSEL_0)                 
ARM GAS  /tmp/ccLne6l3.s 			page 13


 661:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH4       (ADC_CR2_JEXTSEL_2)                                     
 662:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_TRGO      (ADC_CR2_JEXTSEL_2 | ADC_CR2_JEXTSEL_0)                 
 663:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_EXTI_LINE15    (ADC_CR2_JEXTSEL_2 | ADC_CR2_JEXTSEL_1)                 
 664:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined (STM32F101xE) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F105xC
 665:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Note: TIM8_CH4 is available on ADC1 and ADC2 only in high-density and      */
 666:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       XL-density devices.                                                  */
 667:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Note: To use TIM8_TRGO on ADC1 or ADC2, a remap of trigger must be done    */
 668:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       A remap of trigger must be done at top level (refer to               */
 669:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       AFIO peripheral).                                                    */
 670:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_CH4        (LL_ADC_INJ_TRIG_EXT_EXTI_LINE15)                      
 671:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif /* STM32F101xE || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
 672:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined (STM32F103xE) || defined (STM32F103xG)
 673:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* ADC group injected external triggers for ADC instances: ADC3 (for ADC instances ADCx available o
 674:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_CH3        (LL_ADC_INJ_TRIG_EXT_TIM2_TRGO)                        
 675:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_CH2        (LL_ADC_INJ_TRIG_EXT_TIM2_CH1)                         
 676:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_CH4_ADC3   (LL_ADC_INJ_TRIG_EXT_TIM3_CH4)                         
 677:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM5_TRGO       (LL_ADC_INJ_TRIG_EXT_TIM4_TRGO)                        
 678:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM5_CH4        (LL_ADC_INJ_TRIG_EXT_EXTI_LINE15)                      
 679:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif
 680:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 681:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 682:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 683:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 684:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_EDGE  ADC group injected - Trigger edge
 685:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 686:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 687:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISING         ADC_CR2_JEXTTRIG                        /*!< ADC group i
 688:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 689:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 690:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 691:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 692:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIG_AUTO  ADC group injected - Automatic trigger mode
 693:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** * @{
 694:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** */
 695:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_INDEPENDENT        0x00000000U            /*!< ADC group injected conversio
 696:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_FROM_GRP_REGULAR   (ADC_CR1_JAUTO)        /*!< ADC group injected conversio
 697:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 698:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 699:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 700:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 701:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 702:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_SCAN_LENGTH  ADC group injected - Sequencer scan length
 703:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 704:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 705:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_DISABLE        0x00000000U                     /*!< ADC group injected 
 706:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS  (                ADC_JSQR_JL_0) /*!< ADC group injected 
 707:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS  (ADC_JSQR_JL_1                ) /*!< ADC group injected 
 708:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS  (ADC_JSQR_JL_1 | ADC_JSQR_JL_0) /*!< ADC group injected 
 709:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 710:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 711:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 712:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 713:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_DISCONT_MODE  ADC group injected - Sequencer discontinuous mode
 714:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 715:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 716:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_DISABLE     0x00000000U            /*!< ADC group injected sequencer
 717:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_1RANK       (ADC_CR1_JDISCEN)      /*!< ADC group injected sequencer
ARM GAS  /tmp/ccLne6l3.s 			page 14


 718:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 719:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 720:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 721:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 722:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_RANKS  ADC group injected - Sequencer ranks
 723:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 724:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 725:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_RANK_1                  (ADC_JDR1_REGOFFSET | ADC_JOFR1_REGOFFSET | 0x00000001U)
 726:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_RANK_2                  (ADC_JDR2_REGOFFSET | ADC_JOFR2_REGOFFSET | 0x00000002U)
 727:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_RANK_3                  (ADC_JDR3_REGOFFSET | ADC_JOFR3_REGOFFSET | 0x00000003U)
 728:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_INJ_RANK_4                  (ADC_JDR4_REGOFFSET | ADC_JOFR4_REGOFFSET | 0x00000004U)
 729:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 730:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 731:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 732:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 733:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
 734:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 735:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 736:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_1CYCLE_5       0x00000000U                                             
 737:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_7CYCLES_5      (ADC_SMPR2_SMP0_0)                                      
 738:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_13CYCLES_5     (ADC_SMPR2_SMP0_1)                                      
 739:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_28CYCLES_5     (ADC_SMPR2_SMP0_1 | ADC_SMPR2_SMP0_0)                   
 740:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_41CYCLES_5     (ADC_SMPR2_SMP0_2)                                      
 741:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_55CYCLES_5     (ADC_SMPR2_SMP0_2 | ADC_SMPR2_SMP0_0)                   
 742:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_71CYCLES_5     (ADC_SMPR2_SMP0_2 | ADC_SMPR2_SMP0_1)                   
 743:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_239CYCLES_5    (ADC_SMPR2_SMP0_2 | ADC_SMPR2_SMP0_1 | ADC_SMPR2_SMP0_0)
 744:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 745:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 746:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 747:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 748:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_NUMBER Analog watchdog - Analog watchdog number
 749:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 750:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 751:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD1                        (ADC_AWD_CR1_CHANNEL_MASK  | ADC_AWD_CR1_REGOFFSET) /*!<
 752:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 753:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 754:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 755:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 756:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_CHANNELS  Analog watchdog - Monitored channels
 757:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 758:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 759:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_DISABLE                 0x00000000U                                             
 760:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG        (                                                       
 761:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_INJ        (                                            ADC_CR1_JAW
 762:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG_INJ    (                                            ADC_CR1_JAW
 763:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK)              
 764:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_INJ           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 765:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG_INJ       ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 766:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK)              
 767:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_INJ           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 768:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG_INJ       ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 769:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK)              
 770:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_INJ           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 771:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG_INJ       ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 772:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK)              
 773:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_INJ           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 774:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG_INJ       ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
ARM GAS  /tmp/ccLne6l3.s 			page 15


 775:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK)              
 776:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_INJ           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 777:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG_INJ       ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 778:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK)              
 779:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_INJ           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 780:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG_INJ       ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 781:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK)              
 782:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_INJ           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 783:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG_INJ       ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 784:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK)              
 785:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_INJ           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 786:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG_INJ       ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 787:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK)              
 788:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_INJ           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 789:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG_INJ       ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 790:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK)              
 791:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_INJ           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 792:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG_INJ       ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 793:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK)              
 794:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_INJ          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 795:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG_INJ      ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 796:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK)              
 797:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_INJ          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 798:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG_INJ      ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 799:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK)              
 800:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_INJ          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 801:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG_INJ      ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 802:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK)              
 803:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_INJ          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 804:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG_INJ      ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 805:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK)              
 806:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_INJ          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 807:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG_INJ      ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 808:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK)              
 809:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_INJ          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 810:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG_INJ      ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 811:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK)              
 812:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_INJ          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 813:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG_INJ      ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 814:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK)              
 815:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_INJ          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 816:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG_INJ      ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAW
 817:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG          ((LL_ADC_CHANNEL_VREFINT    & ADC_CHANNEL_ID_MASK)      
 818:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_INJ          ((LL_ADC_CHANNEL_VREFINT    & ADC_CHANNEL_ID_MASK) | ADC
 819:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG_INJ      ((LL_ADC_CHANNEL_VREFINT    & ADC_CHANNEL_ID_MASK) | ADC
 820:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG       ((LL_ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_ID_MASK)      
 821:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_INJ       ((LL_ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_ID_MASK) | ADC
 822:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ   ((LL_ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_ID_MASK) | ADC
 823:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 824:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 825:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 826:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 827:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_THRESHOLDS  Analog watchdog - Thresholds
 828:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 829:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 830:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_HIGH          (ADC_AWD_TR1_HIGH_REGOFFSET) /*!< ADC analog watchdog th
 831:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_LOW           (ADC_AWD_TR1_LOW_REGOFFSET)  /*!< ADC analog watchdog th
ARM GAS  /tmp/ccLne6l3.s 			page 16


 832:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 833:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 834:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 835:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 836:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if !defined(ADC_MULTIMODE_SUPPORT)
 837:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MODE Multimode - Mode
 838:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 839:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 840:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_MULTI_INDEPENDENT              0x00000000U                                          
 841:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 842:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 843:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 844:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif
 845:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
 846:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MODE  Multimode - Mode
 847:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 848:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 849:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_MULTI_INDEPENDENT              0x00000000U                                          
 850:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIMULT          (                    ADC_CR1_DUALMOD_2 | ADC_CR1_DUAL
 851:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INTERL_FAST     (                    ADC_CR1_DUALMOD_2 | ADC_CR1_DUAL
 852:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INTERL_SLOW     (ADC_CR1_DUALMOD_3                                   
 853:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_SIMULT          (                    ADC_CR1_DUALMOD_2               
 854:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_ALTERN          (ADC_CR1_DUALMOD_3                                   
 855:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM     (                                                    
 856:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT     (                                        ADC_CR1_DUAL
 857:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INTFAST_INJ_SIM (                                        ADC_CR1_DUAL
 858:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INTSLOW_INJ_SIM (                    ADC_CR1_DUALMOD_2               
 859:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 860:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 861:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 862:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 863:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 864:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MASTER_SLAVE  Multimode - ADC master or slave
 865:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 866:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 867:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER                (                  ADC_DR_DATA) /*!< In multimode, selec
 868:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_MULTI_SLAVE                 (ADC_DR_ADC2DATA              ) /*!< In multimode, selec
 869:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER_SLAVE          (ADC_DR_ADC2DATA | ADC_DR_DATA) /*!< In multimode, selec
 870:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 871:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 872:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 873:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 874:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
 875:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 876:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 877:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EC_HW_DELAYS  Definitions of ADC hardware constraints delays
 878:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Only ADC IP HW delays are defined in ADC LL driver driver,
 879:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         not timeout values.
 880:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         For details on delays values, refer to descriptions in source code
 881:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         above each literal definition.
 882:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 883:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 884:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
 885:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Note: Only ADC IP HW delays are defined in ADC LL driver driver,           */
 886:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       not timeout values.                                                  */
 887:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       Timeout values for ADC operations are dependent to device clock      */
 888:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       configuration (system clock versus ADC clock),                       */
ARM GAS  /tmp/ccLne6l3.s 			page 17


 889:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       and therefore must be defined in user application.                   */
 890:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       Indications for estimation of ADC timeout delays, for this           */
 891:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       STM32 series:                                                         */
 892:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       - ADC enable time: maximum delay is 1us                              */
 893:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tSTAB")                     */
 894:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       - ADC conversion time: duration depending on ADC clock and ADC       */
 895:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*         configuration.                                                     */
 896:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*         (refer to device reference manual, section "Timing")               */
 897:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 898:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Delay for temperature sensor stabilization time.                           */
 899:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Literal set to maximum value (refer to device datasheet,                   */
 900:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* parameter "tSTART").                                                       */
 901:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Unit: us                                                                   */
 902:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_DELAY_TEMPSENSOR_STAB_US       (10U)  /*!< Delay for internal voltage reference stab
 903:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 904:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Delay required between ADC disable and ADC calibration start.              */
 905:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Note: On this STM32 series, before starting a calibration,                  */
 906:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       ADC must be disabled.                                                */
 907:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       A minimum number of ADC clock cycles are required                    */
 908:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       between ADC disable state and calibration start.                     */
 909:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       Refer to literal @ref LL_ADC_DELAY_ENABLE_CALIB_ADC_CYCLES.          */
 910:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       Wait time can be computed in user application by waiting for the     */
 911:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       equivalent number of CPU cycles, by taking into account              */
 912:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       ratio of CPU clock versus ADC clock prescalers.                      */
 913:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Unit: ADC clock cycles.                                                    */
 914:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_DELAY_DISABLE_CALIB_ADC_CYCLES  (2U)  /*!< Delay required between ADC disable and AD
 915:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 916:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Delay required between end of ADC Enable and the start of ADC calibration. */
 917:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Note: On this STM32 series, a minimum number of ADC clock cycles            */
 918:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       are required between the end of ADC enable and the start of ADC      */
 919:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       calibration.                                                         */
 920:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       Wait time can be computed in user application by waiting for the     */
 921:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       equivalent number of CPU cycles, by taking into account              */
 922:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       ratio of CPU clock versus ADC clock prescalers.                      */
 923:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Unit: ADC clock cycles.                                                    */
 924:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_DELAY_ENABLE_CALIB_ADC_CYCLES  (2U)  /*!< Delay required between end of ADC enable a
 925:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 926:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 927:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 928:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 929:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 930:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 931:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 932:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 933:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 934:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 935:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Exported macro ------------------------------------------------------------*/
 936:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Macros ADC Exported Macros
 937:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 938:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 939:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 940:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EM_WRITE_READ Common write and read registers Macros
 941:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 942:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 943:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 944:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 945:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Write a value in ADC register
ARM GAS  /tmp/ccLne6l3.s 			page 18


 946:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
 947:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __REG__ Register to be written
 948:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __VALUE__ Value to be written in the register
 949:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
 950:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 951:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 952:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 953:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 954:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Read a value in ADC register
 955:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
 956:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __REG__ Register to be read
 957:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Register value
 958:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 959:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define LL_ADC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 960:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 961:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
 962:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 963:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 964:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EM_HELPER_MACRO ADC helper macro
 965:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
 966:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
 967:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
 968:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
 969:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel number in decimal format
 970:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         from literals LL_ADC_CHANNEL_x.
 971:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Example:
 972:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           __LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_CHANNEL_4)
 973:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           will return decimal number "4".
 974:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   The input can be a value from functions where a channel
 975:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         number is returned, either defined with number
 976:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         or with bitfield (only one bit must be set).
 977:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
 978:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
 979:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
 980:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
 981:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
 982:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
 983:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
 984:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
 985:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
 986:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
 987:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
 988:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
 989:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
 990:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
 991:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
 992:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
 993:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
 994:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
 995:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
 996:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
 997:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
 998:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
 999:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
1000:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value between Min_Data=0 and Max_Data=18
1001:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1002:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                        \
ARM GAS  /tmp/ccLne6l3.s 			page 19


1003:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
1004:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1005:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1006:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel in literal format LL_ADC_CHANNEL_x
1007:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         from number in decimal format.
1008:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Example:
1009:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           __LL_ADC_DECIMAL_NB_TO_CHANNEL(4)
1010:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           will return a data equivalent to "LL_ADC_CHANNEL_4".
1011:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __DECIMAL_NB__: Value between Min_Data=0 and Max_Data=18
1012:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1013:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1014:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1015:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1016:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1017:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1018:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1019:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1020:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1021:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1022:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1023:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1024:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1025:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1026:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1027:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1028:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1029:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1030:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1031:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1032:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1033:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
1034:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available only on ADC instance: ADC1.\n
1035:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) For ADC channel read back from ADC register,
1036:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             comparison with internal channel parameter to be done
1037:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1038:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1039:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                                             
1040:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   (((__DECIMAL_NB__) <= 9U)                                                                        
1041:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****     ? (                                                                                            
1042:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                                   
1043:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****        (ADC_SMPR2_REGOFFSET | (((uint32_t) (3U * (__DECIMAL_NB__))) << ADC_CHANNEL_SMPx_BITOFFSET_P
1044:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       )                                                                                            
1045:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       :                                                                                            
1046:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       (                                                                                            
1047:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                                   
1048:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****        (ADC_SMPR1_REGOFFSET | (((uint32_t) (3U * ((__DECIMAL_NB__) - 10U))) << ADC_CHANNEL_SMPx_BIT
1049:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       )                                                                                            
1050:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   )
1051:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1052:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1053:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Helper macro to determine whether the selected channel
1054:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         corresponds to literal definitions of driver.
1055:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   The different literal definitions of ADC channels are:
1056:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - ADC internal channel:
1057:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...
1058:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - ADC external channel (channel connected to a GPIO pin):
1059:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...
ARM GAS  /tmp/ccLne6l3.s 			page 20


1060:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from literal
1061:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1062:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1063:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...),
1064:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         must not be a value from functions where a channel number is
1065:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         returned from ADC registers,
1066:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         because internal and external channels share the same channel
1067:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1068:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         parameters definitions of driver.
1069:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1070:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1071:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1072:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1073:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1074:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1075:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1076:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1077:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1078:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1079:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1080:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1081:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1082:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1083:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1084:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1085:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1086:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1087:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1088:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1089:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1090:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
1091:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
1092:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value "0" if the channel corresponds to a parameter definition of a ADC external channe
1093:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Value "1" if the channel corresponds to a parameter definition of a ADC internal channe
1094:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1095:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL(__CHANNEL__)                              \
1096:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_INTERNAL_CH_MASK) != 0U)
1097:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1098:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1099:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Helper macro to convert a channel defined from parameter
1100:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1101:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1102:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         to its equivalent parameter definition of a ADC external channel
1103:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...).
1104:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   The channel parameter can be, additionally to a value
1105:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         defined from parameter definition of a ADC internal channel
1106:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...),
1107:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         a value defined from parameter definition of
1108:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1109:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         or a value from functions where a channel number is returned
1110:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         from ADC registers.
1111:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1112:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1113:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1114:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1115:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1116:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
ARM GAS  /tmp/ccLne6l3.s 			page 21


1117:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1118:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1119:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1120:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1121:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1122:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1123:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1124:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1125:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1126:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1127:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1128:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1129:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1130:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1131:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1132:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
1133:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
1134:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1135:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1136:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1137:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1138:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1139:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1140:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1141:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1142:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1143:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1144:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1145:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1146:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1147:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1148:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1149:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1150:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1151:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1152:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1153:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1154:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL(__CHANNEL__)                     \
1155:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   ((__CHANNEL__) & ~ADC_CHANNEL_ID_INTERNAL_CH_MASK)
1156:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1157:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1158:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Helper macro to determine whether the internal channel
1159:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         selected is available on the ADC instance selected.
1160:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from parameter
1161:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1162:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1163:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         must not be a value defined from parameter definition of
1164:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1165:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         or a value from functions where a channel number is
1166:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         returned from ADC registers,
1167:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         because internal and external channels share the same channel
1168:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1169:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         parameters definitions of driver.
1170:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __ADC_INSTANCE__ ADC instance
1171:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1172:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1173:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
ARM GAS  /tmp/ccLne6l3.s 			page 22


1174:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
1175:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
1176:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value "0" if the internal channel selected is not available on the ADC instance selecte
1177:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Value "1" if the internal channel selected is available on the ADC instance selected.
1178:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1179:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1180:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   (((__ADC_INSTANCE__) == ADC1)                                                \
1181:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****     ? (                                                                        \
1182:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)    ||                         \
1183:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR)                            \
1184:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       )                                                                        \
1185:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       :                                                                        \
1186:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       (0U)                                                                     \
1187:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   )
1188:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1189:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1190:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Helper macro to define ADC analog watchdog parameter:
1191:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         define a single channel to monitor with analog watchdog
1192:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         from sequencer channel and groups definition.
1193:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDMonitChannels().
1194:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Example:
1195:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDMonitChannels(
1196:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             ADC1, LL_ADC_AWD1,
1197:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_CHANNEL_GROUP(LL_ADC_CHANNEL4, LL_ADC_GROUP_REGULAR))
1198:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1199:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1200:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1201:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1202:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1203:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1204:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1205:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1206:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1207:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1208:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1209:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1210:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1211:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1212:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1213:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1214:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1215:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1216:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1217:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1218:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1219:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
1220:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available only on ADC instance: ADC1.\n
1221:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) For ADC channel read back from ADC register,
1222:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             comparison with internal channel parameter to be done
1223:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1224:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __GROUP__ This parameter can be one of the following values:
1225:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR
1226:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_INJECTED
1227:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR_INJECTED
1228:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1229:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
1230:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG
ARM GAS  /tmp/ccLne6l3.s 			page 23


1231:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ
1232:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
1233:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG 
1234:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ 
1235:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
1236:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG 
1237:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ 
1238:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
1239:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG 
1240:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ 
1241:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
1242:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG 
1243:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ 
1244:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
1245:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG 
1246:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ 
1247:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
1248:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG 
1249:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ 
1250:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
1251:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG 
1252:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ 
1253:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
1254:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG 
1255:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ 
1256:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
1257:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG 
1258:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ 
1259:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
1260:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG 
1261:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ 
1262:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
1263:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG
1264:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ
1265:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
1266:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG
1267:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ
1268:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
1269:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG
1270:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ
1271:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
1272:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG
1273:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ
1274:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
1275:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG
1276:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ
1277:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
1278:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG
1279:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ
1280:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
1281:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG
1282:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ
1283:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
1284:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG
1285:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ
1286:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
1287:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (1)
ARM GAS  /tmp/ccLne6l3.s 			page 24


1288:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (1)
1289:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ      (1)
1290:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG       (1)
1291:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_INJ       (1)
1292:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ   (1)
1293:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
1294:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
1295:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1296:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_CHANNEL_GROUP(__CHANNEL__, __GROUP__)                                    
1297:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   (((__GROUP__) == LL_ADC_GROUP_REGULAR)                                                           
1298:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****     ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CR1_AWDEN | ADC_CR1_AWDSGL)                     
1299:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       :                                                                                            
1300:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       ((__GROUP__) == LL_ADC_GROUP_INJECTED)                                                       
1301:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****        ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAWDEN | ADC_CR1_AWDSGL)                 
1302:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****          :                                                                                         
1303:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****          (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CR1_JAWDEN | ADC_CR1_AWDEN | ADC_CR1_AWDSGL) 
1304:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   )
1305:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1306:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1307:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Helper macro to set the value of ADC analog watchdog threshold high
1308:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
1309:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         different of 12 bits.
1310:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDThresholds().
1311:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to set the value of
1312:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         analog watchdog threshold high (on 8 bits):
1313:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDThresholds
1314:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *            (< ADCx param >,
1315:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(LL_ADC_RESOLUTION_8B, <threshold_value_8
1316:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *            );
1317:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1318:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1319:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __AWD_THRESHOLD__ Value between Min_Data=0x000 and Max_Data=0xFFF
1320:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
1321:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1322:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Note: On this STM32 series, ADC is fixed to resolution 12 bits.            */
1323:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       This macro has been kept anyway for compatibility with other         */
1324:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       STM32 families featuring different ADC resolutions.                  */
1325:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD__) \
1326:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   ((__AWD_THRESHOLD__) << (0U))
1327:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1328:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1329:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Helper macro to get the value of ADC analog watchdog threshold high
1330:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is 
1331:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         different of 12 bits.
1332:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
1333:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to get the value of
1334:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         analog watchdog threshold high (on 8 bits):
1335:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           < threshold_value_6_bits > = __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION
1336:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *            (LL_ADC_RESOLUTION_8B,
1337:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             LL_ADC_GetAnalogWDThresholds(<ADCx param>, LL_ADC_AWD_THRESHOLD_HIGH)
1338:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *            );
1339:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1340:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1341:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_12_BITS__ Value between Min_Data=0x000 and Max_Data=0xFFF
1342:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
1343:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1344:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Note: On this STM32 series, ADC is fixed to resolution 12 bits.            */
ARM GAS  /tmp/ccLne6l3.s 			page 25


1345:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       This macro has been kept anyway for compatibility with other         */
1346:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       STM32 families featuring different ADC resolutions.                  */
1347:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD_12_BITS__) \
1348:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   (__AWD_THRESHOLD_12_BITS__)
1349:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1350:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
1351:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1352:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Helper macro to get the ADC multimode conversion data of ADC master
1353:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         or ADC slave from raw value with both ADC conversion data concatenated.
1354:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   This macro is intended to be used when multimode transfer by DMA
1355:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         is enabled.
1356:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         In this case the transferred data need to processed with this macro
1357:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         to separate the conversion data of ADC master and ADC slave.
1358:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __ADC_MULTI_MASTER_SLAVE__ This parameter can be one of the following values:
1359:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
1360:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
1361:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __ADC_MULTI_CONV_DATA__ Value between Min_Data=0x000 and Max_Data=0xFFF
1362:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
1363:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1364:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE(__ADC_MULTI_MASTER_SLAVE__, __ADC_MULTI_CONV_DATA__) 
1365:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   (((__ADC_MULTI_CONV_DATA__) >> POSITION_VAL((__ADC_MULTI_MASTER_SLAVE__))) & ADC_DR_DATA)
1366:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif
1367:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1368:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1369:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Helper macro to select the ADC common instance
1370:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         to which is belonging the selected ADC instance.
1371:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   ADC common register instance can be used for:
1372:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - Set parameters common to several ADC instances
1373:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - Multimode (for devices with several ADC instances)
1374:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
1375:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On STM32F1, there is no common ADC instance.
1376:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         However, ADC instance ADC1 has a role of common ADC instance
1377:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         for ADC1 and ADC2:
1378:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         this instance is used to manage internal channels
1379:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         and multimode (these features are managed in ADC common
1380:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         instances on some other STM32 devices).
1381:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC instance ADC3 (if available on the selected device)
1382:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         has no ADC common instance.
1383:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
1384:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval ADC common register instance
1385:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1386:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined(ADC1) && defined(ADC2) && defined(ADC3)
1387:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
1388:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   ((((__ADCx__) == ADC1) || ((__ADCx__) == ADC2))                              \
1389:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****     ? (                                                                        \
1390:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****        (ADC12_COMMON)                                                          \
1391:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       )                                                                        \
1392:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       :                                                                        \
1393:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       (                                                                        \
1394:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****        (0U)                                                                    \
1395:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       )                                                                        \
1396:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   )
1397:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #elif defined(ADC1) && defined(ADC2)
1398:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
1399:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   (ADC12_COMMON)
1400:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #else
1401:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
ARM GAS  /tmp/ccLne6l3.s 			page 26


1402:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   (ADC1_COMMON)
1403:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif
1404:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1405:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1406:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Helper macro to check if all ADC instances sharing the same
1407:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC common instance are disabled.
1408:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   This check is required by functions with setting conditioned to
1409:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC state:
1410:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
1411:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
1412:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On devices with only 1 ADC common instance, parameter of this macro
1413:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         is useless and can be ignored (parameter kept for compatibility
1414:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         with devices featuring several ADC common instances).
1415:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On STM32F1, there is no common ADC instance.
1416:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         However, ADC instance ADC1 has a role of common ADC instance
1417:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         for ADC1 and ADC2:
1418:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         this instance is used to manage internal channels
1419:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         and multimode (these features are managed in ADC common
1420:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         instances on some other STM32 devices).
1421:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC instance ADC3 (if available on the selected device)
1422:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         has no ADC common instance.
1423:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __ADCXY_COMMON__ ADC common instance
1424:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1425:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value "0" if all ADC instances sharing the same ADC common instance
1426:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         are disabled.
1427:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Value "1" if at least one ADC instance sharing the same ADC common instance
1428:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         is enabled.
1429:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1430:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined(ADC1) && defined(ADC2) && defined(ADC3)
1431:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
1432:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   (((__ADCXY_COMMON__) == ADC12_COMMON)                                        \
1433:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****     ? (                                                                        \
1434:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC1) |                                               \
1435:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC2)  )                                              \
1436:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       )                                                                        \
1437:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       :                                                                        \
1438:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       (                                                                        \
1439:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****        LL_ADC_IsEnabled(ADC3)                                                  \
1440:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       )                                                                        \
1441:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   )
1442:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #elif defined(ADC1) && defined(ADC2)
1443:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
1444:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   (LL_ADC_IsEnabled(ADC1) |                                                    \
1445:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****    LL_ADC_IsEnabled(ADC2)  )
1446:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #else
1447:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
1448:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   LL_ADC_IsEnabled(ADC1)
1449:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif
1450:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1451:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1452:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
1453:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
1454:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
1455:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
1456:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (refer to reference manual).
1457:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1458:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
ARM GAS  /tmp/ccLne6l3.s 			page 27


1459:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: mVolt)
1460:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1461:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
1462:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   (0xFFFU)
1463:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1464:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1465:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1466:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Helper macro to calculate the voltage (unit: mVolt)
1467:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         corresponding to a ADC conversion data (unit: digital value).
1468:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be known from
1469:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement.
1470:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__ Analog reference voltage (unit: mV)
1471:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __ADC_DATA__ ADC conversion data (resolution 12 bits)
1472:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                       (unit: digital value).
1473:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1474:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1475:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: mVolt)
1476:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1477:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,\
1478:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                       __ADC_DATA__,\
1479:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                       __ADC_RESOLUTION__)                      \
1480:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__)                                   \
1481:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****    / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                                \
1482:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   )
1483:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1484:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1485:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1486:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
1487:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
1488:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Computation is using temperature sensor typical values
1489:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (refer to device datasheet).
1490:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Calculation formula:
1491:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           Temperature = (TS_TYP_CALx_VOLT(uV) - TS_ADC_DATA * Conversion_uV)
1492:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                         / Avg_Slope + CALx_TEMP
1493:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           with TS_ADC_DATA      = temperature sensor raw data measured by ADC
1494:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                                   (unit: digital value)
1495:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                Avg_Slope        = temperature sensor slope
1496:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                                   (unit: uV/Degree Celsius)
1497:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                TS_TYP_CALx_VOLT = temperature sensor digital value at
1498:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                                   temperature CALx_TEMP (unit: mV)
1499:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve the temperature sensor
1500:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                  of the current device has characteristics in line with
1501:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                  datasheet typical values.
1502:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                  If temperature sensor calibration values are available on
1503:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                  on this device (presence of macro __LL_ADC_CALC_TEMPERATURE()),
1504:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                  temperature calculation will be more accurate using
1505:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                  helper macro @ref __LL_ADC_CALC_TEMPERATURE().
1506:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
1507:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
1508:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be known from
1509:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement.
1510:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   ADC measurement data must correspond to a resolution of 12bits
1511:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (full scale digital value 4095). If not the case, the data must be
1512:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         preliminarily rescaled to an equivalent resolution of 12 bits.
1513:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_AVGSLOPE__   Device datasheet data: Temperature sensor slope typical v
1514:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                                       On STM32F1, refer to device datasheet parameter "Avg_Slop
1515:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_CALX_V__     Device datasheet data: Temperature sensor voltage typical
ARM GAS  /tmp/ccLne6l3.s 			page 28


1516:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                                       On STM32F1, refer to device datasheet parameter "V25".
1517:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __TEMPSENSOR_CALX_TEMP__      Device datasheet data: Temperature at which temperature s
1518:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__        Analog voltage reference (Vref+) voltage (unit: mV)
1519:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__       ADC conversion data of internal temperature sensor (unit:
1520:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__            ADC resolution at which internal temperature sensor volta
1521:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         This parameter can be one of the following values:
1522:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1523:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
1524:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1525:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(__TEMPSENSOR_TYP_AVGSLOPE__,\
1526:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              __TEMPSENSOR_TYP_CALX_V__,\
1527:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              __TEMPSENSOR_CALX_TEMP__,\
1528:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              __VREFANALOG_VOLTAGE__,\
1529:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              __TEMPSENSOR_ADC_DATA__,\
1530:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                                              __ADC_RESOLUTION__)               \
1531:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   ((( (                                                                        \
1532:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****        (int32_t)(((__TEMPSENSOR_TYP_CALX_V__))                                 \
1533:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                  * 1000)                                                       \
1534:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****        -                                                                       \
1535:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****        (int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__))       \
1536:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                   / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__))                \
1537:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                  * 1000)                                                       \
1538:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****       )                                                                        \
1539:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****     ) / (__TEMPSENSOR_TYP_AVGSLOPE__)                                          \
1540:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****    ) + (__TEMPSENSOR_CALX_TEMP__)                                              \
1541:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   )
1542:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1543:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1544:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
1545:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1546:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1547:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1548:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
1549:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1550:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1551:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1552:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Exported functions --------------------------------------------------------*/
1553:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Functions ADC Exported Functions
1554:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
1555:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1556:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1557:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EF_DMA_Management ADC DMA management
1558:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
1559:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1560:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Note: LL ADC functions to set DMA transfer are located into sections of    */
1561:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       configuration of ADC instance, groups and multimode (if available):  */
1562:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       @ref LL_ADC_REG_SetDMATransfer(), ...                                */
1563:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1564:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1565:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Function to help to configure DMA transfer from ADC: retrieve the
1566:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC register address from ADC instance and a list of ADC registers
1567:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         intended to be used (most commonly) with DMA transfer.
1568:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   These ADC registers are data registers:
1569:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         when ADC conversion data is available in ADC data registers,
1570:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC generates a DMA transfer request.
1571:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   This macro is intended to be used with LL DMA driver, refer to
1572:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         function "LL_DMA_ConfigAddresses()".
ARM GAS  /tmp/ccLne6l3.s 			page 29


1573:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Example:
1574:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           LL_DMA_ConfigAddresses(DMA1,
1575:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                                  LL_DMA_CHANNEL_1,
1576:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                                  LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
1577:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                                  (uint32_t)&< array or variable >,
1578:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                                  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
1579:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   For devices with several ADC: in multimode, some devices
1580:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         use a different data register outside of ADC instance scope
1581:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (common data register). This macro manages this register difference,
1582:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         only ADC instance has to be set as parameter.
1583:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On STM32F1, only ADC instances ADC1 and ADC3 have DMA transfer
1584:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         capability, not ADC2 (ADC2 and ADC3 instances not available on
1585:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         all devices).
1586:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On STM32F1, multimode can be used only with ADC1 and ADC2, not ADC3.
1587:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Therefore, the corresponding parameter of data transfer
1588:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         for multimode can be used only with ADC1 and ADC2.
1589:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (ADC2 and ADC3 instances not available on all devices).
1590:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_DMA_GetRegAddr
1591:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
1592:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Register This parameter can be one of the following values:
1593:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
1594:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA_MULTI (1)
1595:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
1596:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) Available on devices with several ADC instances.
1597:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval ADC register address
1598:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1599:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
1600:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
1601:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
1602:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t data_reg_addr = 0U;
1603:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
1604:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
1605:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   {
1606:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****     /* Retrieve address of register DR */
1607:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****     data_reg_addr = (uint32_t)&(ADCx->DR);
1608:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   }
1609:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
1610:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   {
1611:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****     /* Retrieve address of register of multimode data */
1612:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****     data_reg_addr = (uint32_t)&(ADC12_COMMON->DR);
1613:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   }
1614:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
1615:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return data_reg_addr;
1616:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
1617:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #else
1618:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
1619:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
1620:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* Retrieve address of register DR */
1621:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)&(ADCx->DR);
1622:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
1623:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif
1624:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1625:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1626:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
1627:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1628:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1629:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Common Configuration of ADC hierarchical scope: common to
ARM GAS  /tmp/ccLne6l3.s 			page 30


1630:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
1631:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1632:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1633:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1634:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to internal
1635:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
1636:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   One or several values can be selected.
1637:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
1638:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
1639:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
1640:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
1641:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         a delay is required for internal voltage reference and
1642:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         temperature sensor stabilization time.
1643:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to device datasheet.
1644:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US.
1645:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
1646:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         For ADC conversion of internal channels,
1647:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         a sampling time minimum value is required.
1648:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to device datasheet.
1649:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      TSVREFE        LL_ADC_SetCommonPathInternalCh
1650:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1651:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1652:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
1653:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
1654:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
1655:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
1656:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
1657:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1658:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Path
1659:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
1660:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
1661:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
1662:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1663:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1664:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: measurement path to internal
1665:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
1666:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   One or several values can be selected.
1667:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
1668:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
1669:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      TSVREFE        LL_ADC_GetCommonPathInternalCh
1670:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1671:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1672:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
1673:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
1674:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
1675:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
1676:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1677:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
1678:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
1679:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CR2, ADC_CR2_TSVREFE));
1680:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
1681:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1682:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1683:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
1684:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1685:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1686:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Instance Configuration of ADC hierarchical scope: ADC ins
ARM GAS  /tmp/ccLne6l3.s 			page 31


1687:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
1688:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1689:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1690:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1691:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC conversion data alignment.
1692:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Refer to reference manual for alignments formats
1693:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         dependencies to ADC resolutions.
1694:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      ALIGN          LL_ADC_SetDataAlignment
1695:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
1696:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  DataAlignment This parameter can be one of the following values:
1697:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
1698:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
1699:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
1700:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1701:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetDataAlignment(ADC_TypeDef *ADCx, uint32_t DataAlignment)
1702:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
1703:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCx->CR2, ADC_CR2_ALIGN, DataAlignment);
1704:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
1705:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1706:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1707:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC conversion data alignment.
1708:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Refer to reference manual for alignments formats
1709:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         dependencies to ADC resolutions.
1710:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      ALIGN          LL_ADC_SetDataAlignment
1711:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
1712:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1713:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
1714:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
1715:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1716:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetDataAlignment(ADC_TypeDef *ADCx)
1717:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
1718:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CR2, ADC_CR2_ALIGN));
1719:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
1720:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1721:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1722:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC sequencers scan mode, for all ADC groups
1723:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (group regular, group injected).
1724:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note  According to sequencers scan mode :
1725:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - If disabled: ADC conversion is performed in unitary conversion
1726:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           mode (one channel converted, that defined in rank 1).
1727:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           Configuration of sequencers of all ADC groups
1728:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           (sequencer scan length, ...) is discarded: equivalent to
1729:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           scan length of 1 rank.
1730:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - If enabled: ADC conversions are performed in sequence conversions
1731:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           mode, according to configuration of sequencers of
1732:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           each ADC group (sequencer scan length, ...).
1733:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           Refer to function @ref LL_ADC_REG_SetSequencerLength()
1734:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           and to function @ref LL_ADC_INJ_SetSequencerLength().
1735:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR1      SCAN           LL_ADC_SetSequencersScanMode
1736:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
1737:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ScanMode This parameter can be one of the following values:
1738:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SEQ_SCAN_DISABLE
1739:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SEQ_SCAN_ENABLE
1740:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
1741:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1742:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetSequencersScanMode(ADC_TypeDef *ADCx, uint32_t ScanMode)
1743:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
ARM GAS  /tmp/ccLne6l3.s 			page 32


1744:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCx->CR1, ADC_CR1_SCAN, ScanMode);
1745:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
1746:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1747:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1748:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC sequencers scan mode, for all ADC groups
1749:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (group regular, group injected).
1750:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note  According to sequencers scan mode :
1751:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - If disabled: ADC conversion is performed in unitary conversion
1752:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           mode (one channel converted, that defined in rank 1).
1753:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           Configuration of sequencers of all ADC groups
1754:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           (sequencer scan length, ...) is discarded: equivalent to
1755:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           scan length of 1 rank.
1756:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - If enabled: ADC conversions are performed in sequence conversions
1757:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           mode, according to configuration of sequencers of
1758:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           each ADC group (sequencer scan length, ...).
1759:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           Refer to function @ref LL_ADC_REG_SetSequencerLength()
1760:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           and to function @ref LL_ADC_INJ_SetSequencerLength().
1761:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR1      SCAN           LL_ADC_GetSequencersScanMode
1762:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
1763:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1764:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SEQ_SCAN_DISABLE
1765:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SEQ_SCAN_ENABLE
1766:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1767:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetSequencersScanMode(ADC_TypeDef *ADCx)
1768:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
1769:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CR1, ADC_CR1_SCAN));
1770:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
1771:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1772:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1773:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
1774:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1775:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1776:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Regular Configuration of ADC hierarchical scope: gr
1777:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
1778:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1779:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1780:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1781:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger source:
1782:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         internal (SW start) or from external IP (timer event,
1783:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         external interrupt line).
1784:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, external trigger is set with trigger polarity:
1785:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         rising edge (only trigger polarity available on this STM32 series).
1786:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer 
1787:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         depends on timers availability on the selected device.
1788:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      EXTSEL         LL_ADC_REG_SetTriggerSource
1789:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
1790:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
1791:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
1792:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3       (1)
1793:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1       (2)
1794:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2       (2)
1795:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2       (2)
1796:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO      (2)
1797:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4       (2)
1798:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11    (2)
1799:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO      (2)(4)
1800:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO_ADC3 (3)
ARM GAS  /tmp/ccLne6l3.s 			page 33


1801:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH1       (3)
1802:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH3       (3)
1803:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_CH1       (3)
1804:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO      (3)
1805:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM5_CH1       (3)
1806:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM5_CH3       (3)
1807:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
1808:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available on all ADC instances: ADC1, ADC2, ADC3 (for ADC ins
1809:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (2) On STM32F1, parameter available only on ADC instances: ADC1, ADC2 (for ADC instance
1810:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (3) On STM32F1, parameter available only on ADC instances: ADC3 (for ADC instances ADCx
1811:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (4) On STM32F1, parameter available only on high-density and XL-density devices. A rema
1812:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
1813:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1814:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
1815:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
1816:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Note: On this STM32 series, ADC group regular external trigger edge        */
1817:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       is used to perform a ADC conversion start.                           */
1818:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       This function does not set external trigger edge.                    */
1819:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       This feature is set using function                                   */
1820:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       @ref LL_ADC_REG_StartConversionExtTrig().                            */
1821:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCx->CR2, ADC_CR2_EXTSEL, (TriggerSource & ADC_CR2_EXTSEL));
1822:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
1823:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1824:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1825:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source:
1826:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         internal (SW start) or from external IP (timer event,
1827:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         external interrupt line).
1828:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   To determine whether group regular trigger source is
1829:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         internal (SW start) or external, without detail
1830:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
1831:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (equivalent to 
1832:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         "if(LL_ADC_REG_GetTriggerSource(ADC1) == LL_ADC_REG_TRIG_SOFTWARE)")
1833:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_IsTriggerSourceSWStart.
1834:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer 
1835:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         depends on timers availability on the selected device.
1836:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      EXTSEL         LL_ADC_REG_GetTriggerSource
1837:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
1838:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1839:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
1840:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3       (1)
1841:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1       (2)
1842:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2       (2)
1843:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2       (2)
1844:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO      (2)
1845:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4       (2)
1846:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11    (2)
1847:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO      (2)(4)
1848:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO_ADC3 (3)
1849:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH1       (3)
1850:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH3       (3)
1851:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_CH1       (3)
1852:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO      (3)
1853:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM5_CH1       (3)
1854:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM5_CH3       (3)
1855:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
1856:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available on all ADC instances: ADC1, ADC2, ADC3 (for ADC ins
1857:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (2) On STM32F1, parameter available only on ADC instances: ADC1, ADC2 (for ADC instance
ARM GAS  /tmp/ccLne6l3.s 			page 34


1858:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (3) On STM32F1, parameter available only on ADC instances: ADC3 (for ADC instances ADCx
1859:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (4) On STM32F1, parameter available only on high-density and XL-density devices. A rema
1860:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1861:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
1862:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
1863:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CR2, ADC_CR2_EXTSEL));
1864:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
1865:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1866:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1867:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source internal (SW start)
1868:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****             or external.
1869:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   In case of group regular trigger source set to external trigger,
1870:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
1871:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_GetTriggerSource().
1872:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      EXTSEL         LL_ADC_REG_IsTriggerSourceSWStart
1873:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
1874:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
1875:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
1876:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1877:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
1878:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
1879:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (READ_BIT(ADCx->CR2, ADC_CR2_EXTSEL) == (LL_ADC_REG_TRIG_SOFTWARE));
1880:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
1881:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1882:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1883:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1884:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer length and scan direction.
1885:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
1886:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
1887:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
1888:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
1889:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           are configurable.
1890:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           This function performs configuration of:
1891:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
1892:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
1893:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
1894:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           Sequencer ranks are selected using
1895:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
1896:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
1897:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
1898:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
1899:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           are defined by channel number.
1900:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           This function performs configuration of:
1901:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
1902:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
1903:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
1904:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
1905:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
1906:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
1907:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             highest channel number).
1908:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           Sequencer ranks are selected using
1909:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
1910:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, group regular sequencer configuration
1911:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         is conditioned to ADC instance sequencer mode.
1912:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         If ADC instance sequencer mode is disabled, sequencers of
1913:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         all groups (group regular, group injected) can be configured
1914:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         but their execution is disabled (limited to rank 1).
ARM GAS  /tmp/ccLne6l3.s 			page 35


1915:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to function @ref LL_ADC_SetSequencersScanMode().
1916:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
1917:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
1918:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_SetSequencerLength
1919:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
1920:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
1921:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
1922:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
1923:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
1924:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
1925:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
1926:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
1927:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
1928:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
1929:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
1930:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
1931:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
1932:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
1933:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
1934:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
1935:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
1936:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
1937:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
1938:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1939:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
1940:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
1941:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
1942:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
1943:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
1944:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
1945:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer length and scan direction.
1946:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
1947:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
1948:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
1949:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
1950:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           are configurable.
1951:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           This function retrieves:
1952:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
1953:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
1954:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
1955:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           Sequencer ranks are selected using
1956:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
1957:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
1958:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
1959:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
1960:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           are defined by channel number.
1961:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           This function retrieves:
1962:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
1963:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
1964:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
1965:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
1966:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
1967:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
1968:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             highest channel number).
1969:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           Sequencer ranks are selected using
1970:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
1971:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, group regular sequencer configuration
ARM GAS  /tmp/ccLne6l3.s 			page 36


1972:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         is conditioned to ADC instance sequencer mode.
1973:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         If ADC instance sequencer mode is disabled, sequencers of
1974:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         all groups (group regular, group injected) can be configured
1975:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         but their execution is disabled (limited to rank 1).
1976:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to function @ref LL_ADC_SetSequencersScanMode().
1977:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
1978:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
1979:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_SetSequencerLength
1980:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
1981:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1982:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
1983:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
1984:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
1985:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
1986:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
1987:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
1988:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
1989:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
1990:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
1991:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
1992:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
1993:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
1994:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
1995:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
1996:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
1997:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
1998:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
1999:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerLength(ADC_TypeDef *ADCx)
2000:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2001:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->SQR1, ADC_SQR1_L));
2002:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2003:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2004:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2005:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer discontinuous mode:
2006:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
2007:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         number of ranks.
2008:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular 
2009:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
2010:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   It is not possible to enable both ADC auto-injected mode
2011:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         and ADC group regular sequencer discontinuous mode.
2012:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR1      DISCEN         LL_ADC_REG_SetSequencerDiscont\n
2013:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         CR1      DISCNUM        LL_ADC_REG_SetSequencerDiscont
2014:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2015:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
2016:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
2017:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
2018:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
2019:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
2020:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
2021:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
2022:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
2023:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
2024:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
2025:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
2026:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2027:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
2028:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
ARM GAS  /tmp/ccLne6l3.s 			page 37


2029:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCx->CR1, ADC_CR1_DISCEN | ADC_CR1_DISCNUM, SeqDiscont);
2030:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2031:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2032:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2033:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer discontinuous mode:
2034:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
2035:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         number of ranks.
2036:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR1      DISCEN         LL_ADC_REG_GetSequencerDiscont\n
2037:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         CR1      DISCNUM        LL_ADC_REG_GetSequencerDiscont
2038:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2039:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2040:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
2041:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
2042:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
2043:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
2044:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
2045:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
2046:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
2047:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
2048:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
2049:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2050:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
2051:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2052:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CR1, ADC_CR1_DISCEN | ADC_CR1_DISCNUM));
2053:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2054:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2055:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2056:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC group regular sequence: channel on the selected
2057:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         scan sequence rank.
2058:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   This function performs configuration of:
2059:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
2060:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           whatever channel can be placed into whatever rank.
2061:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer is
2062:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
2063:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         affectation to a channel are configurable.
2064:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
2065:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
2066:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2067:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
2068:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
2069:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         enabled separately.
2070:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
2071:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll SQR3     SQ1            LL_ADC_REG_SetSequencerRanks\n
2072:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR3     SQ2            LL_ADC_REG_SetSequencerRanks\n
2073:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR3     SQ3            LL_ADC_REG_SetSequencerRanks\n
2074:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR3     SQ4            LL_ADC_REG_SetSequencerRanks\n
2075:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR3     SQ5            LL_ADC_REG_SetSequencerRanks\n
2076:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR3     SQ6            LL_ADC_REG_SetSequencerRanks\n
2077:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_SetSequencerRanks\n
2078:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_SetSequencerRanks\n
2079:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_SetSequencerRanks\n
2080:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR2     SQ10           LL_ADC_REG_SetSequencerRanks\n
2081:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR2     SQ11           LL_ADC_REG_SetSequencerRanks\n
2082:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR2     SQ12           LL_ADC_REG_SetSequencerRanks\n
2083:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR1     SQ13           LL_ADC_REG_SetSequencerRanks\n
2084:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR1     SQ14           LL_ADC_REG_SetSequencerRanks\n
2085:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR1     SQ15           LL_ADC_REG_SetSequencerRanks\n
ARM GAS  /tmp/ccLne6l3.s 			page 38


2086:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR1     SQ16           LL_ADC_REG_SetSequencerRanks
2087:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2088:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
2089:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
2090:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
2091:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
2092:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
2093:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
2094:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
2095:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
2096:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
2097:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
2098:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
2099:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
2100:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
2101:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
2102:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
2103:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
2104:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
2105:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
2106:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2107:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2108:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2109:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2110:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2111:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2112:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2113:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2114:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2115:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2116:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2117:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2118:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2119:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2120:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2121:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
2122:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
2123:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
2124:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
2125:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
2126:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
2127:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
2128:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
2129:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2130:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
2131:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
  26              		.loc 1 2131 1
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 89B0     		sub	sp, sp, #36
  36              	.LCFI1:
ARM GAS  /tmp/ccLne6l3.s 			page 39


  37              		.cfi_def_cfa_offset 40
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 F860     		str	r0, [r7, #12]
  42 0008 B960     		str	r1, [r7, #8]
  43 000a 7A60     		str	r2, [r7, #4]
2132:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
2133:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* in register and register position depending on parameter "Rank".         */
2134:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
2135:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
2136:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFF
  44              		.loc 1 2136 25
  45 000c FB68     		ldr	r3, [r7, #12]
  46 000e 2C33     		adds	r3, r3, #44
  47 0010 1946     		mov	r1, r3
  48 0012 BB68     		ldr	r3, [r7, #8]
  49 0014 03F44073 		and	r3, r3, #768
  50 0018 4FF44072 		mov	r2, #768
  51 001c BA61     		str	r2, [r7, #24]
  52              	.LBB12:
  53              	.LBB13:
  54              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
ARM GAS  /tmp/ccLne6l3.s 			page 40


  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/ccLne6l3.s 			page 41


  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
ARM GAS  /tmp/ccLne6l3.s 			page 42


 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
ARM GAS  /tmp/ccLne6l3.s 			page 43


 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
ARM GAS  /tmp/ccLne6l3.s 			page 44


 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 45


 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 46


 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
ARM GAS  /tmp/ccLne6l3.s 			page 47


 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccLne6l3.s 			page 48


 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccLne6l3.s 			page 49


 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 50


 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
ARM GAS  /tmp/ccLne6l3.s 			page 51


 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
ARM GAS  /tmp/ccLne6l3.s 			page 52


 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccLne6l3.s 			page 53


 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccLne6l3.s 			page 54


 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccLne6l3.s 			page 55


 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 56


 947:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 982:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 984:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  55              		.loc 2 988 4
  56 001e BA69     		ldr	r2, [r7, #24]
  57              		.syntax unified
  58              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  59 0020 92FAA2F2 		rbit r2, r2
  60              	@ 0 "" 2
  61              		.thumb
  62              		.syntax unified
  63 0024 7A61     		str	r2, [r7, #20]
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
ARM GAS  /tmp/ccLne6l3.s 			page 57


 995:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
  64              		.loc 2 1001 10
  65 0026 7A69     		ldr	r2, [r7, #20]
  66              	.LBE13:
  67              	.LBE12:
  68              		.loc 1 2136 25
  69 0028 B2FA82F2 		clz	r2, r2
  70 002c D2B2     		uxtb	r2, r2
  71 002e D340     		lsrs	r3, r3, r2
  72 0030 9B00     		lsls	r3, r3, #2
  73 0032 0B44     		add	r3, r3, r1
  74              		.loc 1 2136 18
  75 0034 FB61     		str	r3, [r7, #28]
2137:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
2138:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(*preg,
  76              		.loc 1 2138 3
  77 0036 FB69     		ldr	r3, [r7, #28]
  78 0038 1A68     		ldr	r2, [r3]
  79 003a BB68     		ldr	r3, [r7, #8]
  80 003c 03F01F03 		and	r3, r3, #31
  81 0040 1F21     		movs	r1, #31
  82 0042 01FA03F3 		lsl	r3, r1, r3
  83 0046 DB43     		mvns	r3, r3
  84 0048 1A40     		ands	r2, r2, r3
  85 004a 7B68     		ldr	r3, [r7, #4]
  86 004c 03F01F01 		and	r1, r3, #31
  87 0050 BB68     		ldr	r3, [r7, #8]
  88 0052 03F01F03 		and	r3, r3, #31
  89 0056 01FA03F3 		lsl	r3, r1, r3
  90 005a 1A43     		orrs	r2, r2, r3
  91 005c FB69     		ldr	r3, [r7, #28]
  92 005e 1A60     		str	r2, [r3]
2139:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
2140:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****              (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
2141:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
  93              		.loc 1 2141 1
  94 0060 00BF     		nop
  95 0062 2437     		adds	r7, r7, #36
  96              	.LCFI3:
  97              		.cfi_def_cfa_offset 4
  98 0064 BD46     		mov	sp, r7
  99              	.LCFI4:
 100              		.cfi_def_cfa_register 13
 101              		@ sp needed
 102 0066 80BC     		pop	{r7}
 103              	.LCFI5:
 104              		.cfi_restore 7
 105              		.cfi_def_cfa_offset 0
 106 0068 7047     		bx	lr
 107              		.cfi_endproc
 108              	.LFE79:
ARM GAS  /tmp/ccLne6l3.s 			page 58


 110              		.section	.text.LL_ADC_SetChannelSamplingTime,"ax",%progbits
 111              		.align	1
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 116              	LL_ADC_SetChannelSamplingTime:
 117              	.LFB98:
2142:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2143:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2144:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group regular sequence: channel on the selected
2145:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         scan sequence rank.
2146:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer is
2147:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
2148:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         affectation to a channel are configurable.
2149:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
2150:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
2151:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2152:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Usage of the returned channel number:
2153:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
2154:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
2155:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
2156:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
2157:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
2158:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
2159:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           as parameter for another function.
2160:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - To get the channel number in decimal format:
2161:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           process the returned value with the helper macro
2162:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
2163:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll SQR3     SQ1            LL_ADC_REG_GetSequencerRanks\n
2164:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR3     SQ2            LL_ADC_REG_GetSequencerRanks\n
2165:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR3     SQ3            LL_ADC_REG_GetSequencerRanks\n
2166:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR3     SQ4            LL_ADC_REG_GetSequencerRanks\n
2167:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR3     SQ5            LL_ADC_REG_GetSequencerRanks\n
2168:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR3     SQ6            LL_ADC_REG_GetSequencerRanks\n
2169:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_GetSequencerRanks\n
2170:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_GetSequencerRanks\n
2171:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_GetSequencerRanks\n
2172:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR2     SQ10           LL_ADC_REG_GetSequencerRanks\n
2173:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR2     SQ11           LL_ADC_REG_GetSequencerRanks\n
2174:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR2     SQ12           LL_ADC_REG_GetSequencerRanks\n
2175:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR1     SQ13           LL_ADC_REG_GetSequencerRanks\n
2176:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR1     SQ14           LL_ADC_REG_GetSequencerRanks\n
2177:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR1     SQ15           LL_ADC_REG_GetSequencerRanks\n
2178:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SQR1     SQ16           LL_ADC_REG_GetSequencerRanks
2179:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2180:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
2181:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
2182:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
2183:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
2184:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
2185:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
2186:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
2187:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
2188:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
2189:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
2190:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
2191:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
ARM GAS  /tmp/ccLne6l3.s 			page 59


2192:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
2193:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
2194:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
2195:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
2196:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
2197:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2198:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2199:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2200:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2201:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2202:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2203:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2204:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2205:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2206:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2207:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2208:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2209:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2210:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2211:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2212:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2213:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
2214:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
2215:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
2216:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
2217:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
2218:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
2219:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available only on ADC instance: ADC1.\n
2220:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) For ADC channel read back from ADC register,
2221:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             comparison with internal channel parameter to be done
2222:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
2223:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2224:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
2225:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2226:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFF
2227:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
2228:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t) (READ_BIT(*preg,
2229:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                               ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK))
2230:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                      >> (Rank & ADC_REG_RANK_ID_SQRX_MASK)
2231:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                     );
2232:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2233:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2234:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2235:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC continuous conversion mode on ADC group regular.
2236:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
2237:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - single mode: one conversion per trigger
2238:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
2239:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           conversions launched successively automatically.
2240:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular 
2241:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
2242:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      CONT           LL_ADC_REG_SetContinuousMode
2243:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2244:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Continuous This parameter can be one of the following values:
2245:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
2246:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
2247:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
2248:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
ARM GAS  /tmp/ccLne6l3.s 			page 60


2249:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
2250:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2251:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCx->CR2, ADC_CR2_CONT, Continuous);
2252:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2253:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2254:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2255:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC continuous conversion mode on ADC group regular.
2256:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
2257:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - single mode: one conversion per trigger
2258:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
2259:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           conversions launched successively automatically.
2260:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      CONT           LL_ADC_REG_GetContinuousMode
2261:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2262:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2263:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
2264:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
2265:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2266:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
2267:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2268:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CR2, ADC_CR2_CONT));
2269:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2270:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2271:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2272:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC group regular conversion data transfer: no transfer or
2273:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
2274:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
2275:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         mode:
2276:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
2277:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           when number of DMA data transfers (number of
2278:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           ADC conversions) is reached.
2279:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
2280:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
2281:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
2282:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           ADC conversions).
2283:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
2284:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
2285:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         mode non-circular:
2286:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
2287:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
2288:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *        (overrun flag and interruption if enabled).
2289:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
2290:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
2291:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      DMA            LL_ADC_REG_SetDMATransfer
2292:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2293:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  DMATransfer This parameter can be one of the following values:
2294:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
2295:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
2296:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
2297:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2298:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
2299:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2300:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
2301:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2302:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2303:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2304:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data transfer: no transfer or
2305:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
ARM GAS  /tmp/ccLne6l3.s 			page 61


2306:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
2307:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         mode:
2308:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
2309:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           when number of DMA data transfers (number of
2310:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           ADC conversions) is reached.
2311:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
2312:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
2313:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
2314:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           ADC conversions).
2315:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
2316:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
2317:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         mode non-circular:
2318:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
2319:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
2320:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
2321:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
2322:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
2323:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      DMA            LL_ADC_REG_GetDMATransfer
2324:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2325:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2326:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
2327:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
2328:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2329:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
2330:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2331:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CR2, ADC_CR2_DMA));
2332:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2333:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2334:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2335:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
2336:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2337:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2338:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Injected Configuration of ADC hierarchical scope: g
2339:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
2340:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2341:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2342:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2343:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger source:
2344:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         internal (SW start) or from external IP (timer event,
2345:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         external interrupt line).
2346:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, external trigger is set with trigger polarity:
2347:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         rising edge (only trigger polarity available on this STM32 series).
2348:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer 
2349:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         depends on timers availability on the selected device.
2350:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      JEXTSEL        LL_ADC_INJ_SetTriggerSource
2351:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2352:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
2353:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
2354:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO     (1)
2355:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4      (1)
2356:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO     (2)
2357:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1      (2)
2358:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4      (2)
2359:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO     (2)
2360:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15   (2)
2361:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4      (2)(4)
2362:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4_ADC3 (3)
ARM GAS  /tmp/ccLne6l3.s 			page 62


2363:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH3      (3)
2364:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH2      (3)
2365:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4      (3)
2366:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM5_TRGO     (3)
2367:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM5_CH4      (3)
2368:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
2369:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available on all ADC instances: ADC1, ADC2, ADC3 (for ADC ins
2370:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (2) On STM32F1, parameter available only on ADC instances: ADC1, ADC2 (for ADC instance
2371:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (3) On STM32F1, parameter available only on ADC instances: ADC3 (for ADC instances ADCx
2372:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (4) On STM32F1, parameter available only on high-density and XL-density devices. A rema
2373:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
2374:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2375:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
2376:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2377:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /* Note: On this STM32 series, ADC group injected external trigger edge       */
2378:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       is used to perform a ADC conversion start.                           */
2379:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       This function does not set external trigger edge.                    */
2380:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       This feature is set using function                                   */
2381:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /*       @ref LL_ADC_INJ_StartConversionExtTrig().                            */
2382:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
2383:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2384:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2385:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2386:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source:
2387:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         internal (SW start) or from external IP (timer event,
2388:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         external interrupt line).
2389:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   To determine whether group injected trigger source is
2390:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         internal (SW start) or external, without detail
2391:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
2392:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (equivalent to 
2393:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         "if(LL_ADC_INJ_GetTriggerSource(ADC1) == LL_ADC_INJ_TRIG_SOFTWARE)")
2394:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_IsTriggerSourceSWStart.
2395:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer 
2396:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         depends on timers availability on the selected device.
2397:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      JEXTSEL        LL_ADC_INJ_GetTriggerSource
2398:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2399:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2400:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
2401:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO     (1)
2402:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4      (1)
2403:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO     (2)
2404:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1      (2)
2405:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4      (2)
2406:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO     (2)
2407:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15   (2)
2408:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4      (2)(4)
2409:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4_ADC3 (3)
2410:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH3      (3)
2411:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH2      (3)
2412:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4      (3)
2413:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM5_TRGO     (3)
2414:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM5_CH4      (3)
2415:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
2416:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available on all ADC instances: ADC1, ADC2, ADC3 (for ADC ins
2417:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (2) On STM32F1, parameter available only on ADC instances: ADC1, ADC2 (for ADC instance
2418:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (3) On STM32F1, parameter available only on ADC instances: ADC3 (for ADC instances ADCx
2419:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (4) On STM32F1, parameter available only on high-density and XL-density devices. A rema
ARM GAS  /tmp/ccLne6l3.s 			page 63


2420:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2421:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerSource(ADC_TypeDef *ADCx)
2422:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2423:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CR2, ADC_CR2_JEXTSEL));
2424:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2425:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2426:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2427:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source internal (SW start)
2428:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****             or external
2429:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   In case of group injected trigger source set to external trigger,
2430:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
2431:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_GetTriggerSource.
2432:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      JEXTSEL        LL_ADC_INJ_IsTriggerSourceSWStart
2433:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2434:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
2435:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
2436:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2437:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
2438:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2439:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (READ_BIT(ADCx->CR2, ADC_CR2_JEXTSEL) == LL_ADC_INJ_TRIG_SOFTWARE);
2440:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2441:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2442:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2443:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer length and scan direction.
2444:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   This function performs configuration of:
2445:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
2446:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
2447:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
2448:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, group injected sequencer configuration
2449:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         is conditioned to ADC instance sequencer mode.
2450:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         If ADC instance sequencer mode is disabled, sequencers of
2451:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         all groups (group regular, group injected) can be configured
2452:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         but their execution is disabled (limited to rank 1).
2453:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to function @ref LL_ADC_SetSequencersScanMode().
2454:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
2455:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
2456:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_SetSequencerLength
2457:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2458:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
2459:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
2460:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
2461:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
2462:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
2463:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
2464:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2465:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
2466:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2467:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
2468:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2469:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2470:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2471:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer length and scan direction.
2472:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   This function retrieves:
2473:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
2474:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
2475:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
2476:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, group injected sequencer configuration
ARM GAS  /tmp/ccLne6l3.s 			page 64


2477:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         is conditioned to ADC instance sequencer mode.
2478:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         If ADC instance sequencer mode is disabled, sequencers of
2479:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         all groups (group regular, group injected) can be configured
2480:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         but their execution is disabled (limited to rank 1).
2481:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to function @ref LL_ADC_SetSequencersScanMode().
2482:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
2483:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
2484:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_GetSequencerLength
2485:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2486:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2487:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
2488:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
2489:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
2490:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
2491:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2492:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerLength(ADC_TypeDef *ADCx)
2493:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2494:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JL));
2495:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2496:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2497:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2498:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer discontinuous mode:
2499:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
2500:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         number of ranks.
2501:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
2502:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
2503:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR1      DISCEN         LL_ADC_INJ_SetSequencerDiscont
2504:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2505:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
2506:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
2507:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
2508:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
2509:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2510:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
2511:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2512:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
2513:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2514:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2515:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2516:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer discontinuous mode:
2517:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
2518:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         number of ranks.
2519:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR1      DISCEN         LL_ADC_REG_GetSequencerDiscont
2520:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2521:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2522:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
2523:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
2524:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2525:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerDiscont(ADC_TypeDef *ADCx)
2526:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2527:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CR1, ADC_CR1_JDISCEN));
2528:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2529:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2530:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2531:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC group injected sequence: channel on the selected
2532:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         sequence rank.
2533:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
ARM GAS  /tmp/ccLne6l3.s 			page 65


2534:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2535:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
2536:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
2537:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         enabled separately.
2538:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
2539:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_SetSequencerRanks\n
2540:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_SetSequencerRanks\n
2541:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_SetSequencerRanks\n
2542:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_SetSequencerRanks
2543:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2544:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
2545:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
2546:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
2547:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
2548:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
2549:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
2550:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2551:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2552:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2553:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2554:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2555:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2556:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2557:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2558:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2559:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2560:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2561:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2562:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2563:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2564:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2565:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
2566:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
2567:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
2568:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
2569:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
2570:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
2571:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
2572:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
2573:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2574:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
2575:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2576:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
2577:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* in register depending on parameter "Rank".                               */
2578:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
2579:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
2580:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos) + 1U;
2581:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
2582:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
2583:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK << (5U * (uint8_t)(((Rank) + 3U) - (tmpreg1))),
2584:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****              (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (5U * (uint8_t)(((Rank) + 3U) - (tmpreg1))))
2585:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2586:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2587:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2588:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group injected sequence: channel on the selected
2589:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         sequence rank.
2590:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
ARM GAS  /tmp/ccLne6l3.s 			page 66


2591:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2592:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Usage of the returned channel number:
2593:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
2594:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
2595:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
2596:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
2597:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
2598:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
2599:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           as parameter for another function.
2600:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - To get the channel number in decimal format:
2601:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           process the returned value with the helper macro
2602:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
2603:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_SetSequencerRanks\n
2604:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_SetSequencerRanks\n
2605:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_SetSequencerRanks\n
2606:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_SetSequencerRanks
2607:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2608:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
2609:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
2610:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
2611:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
2612:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
2613:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2614:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2615:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2616:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2617:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2618:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2619:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2620:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2621:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2622:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2623:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2624:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2625:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2626:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2627:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2628:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2629:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
2630:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
2631:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
2632:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
2633:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
2634:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
2635:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available only on ADC instance: ADC1.\n
2636:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) For ADC channel read back from ADC register,
2637:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             comparison with internal channel parameter to be done
2638:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
2639:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2640:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
2641:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2642:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   uint32_t tmpreg1 = (READ_BIT(ADCx->JSQR, ADC_JSQR_JL) >> ADC_JSQR_JL_Pos)  + 1U;
2643:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
2644:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR,
2645:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                              ADC_CHANNEL_ID_NUMBER_MASK << (5U * (uint8_t)(((Rank) + 3U) - (tmpreg1
2646:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                     >> (5U * (uint8_t)(((Rank) + 3U) - (tmpreg1)))
2647:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                    );
ARM GAS  /tmp/ccLne6l3.s 			page 67


2648:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2649:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2650:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2651:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger:
2652:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         independent or from ADC group regular.
2653:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   This mode can be used to extend number of data registers
2654:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         updated after one ADC conversion trigger and with data 
2655:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         permanently kept (not erased by successive conversions of scan of
2656:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC sequencer ranks), up to 5 data registers:
2657:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         1 data register on ADC group regular, 4 data registers
2658:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         on ADC group injected.            
2659:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   If ADC group injected injected trigger source is set to an
2660:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         external trigger, this feature must be must be set to
2661:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         independent trigger.
2662:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC group injected automatic trigger is compliant only with 
2663:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         group injected trigger source set to SW start, without any 
2664:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         further action on  ADC group injected conversion start or stop: 
2665:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         in this case, ADC group injected is controlled only 
2666:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         from ADC group regular.
2667:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
2668:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
2669:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR1      JAUTO          LL_ADC_INJ_SetTrigAuto
2670:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2671:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  TrigAuto This parameter can be one of the following values:
2672:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
2673:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
2674:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
2675:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2676:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTrigAuto(ADC_TypeDef *ADCx, uint32_t TrigAuto)
2677:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2678:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCx->CR1, ADC_CR1_JAUTO, TrigAuto);
2679:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2680:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2681:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2682:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger:
2683:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         independent or from ADC group regular.
2684:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR1      JAUTO          LL_ADC_INJ_GetTrigAuto
2685:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2686:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2687:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
2688:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
2689:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2690:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTrigAuto(ADC_TypeDef *ADCx)
2691:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2692:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CR1, ADC_CR1_JAUTO));
2693:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2694:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2695:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2696:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC group injected offset.
2697:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   It sets:
2698:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - ADC group injected rank to which the offset programmed
2699:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           will be applied
2700:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - Offset level (offset to be subtracted from the raw
2701:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           converted data).
2702:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Caution: Offset format is dependent to ADC resolution:
2703:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
2704:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         are set to 0.
ARM GAS  /tmp/ccLne6l3.s 			page 68


2705:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Offset cannot be enabled or disabled.
2706:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         To emulate offset disabled, set an offset value equal to 0.
2707:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll JOFR1    JOFFSET1       LL_ADC_INJ_SetOffset\n
2708:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JOFR2    JOFFSET2       LL_ADC_INJ_SetOffset\n
2709:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JOFR3    JOFFSET3       LL_ADC_INJ_SetOffset\n
2710:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JOFR4    JOFFSET4       LL_ADC_INJ_SetOffset
2711:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2712:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
2713:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
2714:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
2715:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
2716:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
2717:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
2718:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
2719:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2720:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetOffset(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t OffsetLevel)
2721:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2722:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGO
2723:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
2724:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(*preg,
2725:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****              ADC_JOFR1_JOFFSET1,
2726:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****              OffsetLevel);
2727:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2728:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2729:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2730:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group injected offset.
2731:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   It gives offset level (offset to be subtracted from the raw converted data).
2732:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Caution: Offset format is dependent to ADC resolution:
2733:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
2734:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         are set to 0.
2735:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll JOFR1    JOFFSET1       LL_ADC_INJ_GetOffset\n
2736:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JOFR2    JOFFSET2       LL_ADC_INJ_GetOffset\n
2737:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JOFR3    JOFFSET3       LL_ADC_INJ_GetOffset\n
2738:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JOFR4    JOFFSET4       LL_ADC_INJ_GetOffset
2739:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2740:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
2741:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
2742:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
2743:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
2744:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
2745:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2746:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2747:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetOffset(ADC_TypeDef *ADCx, uint32_t Rank)
2748:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2749:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JOFR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JOFRX_REGO
2750:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
2751:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
2752:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                              ADC_JOFR1_JOFFSET1)
2753:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                    );
2754:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2755:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2756:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2757:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
2758:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2759:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2760:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_Channels Configuration of ADC hierarchical scope: channels
2761:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
ARM GAS  /tmp/ccLne6l3.s 			page 69


2762:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2763:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2764:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2765:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set sampling time of the selected ADC channel
2766:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Unit: ADC clock cycles.
2767:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
2768:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
2769:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   In case of internal channel (VrefInt, TempSensor, ...) to be
2770:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         converted:
2771:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         sampling time constraints must be respected (sampling time can be
2772:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         adjusted in function of ADC clock frequency and sampling time
2773:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         setting).
2774:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to device datasheet for timings values (parameters TS_vrefint,
2775:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         TS_temp, ...).
2776:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
2777:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to reference manual for ADC processing time of
2778:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         this STM32 series.
2779:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   In case of ADC conversion of internal channel (VrefInt,
2780:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         temperature sensor, ...), a sampling time minimum value
2781:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         is required.
2782:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to device datasheet.
2783:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll SMPR1    SMP17          LL_ADC_SetChannelSamplingTime\n
2784:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR1    SMP16          LL_ADC_SetChannelSamplingTime\n
2785:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR1    SMP15          LL_ADC_SetChannelSamplingTime\n
2786:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR1    SMP14          LL_ADC_SetChannelSamplingTime\n
2787:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR1    SMP13          LL_ADC_SetChannelSamplingTime\n
2788:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR1    SMP12          LL_ADC_SetChannelSamplingTime\n
2789:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR1    SMP11          LL_ADC_SetChannelSamplingTime\n
2790:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR1    SMP10          LL_ADC_SetChannelSamplingTime\n
2791:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP9           LL_ADC_SetChannelSamplingTime\n
2792:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP8           LL_ADC_SetChannelSamplingTime\n
2793:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP7           LL_ADC_SetChannelSamplingTime\n
2794:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP6           LL_ADC_SetChannelSamplingTime\n
2795:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP5           LL_ADC_SetChannelSamplingTime\n
2796:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP4           LL_ADC_SetChannelSamplingTime\n
2797:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP3           LL_ADC_SetChannelSamplingTime\n
2798:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP2           LL_ADC_SetChannelSamplingTime\n
2799:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP1           LL_ADC_SetChannelSamplingTime\n
2800:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP0           LL_ADC_SetChannelSamplingTime
2801:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2802:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
2803:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2804:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2805:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2806:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2807:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2808:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2809:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2810:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2811:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2812:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2813:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2814:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2815:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2816:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2817:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2818:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
ARM GAS  /tmp/ccLne6l3.s 			page 70


2819:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
2820:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
2821:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
2822:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
2823:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
2824:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
2825:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  SamplingTime This parameter can be one of the following values:
2826:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
2827:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_7CYCLES_5
2828:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_13CYCLES_5
2829:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_28CYCLES_5
2830:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_41CYCLES_5
2831:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
2832:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
2833:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
2834:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
2835:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2836:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sa
2837:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
 118              		.loc 1 2837 1
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 48
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123 0000 80B4     		push	{r7}
 124              	.LCFI6:
 125              		.cfi_def_cfa_offset 4
 126              		.cfi_offset 7, -4
 127 0002 8DB0     		sub	sp, sp, #52
 128              	.LCFI7:
 129              		.cfi_def_cfa_offset 56
 130 0004 00AF     		add	r7, sp, #0
 131              	.LCFI8:
 132              		.cfi_def_cfa_register 7
 133 0006 F860     		str	r0, [r7, #12]
 134 0008 B960     		str	r1, [r7, #8]
 135 000a 7A60     		str	r2, [r7, #4]
2838:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* Set bits with content of parameter "SamplingTime" with bits position     */
2839:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* in register and register position depending on parameter "Channel".      */
2840:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
2841:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
2842:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMP
 136              		.loc 1 2842 25
 137 000c FB68     		ldr	r3, [r7, #12]
 138 000e 0C33     		adds	r3, r3, #12
 139 0010 1946     		mov	r1, r3
 140 0012 BB68     		ldr	r3, [r7, #8]
 141 0014 03F00073 		and	r3, r3, #33554432
 142 0018 4FF00072 		mov	r2, #33554432
 143 001c BA61     		str	r2, [r7, #24]
 144              	.LBB14:
 145              	.LBB15:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 146              		.loc 2 988 4
 147 001e BA69     		ldr	r2, [r7, #24]
 148              		.syntax unified
 149              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/ccLne6l3.s 			page 71


 150 0020 92FAA2F2 		rbit r2, r2
 151              	@ 0 "" 2
 152              		.thumb
 153              		.syntax unified
 154 0024 7A61     		str	r2, [r7, #20]
 155              		.loc 2 1001 10
 156 0026 7A69     		ldr	r2, [r7, #20]
 157              	.LBE15:
 158              	.LBE14:
 159              		.loc 1 2842 25
 160 0028 B2FA82F2 		clz	r2, r2
 161 002c D2B2     		uxtb	r2, r2
 162 002e D340     		lsrs	r3, r3, r2
 163 0030 9B00     		lsls	r3, r3, #2
 164 0032 0B44     		add	r3, r3, r1
 165              		.loc 1 2842 18
 166 0034 FB62     		str	r3, [r7, #44]
2843:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
2844:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(*preg,
 167              		.loc 1 2844 3
 168 0036 FB6A     		ldr	r3, [r7, #44]
 169 0038 1A68     		ldr	r2, [r3]
 170 003a BB68     		ldr	r3, [r7, #8]
 171 003c 03F0F873 		and	r3, r3, #32505856
 172 0040 4FF0F871 		mov	r1, #32505856
 173 0044 3962     		str	r1, [r7, #32]
 174              	.LBB16:
 175              	.LBB17:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 176              		.loc 2 988 4
 177 0046 396A     		ldr	r1, [r7, #32]
 178              		.syntax unified
 179              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 180 0048 91FAA1F1 		rbit r1, r1
 181              	@ 0 "" 2
 182              		.thumb
 183              		.syntax unified
 184 004c F961     		str	r1, [r7, #28]
 185              		.loc 2 1001 10
 186 004e F969     		ldr	r1, [r7, #28]
 187              	.LBE17:
 188              	.LBE16:
 189              		.loc 1 2844 3
 190 0050 B1FA81F1 		clz	r1, r1
 191 0054 C9B2     		uxtb	r1, r1
 192 0056 CB40     		lsrs	r3, r3, r1
 193 0058 0721     		movs	r1, #7
 194 005a 01FA03F3 		lsl	r3, r1, r3
 195 005e DB43     		mvns	r3, r3
 196 0060 1A40     		ands	r2, r2, r3
 197 0062 BB68     		ldr	r3, [r7, #8]
 198 0064 03F0F873 		and	r3, r3, #32505856
 199 0068 4FF0F871 		mov	r1, #32505856
 200 006c B962     		str	r1, [r7, #40]
 201              	.LBB18:
 202              	.LBB19:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccLne6l3.s 			page 72


 203              		.loc 2 988 4
 204 006e B96A     		ldr	r1, [r7, #40]
 205              		.syntax unified
 206              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 207 0070 91FAA1F1 		rbit r1, r1
 208              	@ 0 "" 2
 209              		.thumb
 210              		.syntax unified
 211 0074 7962     		str	r1, [r7, #36]
 212              		.loc 2 1001 10
 213 0076 796A     		ldr	r1, [r7, #36]
 214              	.LBE19:
 215              	.LBE18:
 216              		.loc 1 2844 3
 217 0078 B1FA81F1 		clz	r1, r1
 218 007c C9B2     		uxtb	r1, r1
 219 007e CB40     		lsrs	r3, r3, r1
 220 0080 7968     		ldr	r1, [r7, #4]
 221 0082 01FA03F3 		lsl	r3, r1, r3
 222 0086 1A43     		orrs	r2, r2, r3
 223 0088 FB6A     		ldr	r3, [r7, #44]
 224 008a 1A60     		str	r2, [r3]
2845:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****              ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
2846:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****              SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
2847:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
 225              		.loc 1 2847 1
 226 008c 00BF     		nop
 227 008e 3437     		adds	r7, r7, #52
 228              	.LCFI9:
 229              		.cfi_def_cfa_offset 4
 230 0090 BD46     		mov	sp, r7
 231              	.LCFI10:
 232              		.cfi_def_cfa_register 13
 233              		@ sp needed
 234 0092 80BC     		pop	{r7}
 235              	.LCFI11:
 236              		.cfi_restore 7
 237              		.cfi_def_cfa_offset 0
 238 0094 7047     		bx	lr
 239              		.cfi_endproc
 240              	.LFE98:
 242              		.section	.text.LL_ADC_Enable,"ax",%progbits
 243              		.align	1
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 248              	LL_ADC_Enable:
 249              	.LFB106:
2848:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2849:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2850:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get sampling time of the selected ADC channel
2851:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Unit: ADC clock cycles.
2852:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
2853:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
2854:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
2855:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to reference manual for ADC processing time of
2856:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         this STM32 series.
ARM GAS  /tmp/ccLne6l3.s 			page 73


2857:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll SMPR1    SMP17          LL_ADC_GetChannelSamplingTime\n
2858:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR1    SMP16          LL_ADC_GetChannelSamplingTime\n
2859:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR1    SMP15          LL_ADC_GetChannelSamplingTime\n
2860:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR1    SMP14          LL_ADC_GetChannelSamplingTime\n
2861:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR1    SMP13          LL_ADC_GetChannelSamplingTime\n
2862:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR1    SMP12          LL_ADC_GetChannelSamplingTime\n
2863:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR1    SMP11          LL_ADC_GetChannelSamplingTime\n
2864:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR1    SMP10          LL_ADC_GetChannelSamplingTime\n
2865:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP9           LL_ADC_GetChannelSamplingTime\n
2866:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP8           LL_ADC_GetChannelSamplingTime\n
2867:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP7           LL_ADC_GetChannelSamplingTime\n
2868:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP6           LL_ADC_GetChannelSamplingTime\n
2869:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP5           LL_ADC_GetChannelSamplingTime\n
2870:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP4           LL_ADC_GetChannelSamplingTime\n
2871:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP3           LL_ADC_GetChannelSamplingTime\n
2872:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP2           LL_ADC_GetChannelSamplingTime\n
2873:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP1           LL_ADC_GetChannelSamplingTime\n
2874:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         SMPR2    SMP0           LL_ADC_GetChannelSamplingTime
2875:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2876:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
2877:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2878:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2879:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2880:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2881:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2882:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2883:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2884:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2885:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2886:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2887:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2888:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2889:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2890:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2891:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2892:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
2893:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
2894:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
2895:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
2896:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
2897:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
2898:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
2899:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2900:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
2901:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_7CYCLES_5
2902:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_13CYCLES_5
2903:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_28CYCLES_5
2904:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_41CYCLES_5
2905:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
2906:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
2907:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
2908:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2909:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel)
2910:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
2911:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMP
2912:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
2913:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
ARM GAS  /tmp/ccLne6l3.s 			page 74


2914:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                              ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET
2915:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                     >> __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK)
2916:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                    );
2917:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
2918:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2919:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2920:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
2921:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2922:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2923:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_AnalogWatchdog Configuration of ADC transversal scope: an
2924:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
2925:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
2926:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
2927:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
2928:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC analog watchdog monitored channels:
2929:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         a single channel or all channels,
2930:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         on ADC groups regular and-or injected.
2931:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Once monitored channels are selected, analog watchdog
2932:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         is enabled.
2933:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   In case of need to define a single channel to monitor
2934:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         with analog watchdog from sequencer channel definition,
2935:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         use helper macro @ref __LL_ADC_ANALOGWD_CHANNEL_GROUP().
2936:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, there is only 1 kind of analog watchdog
2937:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         instance:
2938:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
2939:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
2940:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
2941:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
2942:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             ADC resolution configured).
2943:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR1      AWD1CH         LL_ADC_SetAnalogWDMonitChannels\n
2944:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         CR1      AWD1SGL        LL_ADC_SetAnalogWDMonitChannels\n
2945:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         CR1      AWD1EN         LL_ADC_SetAnalogWDMonitChannels
2946:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
2947:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  AWDChannelGroup This parameter can be one of the following values:
2948:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
2949:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG
2950:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ
2951:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
2952:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG 
2953:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ 
2954:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
2955:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG 
2956:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ 
2957:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
2958:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG 
2959:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ 
2960:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
2961:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG 
2962:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ 
2963:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
2964:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG 
2965:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ 
2966:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
2967:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG 
2968:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ 
2969:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
2970:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG 
ARM GAS  /tmp/ccLne6l3.s 			page 75


2971:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ 
2972:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
2973:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG 
2974:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ 
2975:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
2976:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG 
2977:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ 
2978:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
2979:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG 
2980:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ 
2981:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
2982:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG
2983:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ
2984:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
2985:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG
2986:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ
2987:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
2988:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG
2989:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ
2990:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
2991:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG
2992:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ
2993:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
2994:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG
2995:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ
2996:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
2997:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG
2998:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ
2999:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
3000:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG
3001:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ
3002:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
3003:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG
3004:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ
3005:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
3006:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (1)
3007:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (1)
3008:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ      (1)
3009:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG       (1)
3010:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_INJ       (1)
3011:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ   (1)
3012:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         
3013:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
3014:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
3015:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3016:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDChannelGroup)
3017:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3018:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCx->CR1,
3019:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****              (ADC_CR1_AWDEN | ADC_CR1_JAWDEN | ADC_CR1_AWDSGL | ADC_CR1_AWDCH),
3020:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****              AWDChannelGroup);
3021:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3022:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3023:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3024:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC analog watchdog monitored channel.
3025:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   Usage of the returned channel number:
3026:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
3027:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
ARM GAS  /tmp/ccLne6l3.s 			page 76


3028:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
3029:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
3030:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3031:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
3032:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           as parameter for another function.
3033:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - To get the channel number in decimal format:
3034:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           process the returned value with the helper macro
3035:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3036:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           Applicable only when the analog watchdog is set to monitor
3037:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           one channel.
3038:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, there is only 1 kind of analog watchdog
3039:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         instance:
3040:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
3041:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
3042:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
3043:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3044:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             ADC resolution configured).
3045:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR1      AWD1CH         LL_ADC_GetAnalogWDMonitChannels\n
3046:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         CR1      AWD1SGL        LL_ADC_GetAnalogWDMonitChannels\n
3047:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         CR1      AWD1EN         LL_ADC_GetAnalogWDMonitChannels
3048:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3049:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3050:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
3051:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG
3052:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ
3053:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
3054:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG 
3055:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ 
3056:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
3057:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG 
3058:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ 
3059:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
3060:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG 
3061:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ 
3062:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
3063:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG 
3064:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ 
3065:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
3066:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG 
3067:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ 
3068:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
3069:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG 
3070:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ 
3071:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
3072:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG 
3073:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ 
3074:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
3075:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG 
3076:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ 
3077:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
3078:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG 
3079:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ 
3080:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
3081:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG 
3082:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ 
3083:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
3084:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG
ARM GAS  /tmp/ccLne6l3.s 			page 77


3085:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ
3086:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
3087:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG
3088:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ
3089:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
3090:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG
3091:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ
3092:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
3093:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG
3094:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ
3095:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
3096:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG
3097:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ
3098:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
3099:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG
3100:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ
3101:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
3102:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG
3103:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ
3104:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
3105:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG
3106:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ
3107:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
3108:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3109:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx)
3110:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3111:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CR1, (ADC_CR1_AWDEN | ADC_CR1_JAWDEN | ADC_CR1_AWDSGL | ADC_CR1_
3112:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3113:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3114:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3115:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC analog watchdog threshold value of threshold
3116:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         high or low.
3117:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, there is only 1 kind of analog watchdog
3118:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         instance:
3119:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
3120:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
3121:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
3122:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3123:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *             ADC resolution configured).
3124:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll HTR      HT             LL_ADC_SetAnalogWDThresholds\n
3125:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         LTR      LT             LL_ADC_SetAnalogWDThresholds
3126:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3127:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
3128:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
3129:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
3130:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  AWDThresholdValue: Value between Min_Data=0x000 and Max_Data=0xFFF
3131:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
3132:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3133:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDThresholdsHighLow,
3134:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3135:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->HTR, AWDThresholdsHighLow);
3136:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
3137:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(*preg,
3138:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****              ADC_HTR_HT,
3139:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****              AWDThresholdValue);
3140:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3141:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 78


3142:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3143:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC analog watchdog threshold value of threshold high or
3144:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         threshold low.
3145:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
3146:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
3147:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION().
3148:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll HTR      HT             LL_ADC_GetAnalogWDThresholds\n
3149:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         LTR      LT             LL_ADC_GetAnalogWDThresholds
3150:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3151:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
3152:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
3153:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
3154:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
3155:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** */
3156:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDThresholdsHigh
3157:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3158:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->HTR, AWDThresholdsHighLow);
3159:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
3160:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg, ADC_HTR_HT));
3161:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3162:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3163:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3164:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
3165:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3166:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3167:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Multimode Configuration of ADC hierarchical scope: multim
3168:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
3169:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3170:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3171:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
3172:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3173:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Set ADC multimode configuration to operate in independent mode
3174:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
3175:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
3176:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         either master or slave depending on hardware.
3177:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to reference manual.
3178:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR1      DUALMOD        LL_ADC_SetMultimode
3179:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
3180:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
3181:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Multimode This parameter can be one of the following values:
3182:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT             
3183:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT         
3184:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL_FAST    
3185:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL_SLOW    
3186:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT         
3187:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN         
3188:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM    
3189:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT    
3190:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTFAST_INJ_SIM
3191:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTSLOW_INJ_SIM
3192:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
3193:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3194:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultimode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Multimode)
3195:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3196:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CR1, ADC_CR1_DUALMOD, Multimode);
3197:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3198:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 79


3199:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3200:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC multimode configuration to operate in independent mode
3201:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
3202:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
3203:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         either master or slave depending on hardware.
3204:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to reference manual.
3205:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR1      DUALMOD        LL_ADC_GetMultimode
3206:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
3207:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
3208:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3209:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
3210:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT         
3211:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL_FAST    
3212:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL_SLOW    
3213:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT         
3214:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN         
3215:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM    
3216:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT    
3217:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTFAST_INJ_SIM
3218:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTSLOW_INJ_SIM
3219:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3220:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
3221:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3222:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CR1, ADC_CR1_DUALMOD));
3223:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3224:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3225:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
3226:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3227:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3228:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
3229:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3230:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Instance Operation on ADC hierarchical scope: ADC instance
3231:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
3232:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3233:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3234:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3235:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Enable the selected ADC instance.
3236:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, after ADC enable, a delay for 
3237:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC internal analog stabilization is required before performing a
3238:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC conversion start.
3239:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to device datasheet, parameter tSTAB.
3240:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      ADON           LL_ADC_Enable
3241:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3242:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
3243:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3244:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
3245:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
 250              		.loc 1 3245 1
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 8
 253              		@ frame_needed = 1, uses_anonymous_args = 0
 254              		@ link register save eliminated.
 255 0000 80B4     		push	{r7}
 256              	.LCFI12:
 257              		.cfi_def_cfa_offset 4
 258              		.cfi_offset 7, -4
 259 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccLne6l3.s 			page 80


 260              	.LCFI13:
 261              		.cfi_def_cfa_offset 16
 262 0004 00AF     		add	r7, sp, #0
 263              	.LCFI14:
 264              		.cfi_def_cfa_register 7
 265 0006 7860     		str	r0, [r7, #4]
3246:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 266              		.loc 1 3246 3
 267 0008 7B68     		ldr	r3, [r7, #4]
 268 000a 9B68     		ldr	r3, [r3, #8]
 269 000c 43F00102 		orr	r2, r3, #1
 270 0010 7B68     		ldr	r3, [r7, #4]
 271 0012 9A60     		str	r2, [r3, #8]
3247:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
 272              		.loc 1 3247 1
 273 0014 00BF     		nop
 274 0016 0C37     		adds	r7, r7, #12
 275              	.LCFI15:
 276              		.cfi_def_cfa_offset 4
 277 0018 BD46     		mov	sp, r7
 278              	.LCFI16:
 279              		.cfi_def_cfa_register 13
 280              		@ sp needed
 281 001a 80BC     		pop	{r7}
 282              	.LCFI17:
 283              		.cfi_restore 7
 284              		.cfi_def_cfa_offset 0
 285 001c 7047     		bx	lr
 286              		.cfi_endproc
 287              	.LFE106:
 289              		.section	.text.LL_ADC_Disable,"ax",%progbits
 290              		.align	1
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 295              	LL_ADC_Disable:
 296              	.LFB107:
3248:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3249:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3250:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Disable the selected ADC instance.
3251:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      ADON           LL_ADC_Disable
3252:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3253:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
3254:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3255:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
3256:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
 297              		.loc 1 3256 1
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 8
 300              		@ frame_needed = 1, uses_anonymous_args = 0
 301              		@ link register save eliminated.
 302 0000 80B4     		push	{r7}
 303              	.LCFI18:
 304              		.cfi_def_cfa_offset 4
 305              		.cfi_offset 7, -4
 306 0002 83B0     		sub	sp, sp, #12
 307              	.LCFI19:
ARM GAS  /tmp/ccLne6l3.s 			page 81


 308              		.cfi_def_cfa_offset 16
 309 0004 00AF     		add	r7, sp, #0
 310              	.LCFI20:
 311              		.cfi_def_cfa_register 7
 312 0006 7860     		str	r0, [r7, #4]
3257:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 313              		.loc 1 3257 3
 314 0008 7B68     		ldr	r3, [r7, #4]
 315 000a 9B68     		ldr	r3, [r3, #8]
 316 000c 23F00102 		bic	r2, r3, #1
 317 0010 7B68     		ldr	r3, [r7, #4]
 318 0012 9A60     		str	r2, [r3, #8]
3258:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
 319              		.loc 1 3258 1
 320 0014 00BF     		nop
 321 0016 0C37     		adds	r7, r7, #12
 322              	.LCFI21:
 323              		.cfi_def_cfa_offset 4
 324 0018 BD46     		mov	sp, r7
 325              	.LCFI22:
 326              		.cfi_def_cfa_register 13
 327              		@ sp needed
 328 001a 80BC     		pop	{r7}
 329              	.LCFI23:
 330              		.cfi_restore 7
 331              		.cfi_def_cfa_offset 0
 332 001c 7047     		bx	lr
 333              		.cfi_endproc
 334              	.LFE107:
 336              		.section	.text.LL_ADC_StartCalibration,"ax",%progbits
 337              		.align	1
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 342              	LL_ADC_StartCalibration:
 343              	.LFB109:
3259:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3260:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3261:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get the selected ADC instance enable state.
3262:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      ADON           LL_ADC_IsEnabled
3263:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3264:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval 0: ADC is disabled, 1: ADC is enabled.
3265:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3266:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
3267:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3268:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
3269:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3270:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3271:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3272:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Start ADC calibration in the mode single-ended
3273:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
3274:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, before starting a calibration,
3275:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC must be disabled.
3276:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         A minimum number of ADC clock cycles are required
3277:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         between ADC disable state and calibration start.
3278:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_DISABLE_CALIB_ADC_CYCLES.
3279:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, hardware prerequisite before starting a calibration:
ARM GAS  /tmp/ccLne6l3.s 			page 82


3280:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****             the ADC must have been in power-on state for at least
3281:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****             two ADC clock cycles.
3282:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      CAL            LL_ADC_StartCalibration
3283:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3284:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
3285:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3286:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
3287:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
 344              		.loc 1 3287 1
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 8
 347              		@ frame_needed = 1, uses_anonymous_args = 0
 348              		@ link register save eliminated.
 349 0000 80B4     		push	{r7}
 350              	.LCFI24:
 351              		.cfi_def_cfa_offset 4
 352              		.cfi_offset 7, -4
 353 0002 83B0     		sub	sp, sp, #12
 354              	.LCFI25:
 355              		.cfi_def_cfa_offset 16
 356 0004 00AF     		add	r7, sp, #0
 357              	.LCFI26:
 358              		.cfi_def_cfa_register 7
 359 0006 7860     		str	r0, [r7, #4]
3288:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 360              		.loc 1 3288 3
 361 0008 7B68     		ldr	r3, [r7, #4]
 362 000a 9B68     		ldr	r3, [r3, #8]
 363 000c 43F00402 		orr	r2, r3, #4
 364 0010 7B68     		ldr	r3, [r7, #4]
 365 0012 9A60     		str	r2, [r3, #8]
3289:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
 366              		.loc 1 3289 1
 367 0014 00BF     		nop
 368 0016 0C37     		adds	r7, r7, #12
 369              	.LCFI27:
 370              		.cfi_def_cfa_offset 4
 371 0018 BD46     		mov	sp, r7
 372              	.LCFI28:
 373              		.cfi_def_cfa_register 13
 374              		@ sp needed
 375 001a 80BC     		pop	{r7}
 376              	.LCFI29:
 377              		.cfi_restore 7
 378              		.cfi_def_cfa_offset 0
 379 001c 7047     		bx	lr
 380              		.cfi_endproc
 381              	.LFE109:
 383              		.section	.text.LL_ADC_IsCalibrationOnGoing,"ax",%progbits
 384              		.align	1
 385              		.syntax unified
 386              		.thumb
 387              		.thumb_func
 389              	LL_ADC_IsCalibrationOnGoing:
 390              	.LFB110:
3290:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3291:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
ARM GAS  /tmp/ccLne6l3.s 			page 83


3292:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC calibration state.
3293:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
3294:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3295:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval 0: calibration complete, 1: calibration in progress.
3296:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3297:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
3298:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
 391              		.loc 1 3298 1
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 8
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 396 0000 80B4     		push	{r7}
 397              	.LCFI30:
 398              		.cfi_def_cfa_offset 4
 399              		.cfi_offset 7, -4
 400 0002 83B0     		sub	sp, sp, #12
 401              	.LCFI31:
 402              		.cfi_def_cfa_offset 16
 403 0004 00AF     		add	r7, sp, #0
 404              	.LCFI32:
 405              		.cfi_def_cfa_register 7
 406 0006 7860     		str	r0, [r7, #4]
3299:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 407              		.loc 1 3299 11
 408 0008 7B68     		ldr	r3, [r7, #4]
 409 000a 9B68     		ldr	r3, [r3, #8]
 410 000c 03F00403 		and	r3, r3, #4
 411              		.loc 1 3299 44
 412 0010 042B     		cmp	r3, #4
 413 0012 0CBF     		ite	eq
 414 0014 0123     		moveq	r3, #1
 415 0016 0023     		movne	r3, #0
 416 0018 DBB2     		uxtb	r3, r3
3300:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
 417              		.loc 1 3300 1
 418 001a 1846     		mov	r0, r3
 419 001c 0C37     		adds	r7, r7, #12
 420              	.LCFI33:
 421              		.cfi_def_cfa_offset 4
 422 001e BD46     		mov	sp, r7
 423              	.LCFI34:
 424              		.cfi_def_cfa_register 13
 425              		@ sp needed
 426 0020 80BC     		pop	{r7}
 427              	.LCFI35:
 428              		.cfi_restore 7
 429              		.cfi_def_cfa_offset 0
 430 0022 7047     		bx	lr
 431              		.cfi_endproc
 432              	.LFE110:
 434              		.section	.text.LL_ADC_REG_StartConversionSWStart,"ax",%progbits
 435              		.align	1
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 440              	LL_ADC_REG_StartConversionSWStart:
ARM GAS  /tmp/ccLne6l3.s 			page 84


 441              	.LFB111:
3301:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3302:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3303:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
3304:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3305:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3306:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Regular Operation on ADC hierarchical scope: group regu
3307:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
3308:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3309:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3310:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3311:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Start ADC group regular conversion.
3312:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, this function is relevant only for
3313:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         internal trigger (SW start), not for external trigger:
3314:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
3315:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           starts immediately.
3316:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
3317:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           start must be performed using function 
3318:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           @ref LL_ADC_REG_StartConversionExtTrig().
3319:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           (if external trigger edge would have been set during ADC other 
3320:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           settings, ADC conversion would start at trigger event
3321:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           as soon as ADC is enabled).
3322:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
3323:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3324:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
3325:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3326:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
3327:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
 442              		.loc 1 3327 1
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 8
 445              		@ frame_needed = 1, uses_anonymous_args = 0
 446              		@ link register save eliminated.
 447 0000 80B4     		push	{r7}
 448              	.LCFI36:
 449              		.cfi_def_cfa_offset 4
 450              		.cfi_offset 7, -4
 451 0002 83B0     		sub	sp, sp, #12
 452              	.LCFI37:
 453              		.cfi_def_cfa_offset 16
 454 0004 00AF     		add	r7, sp, #0
 455              	.LCFI38:
 456              		.cfi_def_cfa_register 7
 457 0006 7860     		str	r0, [r7, #4]
3328:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 458              		.loc 1 3328 3
 459 0008 7B68     		ldr	r3, [r7, #4]
 460 000a 9B68     		ldr	r3, [r3, #8]
 461 000c 43F4A002 		orr	r2, r3, #5242880
 462 0010 7B68     		ldr	r3, [r7, #4]
 463 0012 9A60     		str	r2, [r3, #8]
3329:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
 464              		.loc 1 3329 1
 465 0014 00BF     		nop
 466 0016 0C37     		adds	r7, r7, #12
 467              	.LCFI39:
 468              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccLne6l3.s 			page 85


 469 0018 BD46     		mov	sp, r7
 470              	.LCFI40:
 471              		.cfi_def_cfa_register 13
 472              		@ sp needed
 473 001a 80BC     		pop	{r7}
 474              	.LCFI41:
 475              		.cfi_restore 7
 476              		.cfi_def_cfa_offset 0
 477 001c 7047     		bx	lr
 478              		.cfi_endproc
 479              	.LFE111:
 481              		.section	.text.LL_ADC_REG_ReadConversionData12,"ax",%progbits
 482              		.align	1
 483              		.syntax unified
 484              		.thumb
 485              		.thumb_func
 487              	LL_ADC_REG_ReadConversionData12:
 488              	.LFB115:
3330:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3331:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3332:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Start ADC group regular conversion from external trigger.
3333:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   ADC conversion will start at next trigger event (on the selected
3334:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         trigger edge) following the ADC start conversion command.
3335:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, this function is relevant for 
3336:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC conversion start from external trigger.
3337:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         If internal trigger (SW start) is needed, perform ADC conversion
3338:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         start using function @ref LL_ADC_REG_StartConversionSWStart().
3339:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      EXTEN          LL_ADC_REG_StartConversionExtTrig
3340:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
3341:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3342:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3343:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
3344:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3345:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerE
3346:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3347:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   SET_BIT(ADCx->CR2, ExternalTriggerEdge);
3348:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3349:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3350:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3351:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Stop ADC group regular conversion from external trigger.
3352:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   No more ADC conversion will start at next trigger event
3353:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         following the ADC stop conversion command.
3354:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         If a conversion is on-going, it will be completed.
3355:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, there is no specific command
3356:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         to stop a conversion on-going or to stop ADC converting
3357:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         in continuous mode. These actions can be performed
3358:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         using function @ref LL_ADC_Disable().
3359:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      EXTSEL         LL_ADC_REG_StopConversionExtTrig
3360:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3361:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
3362:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3363:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StopConversionExtTrig(ADC_TypeDef *ADCx)
3364:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3365:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR2, ADC_CR2_EXTTRIG);
3366:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3367:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3368:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
ARM GAS  /tmp/ccLne6l3.s 			page 86


3369:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
3370:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
3371:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         all oversampling increased data width (for devices
3372:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         with feature oversampling).
3373:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData32
3374:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3375:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
3376:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3377:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
3378:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3379:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
3380:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3381:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3382:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3383:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
3384:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC resolution 12 bits.
3385:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
3386:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         can increase data width, function for extended range
3387:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
3388:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
3389:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3390:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
3391:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3392:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
3393:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
 489              		.loc 1 3393 1
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 8
 492              		@ frame_needed = 1, uses_anonymous_args = 0
 493              		@ link register save eliminated.
 494 0000 80B4     		push	{r7}
 495              	.LCFI42:
 496              		.cfi_def_cfa_offset 4
 497              		.cfi_offset 7, -4
 498 0002 83B0     		sub	sp, sp, #12
 499              	.LCFI43:
 500              		.cfi_def_cfa_offset 16
 501 0004 00AF     		add	r7, sp, #0
 502              	.LCFI44:
 503              		.cfi_def_cfa_register 7
 504 0006 7860     		str	r0, [r7, #4]
3394:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 505              		.loc 1 3394 21
 506 0008 7B68     		ldr	r3, [r7, #4]
 507 000a DB6C     		ldr	r3, [r3, #76]
 508              		.loc 1 3394 10
 509 000c 9BB2     		uxth	r3, r3
3395:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
 510              		.loc 1 3395 1
 511 000e 1846     		mov	r0, r3
 512 0010 0C37     		adds	r7, r7, #12
 513              	.LCFI45:
 514              		.cfi_def_cfa_offset 4
 515 0012 BD46     		mov	sp, r7
 516              	.LCFI46:
 517              		.cfi_def_cfa_register 13
 518              		@ sp needed
ARM GAS  /tmp/ccLne6l3.s 			page 87


 519 0014 80BC     		pop	{r7}
 520              	.LCFI47:
 521              		.cfi_restore 7
 522              		.cfi_def_cfa_offset 0
 523 0016 7047     		bx	lr
 524              		.cfi_endproc
 525              	.LFE115:
 527              		.section	.text.LL_ADC_IsActiveFlag_EOS,"ax",%progbits
 528              		.align	1
 529              		.syntax unified
 530              		.thumb
 531              		.thumb_func
 533              	LL_ADC_IsActiveFlag_EOS:
 534              	.LFB122:
3396:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3397:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
3398:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3399:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data of ADC master, ADC slave
3400:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         or raw data with ADC master and slave concatenated.
3401:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   If raw data with ADC master and slave concatenated is retrieved,
3402:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         a macro is available to get the conversion data of
3403:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
3404:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
3405:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (however this macro is mainly intended for multimode
3406:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         transfer by DMA, because this function can do the same
3407:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         by getting multimode conversion data of ADC master or ADC slave
3408:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         separately).
3409:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_REG_ReadMultiConversionData32\n
3410:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         DR       ADC2DATA       LL_ADC_REG_ReadMultiConversionData32
3411:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3412:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
3413:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ConversionData This parameter can be one of the following values:
3414:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
3415:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
3416:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER_SLAVE
3417:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
3418:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3419:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadMultiConversionData32(ADC_TypeDef *ADCx, uint32_t Conversio
3420:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3421:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DR,
3422:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                              ADC_DR_ADC2DATA)
3423:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                     >> POSITION_VAL(ConversionData)
3424:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                    );
3425:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3426:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
3427:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3428:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3429:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
3430:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3431:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3432:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Injected Operation on ADC hierarchical scope: group inj
3433:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
3434:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3435:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3436:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3437:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Start ADC group injected conversion.
3438:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, this function is relevant only for
ARM GAS  /tmp/ccLne6l3.s 			page 88


3439:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         internal trigger (SW start), not for external trigger:
3440:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
3441:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           starts immediately.
3442:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
3443:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           start must be performed using function 
3444:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           @ref LL_ADC_INJ_StartConversionExtTrig().
3445:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           (if external trigger edge would have been set during ADC other 
3446:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           settings, ADC conversion would start at trigger event
3447:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *           as soon as ADC is enabled).
3448:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      JSWSTART       LL_ADC_INJ_StartConversionSWStart
3449:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3450:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
3451:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3452:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StartConversionSWStart(ADC_TypeDef *ADCx)
3453:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3454:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   SET_BIT(ADCx->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
3455:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3456:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3457:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3458:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Start ADC group injected conversion from external trigger.
3459:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   ADC conversion will start at next trigger event (on the selected
3460:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         trigger edge) following the ADC start conversion command.
3461:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, this function is relevant for 
3462:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC conversion start from external trigger.
3463:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         If internal trigger (SW start) is needed, perform ADC conversion
3464:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         start using function @ref LL_ADC_INJ_StartConversionSWStart().
3465:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      JEXTEN         LL_ADC_INJ_StartConversionExtTrig
3466:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
3467:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
3468:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3469:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
3470:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3471:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerE
3472:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3473:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   SET_BIT(ADCx->CR2, ExternalTriggerEdge);
3474:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3475:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3476:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3477:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Stop ADC group injected conversion from external trigger.
3478:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   No more ADC conversion will start at next trigger event
3479:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         following the ADC stop conversion command.
3480:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         If a conversion is on-going, it will be completed.
3481:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   On this STM32 series, there is no specific command
3482:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         to stop a conversion on-going or to stop ADC converting
3483:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         in continuous mode. These actions can be performed
3484:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         using function @ref LL_ADC_Disable().
3485:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll CR2      JEXTSEL        LL_ADC_INJ_StopConversionExtTrig
3486:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3487:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
3488:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3489:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StopConversionExtTrig(ADC_TypeDef *ADCx)
3490:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3491:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTTRIG);
3492:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3493:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3494:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3495:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
ARM GAS  /tmp/ccLne6l3.s 			page 89


3496:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
3497:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         all oversampling increased data width (for devices
3498:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         with feature oversampling).
3499:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData32\n
3500:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData32\n
3501:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData32\n
3502:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData32
3503:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3504:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
3505:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
3506:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
3507:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
3508:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
3509:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
3510:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3511:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_ReadConversionData32(ADC_TypeDef *ADCx, uint32_t Rank)
3512:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3513:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFF
3514:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
3515:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
3516:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                              ADC_JDR1_JDATA)
3517:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                    );
3518:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3519:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3520:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3521:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
3522:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         ADC resolution 12 bits.
3523:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
3524:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         can increase data width, function for extended range
3525:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
3526:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData12\n
3527:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData12\n
3528:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData12\n
3529:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData12
3530:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3531:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
3532:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
3533:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
3534:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
3535:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
3536:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
3537:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3538:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData12(ADC_TypeDef *ADCx, uint32_t Rank)
3539:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3540:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFF
3541:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   
3542:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
3543:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                              ADC_JDR1_JDATA)
3544:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****                    );
3545:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3546:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3547:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3548:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @}
3549:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3550:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3551:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /** @defgroup ADC_LL_EF_FLAG_Management ADC flag management
3552:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @{
ARM GAS  /tmp/ccLne6l3.s 			page 90


3553:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3554:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3555:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3556:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sequence conversions.
3557:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOS
3558:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3559:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval State of bit (1 or 0).
3560:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3561:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
3562:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
 535              		.loc 1 3562 1
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 8
 538              		@ frame_needed = 1, uses_anonymous_args = 0
 539              		@ link register save eliminated.
 540 0000 80B4     		push	{r7}
 541              	.LCFI48:
 542              		.cfi_def_cfa_offset 4
 543              		.cfi_offset 7, -4
 544 0002 83B0     		sub	sp, sp, #12
 545              	.LCFI49:
 546              		.cfi_def_cfa_offset 16
 547 0004 00AF     		add	r7, sp, #0
 548              	.LCFI50:
 549              		.cfi_def_cfa_register 7
 550 0006 7860     		str	r0, [r7, #4]
3563:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* Note: on this STM32 series, there is no flag ADC group regular           */
3564:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /*       end of unitary conversion.                                         */
3565:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
3566:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /*       in other STM32 families).                                          */
3567:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 551              		.loc 1 3567 11
 552 0008 7B68     		ldr	r3, [r7, #4]
 553 000a 1B68     		ldr	r3, [r3]
 554 000c 03F00203 		and	r3, r3, #2
 555              		.loc 1 3567 47
 556 0010 022B     		cmp	r3, #2
 557 0012 0CBF     		ite	eq
 558 0014 0123     		moveq	r3, #1
 559 0016 0023     		movne	r3, #0
 560 0018 DBB2     		uxtb	r3, r3
3568:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
 561              		.loc 1 3568 1
 562 001a 1846     		mov	r0, r3
 563 001c 0C37     		adds	r7, r7, #12
 564              	.LCFI51:
 565              		.cfi_def_cfa_offset 4
 566 001e BD46     		mov	sp, r7
 567              	.LCFI52:
 568              		.cfi_def_cfa_register 13
 569              		@ sp needed
 570 0020 80BC     		pop	{r7}
 571              	.LCFI53:
 572              		.cfi_restore 7
 573              		.cfi_def_cfa_offset 0
 574 0022 7047     		bx	lr
 575              		.cfi_endproc
ARM GAS  /tmp/ccLne6l3.s 			page 91


 576              	.LFE122:
 578              		.section	.text.LL_ADC_ClearFlag_EOS,"ax",%progbits
 579              		.align	1
 580              		.syntax unified
 581              		.thumb
 582              		.thumb_func
 584              	LL_ADC_ClearFlag_EOS:
 585              	.LFB125:
3569:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3570:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3571:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3572:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get flag ADC group injected end of sequence conversions.
3573:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll SR       JEOC           LL_ADC_IsActiveFlag_JEOS
3574:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3575:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval State of bit (1 or 0).
3576:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3577:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JEOS(ADC_TypeDef *ADCx)
3578:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3579:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* Note: on this STM32 series, there is no flag ADC group injected          */
3580:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /*       end of unitary conversion.                                         */
3581:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
3582:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /*       in other STM32 families).                                          */
3583:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
3584:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3585:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3586:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3587:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 1 flag
3588:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll SR       AWD            LL_ADC_IsActiveFlag_AWD1
3589:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3590:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval State of bit (1 or 0).
3591:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3592:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD1(ADC_TypeDef *ADCx)
3593:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
3594:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   return (READ_BIT(ADCx->SR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1));
3595:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
3596:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** 
3597:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** /**
3598:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sequence conversions.
3599:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOS
3600:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @param  ADCx ADC instance
3601:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   * @retval None
3602:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   */
3603:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
3604:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** {
 586              		.loc 1 3604 1
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 8
 589              		@ frame_needed = 1, uses_anonymous_args = 0
 590              		@ link register save eliminated.
 591 0000 80B4     		push	{r7}
 592              	.LCFI54:
 593              		.cfi_def_cfa_offset 4
 594              		.cfi_offset 7, -4
 595 0002 83B0     		sub	sp, sp, #12
 596              	.LCFI55:
 597              		.cfi_def_cfa_offset 16
 598 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccLne6l3.s 			page 92


 599              	.LCFI56:
 600              		.cfi_def_cfa_register 7
 601 0006 7860     		str	r0, [r7, #4]
3605:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /* Note: on this STM32 series, there is no flag ADC group regular           */
3606:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /*       end of unitary conversion.                                         */
3607:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
3608:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   /*       in other STM32 families).                                          */
3609:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h ****   WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 602              		.loc 1 3609 3
 603 0008 7B68     		ldr	r3, [r7, #4]
 604 000a 6FF00202 		mvn	r2, #2
 605 000e 1A60     		str	r2, [r3]
3610:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_adc.h **** }
 606              		.loc 1 3610 1
 607 0010 00BF     		nop
 608 0012 0C37     		adds	r7, r7, #12
 609              	.LCFI57:
 610              		.cfi_def_cfa_offset 4
 611 0014 BD46     		mov	sp, r7
 612              	.LCFI58:
 613              		.cfi_def_cfa_register 13
 614              		@ sp needed
 615 0016 80BC     		pop	{r7}
 616              	.LCFI59:
 617              		.cfi_restore 7
 618              		.cfi_def_cfa_offset 0
 619 0018 7047     		bx	lr
 620              		.cfi_endproc
 621              	.LFE125:
 623              		.section	.rodata.CHANNEL_OFFSET_TAB,"a"
 624              		.align	2
 627              	CHANNEL_OFFSET_TAB:
 628 0000 081C3044 		.ascii	"\010\0340DXl\200"
 628      586C80
 629              		.section	.text.LL_DMA_SetDataTransferDirection,"ax",%progbits
 630              		.align	1
 631              		.syntax unified
 632              		.thumb
 633              		.thumb_func
 635              	LL_DMA_SetDataTransferDirection:
 636              	.LFB147:
 637              		.file 3 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h"
   1:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @file    stm32f1xx_ll_dma.h
   4:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief   Header file of DMA LL module.
   6:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   ******************************************************************************
   7:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @attention
   8:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *
   9:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * All rights reserved.
  11:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *
  12:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * This software is licensed under terms that can be found in the LICENSE file in
  13:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * the root directory of this software component.
  14:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *
ARM GAS  /tmp/ccLne6l3.s 			page 93


  16:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   ******************************************************************************
  17:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
  18:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  19:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #ifndef __STM32F1xx_LL_DMA_H
  21:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define __STM32F1xx_LL_DMA_H
  22:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  23:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #ifdef __cplusplus
  24:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** extern "C" {
  25:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #endif
  26:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  27:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #include "stm32f1xx.h"
  29:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  30:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @addtogroup STM32F1xx_LL_Driver
  31:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
  32:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
  33:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  34:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #if defined (DMA1) || defined (DMA2)
  35:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  36:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL DMA
  37:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
  38:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
  39:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  40:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Variables DMA Private Variables
  43:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
  44:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
  45:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /* Array used to get the DMA channel register offset versus channel index LL_DMA_CHANNEL_x */
  46:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** static const uint8_t CHANNEL_OFFSET_TAB[] =
  47:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
  48:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   (uint8_t)(DMA1_Channel1_BASE - DMA1_BASE),
  49:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   (uint8_t)(DMA1_Channel2_BASE - DMA1_BASE),
  50:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   (uint8_t)(DMA1_Channel3_BASE - DMA1_BASE),
  51:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   (uint8_t)(DMA1_Channel4_BASE - DMA1_BASE),
  52:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   (uint8_t)(DMA1_Channel5_BASE - DMA1_BASE),
  53:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   (uint8_t)(DMA1_Channel6_BASE - DMA1_BASE),
  54:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   (uint8_t)(DMA1_Channel7_BASE - DMA1_BASE)
  55:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** };
  56:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
  57:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
  58:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
  59:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /* Private constants ---------------------------------------------------------*/
  60:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /* Private macros ------------------------------------------------------------*/
  61:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
  62:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Macros DMA Private Macros
  63:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
  64:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
  65:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
  66:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
  67:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
  68:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
  69:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  70:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /* Exported types ------------------------------------------------------------*/
  71:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
  72:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_ES_INIT DMA Exported Init structure
ARM GAS  /tmp/ccLne6l3.s 			page 94


  73:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
  74:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
  75:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** typedef struct
  76:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
  77:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcAddress;  /*!< Specifies the peripheral base address for DMA transfer
  78:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         or as Source base address in case of memory to memory trans
  79:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  80:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
  81:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  82:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   uint32_t MemoryOrM2MDstAddress;  /*!< Specifies the memory base address for DMA transfer
  83:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         or as Destination base address in case of memory to memory 
  84:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  85:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
  86:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  87:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   uint32_t Direction;              /*!< Specifies if the data will be transferred from memory to pe
  88:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         from memory to memory or from peripheral to memory.
  89:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_DIRECTION
  90:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  91:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
  92:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  93:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   uint32_t Mode;                   /*!< Specifies the normal or circular operation mode.
  94:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MODE
  95:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         @note: The circular buffer mode cannot be used if the memor
  96:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                                data transfer direction is configured on the selecte
  97:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
  98:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
  99:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 100:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcIncMode;  /*!< Specifies whether the Peripheral address or Source address 
 101:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         is incremented or not.
 102:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PERIPH
 103:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 104:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 105:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 106:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   uint32_t MemoryOrM2MDstIncMode;  /*!< Specifies whether the Memory address or Destination address
 107:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         is incremented or not.
 108:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MEMORY
 109:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 110:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 111:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 112:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcDataSize; /*!< Specifies the Peripheral data size alignment or Source data
 113:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 114:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PDATAALIGN
 115:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 116:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 117:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 118:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   uint32_t MemoryOrM2MDstDataSize; /*!< Specifies the Memory data size alignment or Destination dat
 119:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 120:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MDATAALIGN
 121:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 122:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 123:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 124:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   uint32_t NbData;                 /*!< Specifies the number of data to transfer, in data unit.
 125:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         The data unit is equal to the source buffer configuration s
 126:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         or MemorySize parameters depending in the transfer directio
 127:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 128:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 129:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
ARM GAS  /tmp/ccLne6l3.s 			page 95


 130:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 131:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   uint32_t Priority;               /*!< Specifies the channel priority level.
 132:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PRIORITY
 133:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 134:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 135:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 136:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** } LL_DMA_InitTypeDef;
 137:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 138:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
 139:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 140:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 141:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 142:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /* Exported constants --------------------------------------------------------*/
 143:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Constants DMA Exported Constants
 144:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 145:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 146:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CLEAR_FLAG Clear Flags Defines
 147:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief    Flags defines which can be used with LL_DMA_WriteReg function
 148:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 149:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 150:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF1                 DMA_IFCR_CGIF1        /*!< Channel 1 global flag         
 151:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF1                DMA_IFCR_CTCIF1       /*!< Channel 1 transfer complete fl
 152:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF1                DMA_IFCR_CHTIF1       /*!< Channel 1 half transfer flag  
 153:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF1                DMA_IFCR_CTEIF1       /*!< Channel 1 transfer error flag 
 154:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF2                 DMA_IFCR_CGIF2        /*!< Channel 2 global flag         
 155:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF2                DMA_IFCR_CTCIF2       /*!< Channel 2 transfer complete fl
 156:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF2                DMA_IFCR_CHTIF2       /*!< Channel 2 half transfer flag  
 157:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF2                DMA_IFCR_CTEIF2       /*!< Channel 2 transfer error flag 
 158:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF3                 DMA_IFCR_CGIF3        /*!< Channel 3 global flag         
 159:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF3                DMA_IFCR_CTCIF3       /*!< Channel 3 transfer complete fl
 160:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF3                DMA_IFCR_CHTIF3       /*!< Channel 3 half transfer flag  
 161:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF3                DMA_IFCR_CTEIF3       /*!< Channel 3 transfer error flag 
 162:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF4                 DMA_IFCR_CGIF4        /*!< Channel 4 global flag         
 163:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF4                DMA_IFCR_CTCIF4       /*!< Channel 4 transfer complete fl
 164:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF4                DMA_IFCR_CHTIF4       /*!< Channel 4 half transfer flag  
 165:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF4                DMA_IFCR_CTEIF4       /*!< Channel 4 transfer error flag 
 166:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF5                 DMA_IFCR_CGIF5        /*!< Channel 5 global flag         
 167:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF5                DMA_IFCR_CTCIF5       /*!< Channel 5 transfer complete fl
 168:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF5                DMA_IFCR_CHTIF5       /*!< Channel 5 half transfer flag  
 169:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF5                DMA_IFCR_CTEIF5       /*!< Channel 5 transfer error flag 
 170:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF6                 DMA_IFCR_CGIF6        /*!< Channel 6 global flag         
 171:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF6                DMA_IFCR_CTCIF6       /*!< Channel 6 transfer complete fl
 172:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF6                DMA_IFCR_CHTIF6       /*!< Channel 6 half transfer flag  
 173:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF6                DMA_IFCR_CTEIF6       /*!< Channel 6 transfer error flag 
 174:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF7                 DMA_IFCR_CGIF7        /*!< Channel 7 global flag         
 175:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF7                DMA_IFCR_CTCIF7       /*!< Channel 7 transfer complete fl
 176:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF7                DMA_IFCR_CHTIF7       /*!< Channel 7 half transfer flag  
 177:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF7                DMA_IFCR_CTEIF7       /*!< Channel 7 transfer error flag 
 178:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 179:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
 180:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 181:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 182:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_EC_GET_FLAG Get Flags Defines
 183:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief    Flags defines which can be used with LL_DMA_ReadReg function
 184:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 185:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 186:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_GIF1                   DMA_ISR_GIF1          /*!< Channel 1 global flag         
ARM GAS  /tmp/ccLne6l3.s 			page 96


 187:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_TCIF1                  DMA_ISR_TCIF1         /*!< Channel 1 transfer complete fl
 188:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_HTIF1                  DMA_ISR_HTIF1         /*!< Channel 1 half transfer flag  
 189:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_TEIF1                  DMA_ISR_TEIF1         /*!< Channel 1 transfer error flag 
 190:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_GIF2                   DMA_ISR_GIF2          /*!< Channel 2 global flag         
 191:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_TCIF2                  DMA_ISR_TCIF2         /*!< Channel 2 transfer complete fl
 192:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_HTIF2                  DMA_ISR_HTIF2         /*!< Channel 2 half transfer flag  
 193:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_TEIF2                  DMA_ISR_TEIF2         /*!< Channel 2 transfer error flag 
 194:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_GIF3                   DMA_ISR_GIF3          /*!< Channel 3 global flag         
 195:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_TCIF3                  DMA_ISR_TCIF3         /*!< Channel 3 transfer complete fl
 196:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_HTIF3                  DMA_ISR_HTIF3         /*!< Channel 3 half transfer flag  
 197:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_TEIF3                  DMA_ISR_TEIF3         /*!< Channel 3 transfer error flag 
 198:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_GIF4                   DMA_ISR_GIF4          /*!< Channel 4 global flag         
 199:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_TCIF4                  DMA_ISR_TCIF4         /*!< Channel 4 transfer complete fl
 200:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_HTIF4                  DMA_ISR_HTIF4         /*!< Channel 4 half transfer flag  
 201:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_TEIF4                  DMA_ISR_TEIF4         /*!< Channel 4 transfer error flag 
 202:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_GIF5                   DMA_ISR_GIF5          /*!< Channel 5 global flag         
 203:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_TCIF5                  DMA_ISR_TCIF5         /*!< Channel 5 transfer complete fl
 204:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_HTIF5                  DMA_ISR_HTIF5         /*!< Channel 5 half transfer flag  
 205:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_TEIF5                  DMA_ISR_TEIF5         /*!< Channel 5 transfer error flag 
 206:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_GIF6                   DMA_ISR_GIF6          /*!< Channel 6 global flag         
 207:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_TCIF6                  DMA_ISR_TCIF6         /*!< Channel 6 transfer complete fl
 208:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_HTIF6                  DMA_ISR_HTIF6         /*!< Channel 6 half transfer flag  
 209:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_TEIF6                  DMA_ISR_TEIF6         /*!< Channel 6 transfer error flag 
 210:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_GIF7                   DMA_ISR_GIF7          /*!< Channel 7 global flag         
 211:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_TCIF7                  DMA_ISR_TCIF7         /*!< Channel 7 transfer complete fl
 212:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_HTIF7                  DMA_ISR_HTIF7         /*!< Channel 7 half transfer flag  
 213:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ISR_TEIF7                  DMA_ISR_TEIF7         /*!< Channel 7 transfer error flag 
 214:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 215:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
 216:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 217:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 218:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_EC_IT IT Defines
 219:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief    IT defines which can be used with LL_DMA_ReadReg and  LL_DMA_WriteReg functions
 220:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 221:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 222:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_CCR_TCIE                   DMA_CCR_TCIE          /*!< Transfer complete interrupt */
 223:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_CCR_HTIE                   DMA_CCR_HTIE          /*!< Half Transfer interrupt     */
 224:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_CCR_TEIE                   DMA_CCR_TEIE          /*!< Transfer error interrupt    */
 225:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 226:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
 227:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 228:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 229:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CHANNEL CHANNEL
 230:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 231:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 232:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_CHANNEL_1                  0x00000001U /*!< DMA Channel 1 */
 233:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_CHANNEL_2                  0x00000002U /*!< DMA Channel 2 */
 234:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_CHANNEL_3                  0x00000003U /*!< DMA Channel 3 */
 235:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_CHANNEL_4                  0x00000004U /*!< DMA Channel 4 */
 236:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_CHANNEL_5                  0x00000005U /*!< DMA Channel 5 */
 237:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_CHANNEL_6                  0x00000006U /*!< DMA Channel 6 */
 238:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_CHANNEL_7                  0x00000007U /*!< DMA Channel 7 */
 239:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
 240:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_CHANNEL_ALL                0xFFFF0000U /*!< DMA Channel all (used only for function 
 241:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 242:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 243:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
ARM GAS  /tmp/ccLne6l3.s 			page 97


 244:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 245:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 246:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_EC_DIRECTION Transfer Direction
 247:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 248:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 249:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_DIRECTION_PERIPH_TO_MEMORY 0x00000000U             /*!< Peripheral to memory directi
 250:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_PERIPH DMA_CCR_DIR             /*!< Memory to peripheral directi
 251:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_MEMORY DMA_CCR_MEM2MEM         /*!< Memory to memory direction  
 252:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 253:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
 254:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 255:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 256:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MODE Transfer mode
 257:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 258:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 259:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_MODE_NORMAL                0x00000000U             /*!< Normal Mode                 
 260:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_MODE_CIRCULAR              DMA_CCR_CIRC            /*!< Circular Mode               
 261:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 262:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
 263:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 264:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 265:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PERIPH Peripheral increment mode
 266:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 267:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 268:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_PERIPH_INCREMENT           DMA_CCR_PINC            /*!< Peripheral increment mode En
 269:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_PERIPH_NOINCREMENT         0x00000000U             /*!< Peripheral increment mode Di
 270:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 271:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
 272:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 273:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 274:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MEMORY Memory increment mode
 275:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 276:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 277:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_MEMORY_INCREMENT           DMA_CCR_MINC            /*!< Memory increment mode Enable
 278:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_MEMORY_NOINCREMENT         0x00000000U             /*!< Memory increment mode Disabl
 279:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 280:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
 281:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 282:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 283:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PDATAALIGN Peripheral data alignment
 284:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 285:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 286:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_BYTE            0x00000000U             /*!< Peripheral data alignment : 
 287:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_HALFWORD        DMA_CCR_PSIZE_0         /*!< Peripheral data alignment : 
 288:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_WORD            DMA_CCR_PSIZE_1         /*!< Peripheral data alignment : 
 289:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 290:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
 291:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 292:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 293:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MDATAALIGN Memory data alignment
 294:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 295:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 296:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_BYTE            0x00000000U             /*!< Memory data alignment : Byte
 297:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_HALFWORD        DMA_CCR_MSIZE_0         /*!< Memory data alignment : Half
 298:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_WORD            DMA_CCR_MSIZE_1         /*!< Memory data alignment : Word
 299:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 300:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
ARM GAS  /tmp/ccLne6l3.s 			page 98


 301:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 302:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 303:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PRIORITY Transfer Priority level
 304:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 305:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 306:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_PRIORITY_LOW               0x00000000U             /*!< Priority level : Low       *
 307:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_PRIORITY_MEDIUM            DMA_CCR_PL_0            /*!< Priority level : Medium    *
 308:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_PRIORITY_HIGH              DMA_CCR_PL_1            /*!< Priority level : High      *
 309:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_PRIORITY_VERYHIGH          DMA_CCR_PL              /*!< Priority level : Very_High *
 310:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 311:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
 312:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 313:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 314:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 315:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
 316:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 317:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 318:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /* Exported macro ------------------------------------------------------------*/
 319:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Macros DMA Exported Macros
 320:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 321:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 322:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 323:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_EM_WRITE_READ Common Write and read registers macros
 324:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 325:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 326:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 327:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Write a value in DMA register
 328:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 329:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  __REG__ Register to be written
 330:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  __VALUE__ Value to be written in the register
 331:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval None
 332:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 333:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 334:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 335:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 336:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Read a value in DMA register
 337:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 338:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  __REG__ Register to be read
 339:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval Register value
 340:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 341:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define LL_DMA_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 342:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 343:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
 344:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 345:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 346:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_EM_CONVERT_DMAxCHANNELy Convert DMAxChannely
 347:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 348:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 349:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 350:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 351:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Convert DMAx_Channely into DMAx
 352:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  __CHANNEL_INSTANCE__ DMAx_Channely
 353:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval DMAx
 354:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 355:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #if defined(DMA2)
 356:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)   \
 357:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) > ((uint32_t)DMA1_Channel7)) ?  DMA2 : DMA1)
ARM GAS  /tmp/ccLne6l3.s 			page 99


 358:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #else
 359:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)  (DMA1)
 360:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #endif
 361:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 362:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 363:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Convert DMAx_Channely into LL_DMA_CHANNEL_y
 364:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  __CHANNEL_INSTANCE__ DMAx_Channely
 365:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval LL_DMA_CHANNEL_y
 366:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 367:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #if defined (DMA2)
 368:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 369:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 370:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel1)) ? LL_DMA_CHANNEL_1 : \
 371:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 372:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel2)) ? LL_DMA_CHANNEL_2 : \
 373:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 374:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel3)) ? LL_DMA_CHANNEL_3 : \
 375:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 376:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel4)) ? LL_DMA_CHANNEL_4 : \
 377:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 378:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel5)) ? LL_DMA_CHANNEL_5 : \
 379:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 380:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 381:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #else
 382:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 383:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 384:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 385:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 386:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 387:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 388:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 389:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 390:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #endif
 391:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 392:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 393:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Convert DMA Instance DMAx and LL_DMA_CHANNEL_y into DMAx_Channely
 394:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  __DMA_INSTANCE__ DMAx
 395:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  __CHANNEL__ LL_DMA_CHANNEL_y
 396:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval DMAx_Channely
 397:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 398:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #if defined (DMA2)
 399:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 400:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 401:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 402:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 403:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 404:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 405:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 406:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 407:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 408:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 409:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 410:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 411:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  DMA1_Channel7)
 412:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #else
 413:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 414:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
ARM GAS  /tmp/ccLne6l3.s 			page 100


 415:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 416:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 417:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 418:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 419:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 420:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  DMA1_Channel7)
 421:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** #endif
 422:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 423:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 424:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
 425:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 426:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 427:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 428:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @}
 429:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 430:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 431:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /* Exported functions --------------------------------------------------------*/
 432:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Functions DMA Exported Functions
 433:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  * @{
 434:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****  */
 435:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 436:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /** @defgroup DMA_LL_EF_Configuration Configuration
 437:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @{
 438:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 439:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 440:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Enable DMA channel.
 441:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_EnableChannel
 442:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 443:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 444:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 445:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 446:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 447:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 448:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 449:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 450:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 451:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval None
 452:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 453:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 454:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 455:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))-
 456:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 457:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 458:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 459:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Disable DMA channel.
 460:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_DisableChannel
 461:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 462:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 463:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 464:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 465:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 466:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 467:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 468:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 469:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 470:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval None
 471:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
ARM GAS  /tmp/ccLne6l3.s 			page 101


 472:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 473:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 474:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]))
 475:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 476:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 477:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 478:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Check if DMA channel is enabled or disabled.
 479:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_IsEnabledChannel
 480:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 481:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 482:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 483:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 484:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 485:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 486:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 487:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 488:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 489:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval State of bit (1 or 0).
 490:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 491:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsEnabledChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 492:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 493:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 494:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                    DMA_CCR_EN) == (DMA_CCR_EN));
 495:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 496:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 497:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 498:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Configure all parameters link to DMA transfer.
 499:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_ConfigTransfer\n
 500:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_ConfigTransfer\n
 501:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         CCR          CIRC          LL_DMA_ConfigTransfer\n
 502:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         CCR          PINC          LL_DMA_ConfigTransfer\n
 503:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         CCR          MINC          LL_DMA_ConfigTransfer\n
 504:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         CCR          PSIZE         LL_DMA_ConfigTransfer\n
 505:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         CCR          MSIZE         LL_DMA_ConfigTransfer\n
 506:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         CCR          PL            LL_DMA_ConfigTransfer
 507:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 508:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 509:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 510:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 511:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 512:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 513:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 514:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 515:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 516:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Configuration This parameter must be a combination of all the following values:
 517:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY or @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH o
 518:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL or @ref LL_DMA_MODE_CIRCULAR
 519:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT or @ref LL_DMA_PERIPH_NOINCREMENT
 520:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT or @ref LL_DMA_MEMORY_NOINCREMENT
 521:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE or @ref LL_DMA_PDATAALIGN_HALFWORD or @ref LL_DMA_PDAT
 522:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDAT
 523:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HI
 524:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval None
 525:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 526:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configurat
 527:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 528:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
ARM GAS  /tmp/ccLne6l3.s 			page 102


 529:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_P
 530:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****              Configuration);
 531:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 532:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 533:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 534:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Set Data transfer direction (read from peripheral or from memory).
 535:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_SetDataTransferDirection\n
 536:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_SetDataTransferDirection
 537:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 538:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 539:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 540:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 541:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 542:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 543:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 544:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 545:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 546:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
 547:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 548:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 549:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 550:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval None
 551:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 552:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t 
 553:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 638              		.loc 3 553 1
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 16
 641              		@ frame_needed = 1, uses_anonymous_args = 0
 642              		@ link register save eliminated.
 643 0000 80B4     		push	{r7}
 644              	.LCFI60:
 645              		.cfi_def_cfa_offset 4
 646              		.cfi_offset 7, -4
 647 0002 85B0     		sub	sp, sp, #20
 648              	.LCFI61:
 649              		.cfi_def_cfa_offset 24
 650 0004 00AF     		add	r7, sp, #0
 651              	.LCFI62:
 652              		.cfi_def_cfa_register 7
 653 0006 F860     		str	r0, [r7, #12]
 654 0008 B960     		str	r1, [r7, #8]
 655 000a 7A60     		str	r2, [r7, #4]
 554:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 656              		.loc 3 554 3
 657 000c BB68     		ldr	r3, [r7, #8]
 658 000e 013B     		subs	r3, r3, #1
 659 0010 0C4A     		ldr	r2, .L19
 660 0012 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 661 0014 1A46     		mov	r2, r3
 662 0016 FB68     		ldr	r3, [r7, #12]
 663 0018 1344     		add	r3, r3, r2
 664 001a 1B68     		ldr	r3, [r3]
 665 001c 23F48043 		bic	r3, r3, #16384
 666 0020 23F01003 		bic	r3, r3, #16
 667 0024 BA68     		ldr	r2, [r7, #8]
 668 0026 013A     		subs	r2, r2, #1
ARM GAS  /tmp/ccLne6l3.s 			page 103


 669 0028 0649     		ldr	r1, .L19
 670 002a 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 671 002c 1146     		mov	r1, r2
 672 002e FA68     		ldr	r2, [r7, #12]
 673 0030 0A44     		add	r2, r2, r1
 674 0032 1146     		mov	r1, r2
 675 0034 7A68     		ldr	r2, [r7, #4]
 676 0036 1343     		orrs	r3, r3, r2
 677 0038 0B60     		str	r3, [r1]
 555:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
 556:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 678              		.loc 3 556 1
 679 003a 00BF     		nop
 680 003c 1437     		adds	r7, r7, #20
 681              	.LCFI63:
 682              		.cfi_def_cfa_offset 4
 683 003e BD46     		mov	sp, r7
 684              	.LCFI64:
 685              		.cfi_def_cfa_register 13
 686              		@ sp needed
 687 0040 80BC     		pop	{r7}
 688              	.LCFI65:
 689              		.cfi_restore 7
 690              		.cfi_def_cfa_offset 0
 691 0042 7047     		bx	lr
 692              	.L20:
 693              		.align	2
 694              	.L19:
 695 0044 00000000 		.word	CHANNEL_OFFSET_TAB
 696              		.cfi_endproc
 697              	.LFE147:
 699              		.section	.text.LL_DMA_SetMode,"ax",%progbits
 700              		.align	1
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 705              	LL_DMA_SetMode:
 706              	.LFB149:
 557:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 558:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 559:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Get Data transfer direction (read from peripheral or from memory).
 560:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_GetDataTransferDirection\n
 561:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_GetDataTransferDirection
 562:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 563:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 564:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 565:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 566:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 567:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 568:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 569:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 570:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 571:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 572:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 573:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 574:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 575:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
ARM GAS  /tmp/ccLne6l3.s 			page 104


 576:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
 577:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 578:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 579:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                    DMA_CCR_DIR | DMA_CCR_MEM2MEM));
 580:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 581:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 582:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 583:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Set DMA mode circular or normal.
 584:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @note The circular buffer mode cannot be used if the memory-to-memory
 585:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * data transfer is configured on the selected Channel.
 586:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          CIRC          LL_DMA_SetMode
 587:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 588:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 589:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 590:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 591:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 592:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 593:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 594:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 595:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 596:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Mode This parameter can be one of the following values:
 597:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 598:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 599:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval None
 600:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 601:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
 602:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 707              		.loc 3 602 1
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 16
 710              		@ frame_needed = 1, uses_anonymous_args = 0
 711              		@ link register save eliminated.
 712 0000 80B4     		push	{r7}
 713              	.LCFI66:
 714              		.cfi_def_cfa_offset 4
 715              		.cfi_offset 7, -4
 716 0002 85B0     		sub	sp, sp, #20
 717              	.LCFI67:
 718              		.cfi_def_cfa_offset 24
 719 0004 00AF     		add	r7, sp, #0
 720              	.LCFI68:
 721              		.cfi_def_cfa_register 7
 722 0006 F860     		str	r0, [r7, #12]
 723 0008 B960     		str	r1, [r7, #8]
 724 000a 7A60     		str	r2, [r7, #4]
 603:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 725              		.loc 3 603 3
 726 000c BB68     		ldr	r3, [r7, #8]
 727 000e 013B     		subs	r3, r3, #1
 728 0010 0B4A     		ldr	r2, .L22
 729 0012 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 730 0014 1A46     		mov	r2, r3
 731 0016 FB68     		ldr	r3, [r7, #12]
 732 0018 1344     		add	r3, r3, r2
 733 001a 1B68     		ldr	r3, [r3]
 734 001c 23F02002 		bic	r2, r3, #32
 735 0020 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccLne6l3.s 			page 105


 736 0022 013B     		subs	r3, r3, #1
 737 0024 0649     		ldr	r1, .L22
 738 0026 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 739 0028 1946     		mov	r1, r3
 740 002a FB68     		ldr	r3, [r7, #12]
 741 002c 0B44     		add	r3, r3, r1
 742 002e 1946     		mov	r1, r3
 743 0030 7B68     		ldr	r3, [r7, #4]
 744 0032 1343     		orrs	r3, r3, r2
 745 0034 0B60     		str	r3, [r1]
 604:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****              Mode);
 605:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 746              		.loc 3 605 1
 747 0036 00BF     		nop
 748 0038 1437     		adds	r7, r7, #20
 749              	.LCFI69:
 750              		.cfi_def_cfa_offset 4
 751 003a BD46     		mov	sp, r7
 752              	.LCFI70:
 753              		.cfi_def_cfa_register 13
 754              		@ sp needed
 755 003c 80BC     		pop	{r7}
 756              	.LCFI71:
 757              		.cfi_restore 7
 758              		.cfi_def_cfa_offset 0
 759 003e 7047     		bx	lr
 760              	.L23:
 761              		.align	2
 762              	.L22:
 763 0040 00000000 		.word	CHANNEL_OFFSET_TAB
 764              		.cfi_endproc
 765              	.LFE149:
 767              		.section	.text.LL_DMA_SetPeriphIncMode,"ax",%progbits
 768              		.align	1
 769              		.syntax unified
 770              		.thumb
 771              		.thumb_func
 773              	LL_DMA_SetPeriphIncMode:
 774              	.LFB151:
 606:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 607:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 608:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Get DMA mode circular or normal.
 609:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          CIRC          LL_DMA_GetMode
 610:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 611:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 612:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 613:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 614:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 615:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 616:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 617:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 618:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 619:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 620:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 621:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 622:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 623:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
ARM GAS  /tmp/ccLne6l3.s 			page 106


 624:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 625:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 626:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                    DMA_CCR_CIRC));
 627:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 628:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 629:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 630:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Set Peripheral increment mode.
 631:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          PINC          LL_DMA_SetPeriphIncMode
 632:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 633:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 634:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 635:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 636:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 637:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 638:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 639:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 640:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 641:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  PeriphOrM2MSrcIncMode This parameter can be one of the following values:
 642:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 643:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 644:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval None
 645:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 646:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOr
 647:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 775              		.loc 3 647 1
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 16
 778              		@ frame_needed = 1, uses_anonymous_args = 0
 779              		@ link register save eliminated.
 780 0000 80B4     		push	{r7}
 781              	.LCFI72:
 782              		.cfi_def_cfa_offset 4
 783              		.cfi_offset 7, -4
 784 0002 85B0     		sub	sp, sp, #20
 785              	.LCFI73:
 786              		.cfi_def_cfa_offset 24
 787 0004 00AF     		add	r7, sp, #0
 788              	.LCFI74:
 789              		.cfi_def_cfa_register 7
 790 0006 F860     		str	r0, [r7, #12]
 791 0008 B960     		str	r1, [r7, #8]
 792 000a 7A60     		str	r2, [r7, #4]
 648:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 793              		.loc 3 648 3
 794 000c BB68     		ldr	r3, [r7, #8]
 795 000e 013B     		subs	r3, r3, #1
 796 0010 0B4A     		ldr	r2, .L25
 797 0012 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 798 0014 1A46     		mov	r2, r3
 799 0016 FB68     		ldr	r3, [r7, #12]
 800 0018 1344     		add	r3, r3, r2
 801 001a 1B68     		ldr	r3, [r3]
 802 001c 23F04002 		bic	r2, r3, #64
 803 0020 BB68     		ldr	r3, [r7, #8]
 804 0022 013B     		subs	r3, r3, #1
 805 0024 0649     		ldr	r1, .L25
 806 0026 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccLne6l3.s 			page 107


 807 0028 1946     		mov	r1, r3
 808 002a FB68     		ldr	r3, [r7, #12]
 809 002c 0B44     		add	r3, r3, r1
 810 002e 1946     		mov	r1, r3
 811 0030 7B68     		ldr	r3, [r7, #4]
 812 0032 1343     		orrs	r3, r3, r2
 813 0034 0B60     		str	r3, [r1]
 649:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 650:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 814              		.loc 3 650 1
 815 0036 00BF     		nop
 816 0038 1437     		adds	r7, r7, #20
 817              	.LCFI75:
 818              		.cfi_def_cfa_offset 4
 819 003a BD46     		mov	sp, r7
 820              	.LCFI76:
 821              		.cfi_def_cfa_register 13
 822              		@ sp needed
 823 003c 80BC     		pop	{r7}
 824              	.LCFI77:
 825              		.cfi_restore 7
 826              		.cfi_def_cfa_offset 0
 827 003e 7047     		bx	lr
 828              	.L26:
 829              		.align	2
 830              	.L25:
 831 0040 00000000 		.word	CHANNEL_OFFSET_TAB
 832              		.cfi_endproc
 833              	.LFE151:
 835              		.section	.text.LL_DMA_SetMemoryIncMode,"ax",%progbits
 836              		.align	1
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 841              	LL_DMA_SetMemoryIncMode:
 842              	.LFB153:
 651:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 652:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 653:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Get Peripheral increment mode.
 654:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          PINC          LL_DMA_GetPeriphIncMode
 655:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 656:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 657:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 658:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 659:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 660:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 661:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 662:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 663:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 664:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 665:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 666:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 667:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 668:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
 669:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 670:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 671:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                    DMA_CCR_PINC));
ARM GAS  /tmp/ccLne6l3.s 			page 108


 672:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 673:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 674:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 675:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Set Memory increment mode.
 676:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          MINC          LL_DMA_SetMemoryIncMode
 677:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 678:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 679:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 680:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 681:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 682:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 683:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 684:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 685:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 686:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  MemoryOrM2MDstIncMode This parameter can be one of the following values:
 687:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 688:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 689:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval None
 690:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 691:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOr
 692:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 843              		.loc 3 692 1
 844              		.cfi_startproc
 845              		@ args = 0, pretend = 0, frame = 16
 846              		@ frame_needed = 1, uses_anonymous_args = 0
 847              		@ link register save eliminated.
 848 0000 80B4     		push	{r7}
 849              	.LCFI78:
 850              		.cfi_def_cfa_offset 4
 851              		.cfi_offset 7, -4
 852 0002 85B0     		sub	sp, sp, #20
 853              	.LCFI79:
 854              		.cfi_def_cfa_offset 24
 855 0004 00AF     		add	r7, sp, #0
 856              	.LCFI80:
 857              		.cfi_def_cfa_register 7
 858 0006 F860     		str	r0, [r7, #12]
 859 0008 B960     		str	r1, [r7, #8]
 860 000a 7A60     		str	r2, [r7, #4]
 693:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 861              		.loc 3 693 3
 862 000c BB68     		ldr	r3, [r7, #8]
 863 000e 013B     		subs	r3, r3, #1
 864 0010 0B4A     		ldr	r2, .L28
 865 0012 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 866 0014 1A46     		mov	r2, r3
 867 0016 FB68     		ldr	r3, [r7, #12]
 868 0018 1344     		add	r3, r3, r2
 869 001a 1B68     		ldr	r3, [r3]
 870 001c 23F08002 		bic	r2, r3, #128
 871 0020 BB68     		ldr	r3, [r7, #8]
 872 0022 013B     		subs	r3, r3, #1
 873 0024 0649     		ldr	r1, .L28
 874 0026 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 875 0028 1946     		mov	r1, r3
 876 002a FB68     		ldr	r3, [r7, #12]
 877 002c 0B44     		add	r3, r3, r1
ARM GAS  /tmp/ccLne6l3.s 			page 109


 878 002e 1946     		mov	r1, r3
 879 0030 7B68     		ldr	r3, [r7, #4]
 880 0032 1343     		orrs	r3, r3, r2
 881 0034 0B60     		str	r3, [r1]
 694:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 695:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 882              		.loc 3 695 1
 883 0036 00BF     		nop
 884 0038 1437     		adds	r7, r7, #20
 885              	.LCFI81:
 886              		.cfi_def_cfa_offset 4
 887 003a BD46     		mov	sp, r7
 888              	.LCFI82:
 889              		.cfi_def_cfa_register 13
 890              		@ sp needed
 891 003c 80BC     		pop	{r7}
 892              	.LCFI83:
 893              		.cfi_restore 7
 894              		.cfi_def_cfa_offset 0
 895 003e 7047     		bx	lr
 896              	.L29:
 897              		.align	2
 898              	.L28:
 899 0040 00000000 		.word	CHANNEL_OFFSET_TAB
 900              		.cfi_endproc
 901              	.LFE153:
 903              		.section	.text.LL_DMA_SetPeriphSize,"ax",%progbits
 904              		.align	1
 905              		.syntax unified
 906              		.thumb
 907              		.thumb_func
 909              	LL_DMA_SetPeriphSize:
 910              	.LFB155:
 696:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 697:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 698:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Get Memory increment mode.
 699:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          MINC          LL_DMA_GetMemoryIncMode
 700:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 701:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 702:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 703:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 704:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 705:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 706:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 707:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 708:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 709:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 710:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 711:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 712:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 713:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
 714:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 715:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 716:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                    DMA_CCR_MINC));
 717:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 718:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 719:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
ARM GAS  /tmp/ccLne6l3.s 			page 110


 720:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Set Peripheral size.
 721:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          PSIZE         LL_DMA_SetPeriphSize
 722:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 723:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 724:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 725:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 726:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 727:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 728:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 729:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 730:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 731:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  PeriphOrM2MSrcDataSize This parameter can be one of the following values:
 732:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 733:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 734:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 735:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval None
 736:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 737:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2M
 738:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 911              		.loc 3 738 1
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 16
 914              		@ frame_needed = 1, uses_anonymous_args = 0
 915              		@ link register save eliminated.
 916 0000 80B4     		push	{r7}
 917              	.LCFI84:
 918              		.cfi_def_cfa_offset 4
 919              		.cfi_offset 7, -4
 920 0002 85B0     		sub	sp, sp, #20
 921              	.LCFI85:
 922              		.cfi_def_cfa_offset 24
 923 0004 00AF     		add	r7, sp, #0
 924              	.LCFI86:
 925              		.cfi_def_cfa_register 7
 926 0006 F860     		str	r0, [r7, #12]
 927 0008 B960     		str	r1, [r7, #8]
 928 000a 7A60     		str	r2, [r7, #4]
 739:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 929              		.loc 3 739 3
 930 000c BB68     		ldr	r3, [r7, #8]
 931 000e 013B     		subs	r3, r3, #1
 932 0010 0B4A     		ldr	r2, .L31
 933 0012 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 934 0014 1A46     		mov	r2, r3
 935 0016 FB68     		ldr	r3, [r7, #12]
 936 0018 1344     		add	r3, r3, r2
 937 001a 1B68     		ldr	r3, [r3]
 938 001c 23F44072 		bic	r2, r3, #768
 939 0020 BB68     		ldr	r3, [r7, #8]
 940 0022 013B     		subs	r3, r3, #1
 941 0024 0649     		ldr	r1, .L31
 942 0026 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 943 0028 1946     		mov	r1, r3
 944 002a FB68     		ldr	r3, [r7, #12]
 945 002c 0B44     		add	r3, r3, r1
 946 002e 1946     		mov	r1, r3
 947 0030 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccLne6l3.s 			page 111


 948 0032 1343     		orrs	r3, r3, r2
 949 0034 0B60     		str	r3, [r1]
 740:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 741:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 950              		.loc 3 741 1
 951 0036 00BF     		nop
 952 0038 1437     		adds	r7, r7, #20
 953              	.LCFI87:
 954              		.cfi_def_cfa_offset 4
 955 003a BD46     		mov	sp, r7
 956              	.LCFI88:
 957              		.cfi_def_cfa_register 13
 958              		@ sp needed
 959 003c 80BC     		pop	{r7}
 960              	.LCFI89:
 961              		.cfi_restore 7
 962              		.cfi_def_cfa_offset 0
 963 003e 7047     		bx	lr
 964              	.L32:
 965              		.align	2
 966              	.L31:
 967 0040 00000000 		.word	CHANNEL_OFFSET_TAB
 968              		.cfi_endproc
 969              	.LFE155:
 971              		.section	.text.LL_DMA_SetMemorySize,"ax",%progbits
 972              		.align	1
 973              		.syntax unified
 974              		.thumb
 975              		.thumb_func
 977              	LL_DMA_SetMemorySize:
 978              	.LFB157:
 742:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 743:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 744:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Get Peripheral size.
 745:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          PSIZE         LL_DMA_GetPeriphSize
 746:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 747:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 748:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 749:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 750:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 751:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 752:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 753:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 754:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 755:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 756:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 757:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 758:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 759:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 760:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel)
 761:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 762:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 763:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                    DMA_CCR_PSIZE));
 764:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 765:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 766:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 767:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Set Memory size.
ARM GAS  /tmp/ccLne6l3.s 			page 112


 768:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          MSIZE         LL_DMA_SetMemorySize
 769:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 770:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 771:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 772:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 773:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 774:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 775:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 776:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 777:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 778:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  MemoryOrM2MDstDataSize This parameter can be one of the following values:
 779:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 780:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 781:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 782:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval None
 783:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 784:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2M
 785:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 979              		.loc 3 785 1
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 16
 982              		@ frame_needed = 1, uses_anonymous_args = 0
 983              		@ link register save eliminated.
 984 0000 80B4     		push	{r7}
 985              	.LCFI90:
 986              		.cfi_def_cfa_offset 4
 987              		.cfi_offset 7, -4
 988 0002 85B0     		sub	sp, sp, #20
 989              	.LCFI91:
 990              		.cfi_def_cfa_offset 24
 991 0004 00AF     		add	r7, sp, #0
 992              	.LCFI92:
 993              		.cfi_def_cfa_register 7
 994 0006 F860     		str	r0, [r7, #12]
 995 0008 B960     		str	r1, [r7, #8]
 996 000a 7A60     		str	r2, [r7, #4]
 786:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 997              		.loc 3 786 3
 998 000c BB68     		ldr	r3, [r7, #8]
 999 000e 013B     		subs	r3, r3, #1
 1000 0010 0B4A     		ldr	r2, .L34
 1001 0012 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1002 0014 1A46     		mov	r2, r3
 1003 0016 FB68     		ldr	r3, [r7, #12]
 1004 0018 1344     		add	r3, r3, r2
 1005 001a 1B68     		ldr	r3, [r3]
 1006 001c 23F44062 		bic	r2, r3, #3072
 1007 0020 BB68     		ldr	r3, [r7, #8]
 1008 0022 013B     		subs	r3, r3, #1
 1009 0024 0649     		ldr	r1, .L34
 1010 0026 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 1011 0028 1946     		mov	r1, r3
 1012 002a FB68     		ldr	r3, [r7, #12]
 1013 002c 0B44     		add	r3, r3, r1
 1014 002e 1946     		mov	r1, r3
 1015 0030 7B68     		ldr	r3, [r7, #4]
 1016 0032 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccLne6l3.s 			page 113


 1017 0034 0B60     		str	r3, [r1]
 787:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 788:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 1018              		.loc 3 788 1
 1019 0036 00BF     		nop
 1020 0038 1437     		adds	r7, r7, #20
 1021              	.LCFI93:
 1022              		.cfi_def_cfa_offset 4
 1023 003a BD46     		mov	sp, r7
 1024              	.LCFI94:
 1025              		.cfi_def_cfa_register 13
 1026              		@ sp needed
 1027 003c 80BC     		pop	{r7}
 1028              	.LCFI95:
 1029              		.cfi_restore 7
 1030              		.cfi_def_cfa_offset 0
 1031 003e 7047     		bx	lr
 1032              	.L35:
 1033              		.align	2
 1034              	.L34:
 1035 0040 00000000 		.word	CHANNEL_OFFSET_TAB
 1036              		.cfi_endproc
 1037              	.LFE157:
 1039              		.section	.text.LL_DMA_SetChannelPriorityLevel,"ax",%progbits
 1040              		.align	1
 1041              		.syntax unified
 1042              		.thumb
 1043              		.thumb_func
 1045              	LL_DMA_SetChannelPriorityLevel:
 1046              	.LFB159:
 789:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 790:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 791:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Get Memory size.
 792:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          MSIZE         LL_DMA_GetMemorySize
 793:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 794:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 795:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 796:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 797:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 798:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 799:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 800:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 801:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 802:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 803:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 804:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 805:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 806:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 807:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel)
 808:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 809:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 810:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****                    DMA_CCR_MSIZE));
 811:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 812:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** 
 813:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** /**
 814:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @brief  Set Channel priority level.
 815:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @rmtoll CCR          PL            LL_DMA_SetChannelPriorityLevel
ARM GAS  /tmp/ccLne6l3.s 			page 114


 816:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 817:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 818:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 819:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 820:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 821:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 822:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 823:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 824:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 825:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @param  Priority This parameter can be one of the following values:
 826:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 827:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 828:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 829:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 830:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   * @retval None
 831:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   */
 832:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t P
 833:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** {
 1047              		.loc 3 833 1
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 16
 1050              		@ frame_needed = 1, uses_anonymous_args = 0
 1051              		@ link register save eliminated.
 1052 0000 80B4     		push	{r7}
 1053              	.LCFI96:
 1054              		.cfi_def_cfa_offset 4
 1055              		.cfi_offset 7, -4
 1056 0002 85B0     		sub	sp, sp, #20
 1057              	.LCFI97:
 1058              		.cfi_def_cfa_offset 24
 1059 0004 00AF     		add	r7, sp, #0
 1060              	.LCFI98:
 1061              		.cfi_def_cfa_register 7
 1062 0006 F860     		str	r0, [r7, #12]
 1063 0008 B960     		str	r1, [r7, #8]
 1064 000a 7A60     		str	r2, [r7, #4]
 834:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 1065              		.loc 3 834 3
 1066 000c BB68     		ldr	r3, [r7, #8]
 1067 000e 013B     		subs	r3, r3, #1
 1068 0010 0B4A     		ldr	r2, .L37
 1069 0012 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1070 0014 1A46     		mov	r2, r3
 1071 0016 FB68     		ldr	r3, [r7, #12]
 1072 0018 1344     		add	r3, r3, r2
 1073 001a 1B68     		ldr	r3, [r3]
 1074 001c 23F44052 		bic	r2, r3, #12288
 1075 0020 BB68     		ldr	r3, [r7, #8]
 1076 0022 013B     		subs	r3, r3, #1
 1077 0024 0649     		ldr	r1, .L37
 1078 0026 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 1079 0028 1946     		mov	r1, r3
 1080 002a FB68     		ldr	r3, [r7, #12]
 1081 002c 0B44     		add	r3, r3, r1
 1082 002e 1946     		mov	r1, r3
 1083 0030 7B68     		ldr	r3, [r7, #4]
 1084 0032 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccLne6l3.s 			page 115


 1085 0034 0B60     		str	r3, [r1]
 835:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h ****              Priority);
 836:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_dma.h **** }
 1086              		.loc 3 836 1
 1087 0036 00BF     		nop
 1088 0038 1437     		adds	r7, r7, #20
 1089              	.LCFI99:
 1090              		.cfi_def_cfa_offset 4
 1091 003a BD46     		mov	sp, r7
 1092              	.LCFI100:
 1093              		.cfi_def_cfa_register 13
 1094              		@ sp needed
 1095 003c 80BC     		pop	{r7}
 1096              	.LCFI101:
 1097              		.cfi_restore 7
 1098              		.cfi_def_cfa_offset 0
 1099 003e 7047     		bx	lr
 1100              	.L38:
 1101              		.align	2
 1102              	.L37:
 1103 0040 00000000 		.word	CHANNEL_OFFSET_TAB
 1104              		.cfi_endproc
 1105              	.LFE159:
 1107              		.section	.rodata.OFFSET_TAB_CCMRx,"a"
 1108              		.align	2
 1111              	OFFSET_TAB_CCMRx:
 1112 0000 00000000 		.ascii	"\000\000\000\000\004\004\004"
 1112      040404
 1113              		.section	.rodata.SHIFT_TAB_OCxx,"a"
 1114              		.align	2
 1117              	SHIFT_TAB_OCxx:
 1118 0000 00000800 		.ascii	"\000\000\010\000\000\000\010"
 1118      000008
 1119              		.section	.rodata.SHIFT_TAB_ICxx,"a"
 1120              		.align	2
 1123              	SHIFT_TAB_ICxx:
 1124 0000 00000800 		.ascii	"\000\000\010\000\000\000\010"
 1124      000008
 1125              		.section	.rodata.SHIFT_TAB_CCxP,"a"
 1126              		.align	2
 1129              	SHIFT_TAB_CCxP:
 1130 0000 00020406 		.ascii	"\000\002\004\006\010\012\014"
 1130      080A0C
 1131              		.section	.rodata.SHIFT_TAB_OISx,"a"
 1132              		.align	2
 1135              	SHIFT_TAB_OISx:
 1136 0000 00010203 		.ascii	"\000\001\002\003\004\005\006"
 1136      040506
 1137              		.section	.text.LL_TIM_EnableCounter,"ax",%progbits
 1138              		.align	1
 1139              		.syntax unified
 1140              		.thumb
 1141              		.thumb_func
 1143              	LL_TIM_EnableCounter:
 1144              	.LFB237:
 1145              		.file 4 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h"
   1:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
ARM GAS  /tmp/ccLne6l3.s 			page 116


   2:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @file    stm32f1xx_ll_tim.h
   4:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief   Header file of TIM LL module.
   6:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   ******************************************************************************
   7:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @attention
   8:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *
   9:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * All rights reserved.
  11:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *
  12:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * in the root directory of this software component.
  14:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *
  16:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   ******************************************************************************
  17:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
  18:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
  19:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #ifndef __STM32F1xx_LL_TIM_H
  21:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define __STM32F1xx_LL_TIM_H
  22:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
  23:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #ifdef __cplusplus
  24:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** extern "C" {
  25:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #endif
  26:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
  27:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #include "stm32f1xx.h"
  29:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
  30:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @addtogroup STM32F1xx_LL_Driver
  31:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
  32:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
  33:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
  34:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #if defined (TIM1) || defined (TIM2) || defined (TIM3) || defined (TIM4) || defined (TIM5) || defin
  35:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
  36:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL TIM
  37:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
  38:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
  39:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
  40:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Variables TIM Private Variables
  43:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
  44:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
  45:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** static const uint8_t OFFSET_TAB_CCMRx[] =
  46:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
  47:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0x00U,   /* 0: TIMx_CH1  */
  48:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0x00U,   /* 1: TIMx_CH1N */
  49:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0x00U,   /* 2: TIMx_CH2  */
  50:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0x00U,   /* 3: TIMx_CH2N */
  51:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0x04U,   /* 4: TIMx_CH3  */
  52:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0x04U,   /* 5: TIMx_CH3N */
  53:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0x04U    /* 6: TIMx_CH4  */
  54:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** };
  55:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
  56:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** static const uint8_t SHIFT_TAB_OCxx[] =
  57:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
  58:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0U,            /* 0: OC1M, OC1FE, OC1PE */
ARM GAS  /tmp/ccLne6l3.s 			page 117


  59:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0U,            /* 1: - NA */
  60:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   8U,            /* 2: OC2M, OC2FE, OC2PE */
  61:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0U,            /* 3: - NA */
  62:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0U,            /* 4: OC3M, OC3FE, OC3PE */
  63:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0U,            /* 5: - NA */
  64:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   8U             /* 6: OC4M, OC4FE, OC4PE */
  65:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** };
  66:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
  67:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** static const uint8_t SHIFT_TAB_ICxx[] =
  68:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
  69:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0U,            /* 0: CC1S, IC1PSC, IC1F */
  70:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0U,            /* 1: - NA */
  71:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   8U,            /* 2: CC2S, IC2PSC, IC2F */
  72:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0U,            /* 3: - NA */
  73:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0U,            /* 4: CC3S, IC3PSC, IC3F */
  74:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0U,            /* 5: - NA */
  75:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   8U             /* 6: CC4S, IC4PSC, IC4F */
  76:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** };
  77:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
  78:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** static const uint8_t SHIFT_TAB_CCxP[] =
  79:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
  80:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0U,            /* 0: CC1P */
  81:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   2U,            /* 1: CC1NP */
  82:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   4U,            /* 2: CC2P */
  83:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   6U,            /* 3: CC2NP */
  84:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   8U,            /* 4: CC3P */
  85:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   10U,           /* 5: CC3NP */
  86:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   12U            /* 6: CC4P */
  87:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** };
  88:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
  89:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** static const uint8_t SHIFT_TAB_OISx[] =
  90:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
  91:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   0U,            /* 0: OIS1 */
  92:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   1U,            /* 1: OIS1N */
  93:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   2U,            /* 2: OIS2 */
  94:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   3U,            /* 3: OIS2N */
  95:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   4U,            /* 4: OIS3 */
  96:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   5U,            /* 5: OIS3N */
  97:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   6U             /* 6: OIS4 */
  98:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** };
  99:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 100:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 101:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 102:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 103:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /* Private constants ---------------------------------------------------------*/
 104:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Constants TIM Private Constants
 105:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 106:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 107:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 108:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 109:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 110:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /* Mask used to set the TDG[x:0] of the DTG bits of the TIMx_BDTR register */
 111:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define DT_DELAY_1 ((uint8_t)0x7F)
 112:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define DT_DELAY_2 ((uint8_t)0x3F)
 113:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define DT_DELAY_3 ((uint8_t)0x1F)
 114:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define DT_DELAY_4 ((uint8_t)0x1F)
 115:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 118


 116:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /* Mask used to set the DTG[7:5] bits of the DTG bits of the TIMx_BDTR register */
 117:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define DT_RANGE_1 ((uint8_t)0x00)
 118:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define DT_RANGE_2 ((uint8_t)0x80)
 119:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define DT_RANGE_3 ((uint8_t)0xC0)
 120:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define DT_RANGE_4 ((uint8_t)0xE0)
 121:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 122:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 123:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 124:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 125:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 126:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 127:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /* Private macros ------------------------------------------------------------*/
 128:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_Private_Macros TIM Private Macros
 129:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 130:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 131:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @brief  Convert channel id into channel index.
 132:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
 133:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
 134:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
 135:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
 136:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
 137:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
 138:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
 139:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
 140:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval none
 141:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 142:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define TIM_GET_CHANNEL_INDEX( __CHANNEL__) \
 143:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   (((__CHANNEL__) == LL_TIM_CHANNEL_CH1) ? 0U :\
 144:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH1N) ? 1U :\
 145:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH2) ? 2U :\
 146:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH2N) ? 3U :\
 147:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH3) ? 4U :\
 148:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****    ((__CHANNEL__) == LL_TIM_CHANNEL_CH3N) ? 5U : 6U)
 149:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 150:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @brief  Calculate the deadtime sampling period(in ps).
 151:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz).
 152:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __CKD__ This parameter can be one of the following values:
 153:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
 154:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
 155:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
 156:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval none
 157:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 158:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define TIM_CALC_DTS(__TIMCLK__, __CKD__)                                                        \
 159:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   (((__CKD__) == LL_TIM_CLOCKDIVISION_DIV1) ? ((uint64_t)1000000000000U/(__TIMCLK__))         : \
 160:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****    ((__CKD__) == LL_TIM_CLOCKDIVISION_DIV2) ? ((uint64_t)1000000000000U/((__TIMCLK__) >> 1U)) : \
 161:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****    ((uint64_t)1000000000000U/((__TIMCLK__) >> 2U)))
 162:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 163:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 164:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 165:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 166:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 167:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /* Exported types ------------------------------------------------------------*/
 168:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 169:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_ES_INIT TIM Exported Init structure
 170:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 171:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 172:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 119


 173:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 174:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  TIM Time Base configuration structure definition.
 175:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 176:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** typedef struct
 177:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 178:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint16_t Prescaler;         /*!< Specifies the prescaler value used to divide the TIM clock.
 179:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    This parameter can be a number between Min_Data=0x0000 and Max_D
 180:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 181:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 182:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    @ref LL_TIM_SetPrescaler().*/
 183:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 184:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t CounterMode;       /*!< Specifies the counter mode.
 185:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    This parameter can be a value of @ref TIM_LL_EC_COUNTERMODE.
 186:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 187:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 188:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    @ref LL_TIM_SetCounterMode().*/
 189:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 190:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t Autoreload;        /*!< Specifies the auto reload value to be loaded into the active
 191:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    Auto-Reload Register at the next update event.
 192:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    This parameter must be a number between Min_Data=0x0000 and Max_
 193:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    Some timer instances may support 32 bits counters. In that case 
 194:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    be a number between 0x0000 and 0xFFFFFFFF.
 195:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 196:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 197:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    @ref LL_TIM_SetAutoReload().*/
 198:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 199:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t ClockDivision;     /*!< Specifies the clock division.
 200:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    This parameter can be a value of @ref TIM_LL_EC_CLOCKDIVISION.
 201:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 202:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 203:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    @ref LL_TIM_SetClockDivision().*/
 204:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 205:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t RepetitionCounter;  /*!< Specifies the repetition counter value. Each time the RCR downc
 206:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    reaches zero, an update event is generated and counting restarts
 207:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    from the RCR value (N).
 208:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    This means in PWM mode that (N+1) corresponds to:
 209:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       - the number of PWM periods in edge-aligned mode
 210:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       - the number of half PWM period in center-aligned mode
 211:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    GP timers: this parameter must be a number between Min_Data = 0x
 212:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    Max_Data = 0xFF.
 213:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    Advanced timers: this parameter must be a number between Min_Dat
 214:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    Max_Data = 0xFFFF.
 215:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 216:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    This feature can be modified afterwards using unitary function
 217:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                    @ref LL_TIM_SetRepetitionCounter().*/
 218:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** } LL_TIM_InitTypeDef;
 219:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 220:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 221:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  TIM Output Compare configuration structure definition.
 222:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 223:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** typedef struct
 224:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 225:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t OCMode;        /*!< Specifies the output mode.
 226:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCMODE.
 227:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 228:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 229:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                @ref LL_TIM_OC_SetMode().*/
ARM GAS  /tmp/ccLne6l3.s 			page 120


 230:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 231:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t OCState;       /*!< Specifies the TIM Output Compare state.
 232:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCSTATE.
 233:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 234:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This feature can be modified afterwards using unitary functions
 235:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                @ref LL_TIM_CC_EnableChannel() or @ref LL_TIM_CC_DisableChannel().*/
 236:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 237:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t OCNState;      /*!< Specifies the TIM complementary Output Compare state.
 238:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCSTATE.
 239:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 240:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This feature can be modified afterwards using unitary functions
 241:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                @ref LL_TIM_CC_EnableChannel() or @ref LL_TIM_CC_DisableChannel().*/
 242:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 243:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t CompareValue;  /*!< Specifies the Compare value to be loaded into the Capture Compare Re
 244:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This parameter can be a number between Min_Data=0x0000 and Max_Data=
 245:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 246:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 247:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                LL_TIM_OC_SetCompareCHx (x=1..6).*/
 248:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 249:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t OCPolarity;    /*!< Specifies the output polarity.
 250:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCPOLARITY.
 251:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 252:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 253:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                @ref LL_TIM_OC_SetPolarity().*/
 254:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 255:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t OCNPolarity;   /*!< Specifies the complementary output polarity.
 256:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCPOLARITY.
 257:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 258:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 259:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                @ref LL_TIM_OC_SetPolarity().*/
 260:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 261:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 262:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t OCIdleState;   /*!< Specifies the TIM Output Compare pin state during Idle state.
 263:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCIDLESTATE.
 264:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 265:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 266:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                @ref LL_TIM_OC_SetIdleState().*/
 267:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 268:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t OCNIdleState;  /*!< Specifies the TIM Output Compare pin state during Idle state.
 269:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_OCIDLESTATE.
 270:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 271:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 272:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                @ref LL_TIM_OC_SetIdleState().*/
 273:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** } LL_TIM_OC_InitTypeDef;
 274:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 275:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 276:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  TIM Input Capture configuration structure definition.
 277:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 278:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 279:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** typedef struct
 280:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 281:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 282:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t ICPolarity;    /*!< Specifies the active edge of the input signal.
 283:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 284:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 285:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 286:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                @ref LL_TIM_IC_SetPolarity().*/
ARM GAS  /tmp/ccLne6l3.s 			page 121


 287:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 288:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t ICActiveInput; /*!< Specifies the input.
 289:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 290:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 291:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 292:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                @ref LL_TIM_IC_SetActiveInput().*/
 293:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 294:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t ICPrescaler;   /*!< Specifies the Input Capture Prescaler.
 295:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 296:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 297:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 298:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                @ref LL_TIM_IC_SetPrescaler().*/
 299:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 300:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t ICFilter;      /*!< Specifies the input capture filter.
 301:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 302:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 303:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                This feature can be modified afterwards using unitary function
 304:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                @ref LL_TIM_IC_SetFilter().*/
 305:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** } LL_TIM_IC_InitTypeDef;
 306:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 307:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 308:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 309:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  TIM Encoder interface configuration structure definition.
 310:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 311:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** typedef struct
 312:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 313:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t EncoderMode;     /*!< Specifies the encoder resolution (x2 or x4).
 314:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ENCODERMODE.
 315:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 316:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 317:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  @ref LL_TIM_SetEncoderMode().*/
 318:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 319:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t IC1Polarity;     /*!< Specifies the active edge of TI1 input.
 320:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 321:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 322:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 323:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPolarity().*/
 324:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 325:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t IC1ActiveInput;  /*!< Specifies the TI1 input source
 326:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 327:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 328:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 329:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetActiveInput().*/
 330:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 331:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t IC1Prescaler;    /*!< Specifies the TI1 input prescaler value.
 332:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 333:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 334:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 335:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPrescaler().*/
 336:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 337:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t IC1Filter;       /*!< Specifies the TI1 input filter.
 338:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 339:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 340:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 341:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetFilter().*/
 342:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 343:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t IC2Polarity;      /*!< Specifies the active edge of TI2 input.
ARM GAS  /tmp/ccLne6l3.s 			page 122


 344:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 345:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 346:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 347:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPolarity().*/
 348:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 349:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t IC2ActiveInput;  /*!< Specifies the TI2 input source
 350:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ACTIVEINPUT.
 351:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 352:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 353:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetActiveInput().*/
 354:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 355:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t IC2Prescaler;    /*!< Specifies the TI2 input prescaler value.
 356:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 357:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 358:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 359:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetPrescaler().*/
 360:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 361:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t IC2Filter;       /*!< Specifies the TI2 input filter.
 362:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This parameter can be a value of @ref TIM_LL_EC_IC_FILTER.
 363:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 364:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  This feature can be modified afterwards using unitary function
 365:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                  @ref LL_TIM_IC_SetFilter().*/
 366:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 367:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** } LL_TIM_ENCODER_InitTypeDef;
 368:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 369:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 370:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  TIM Hall sensor interface configuration structure definition.
 371:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 372:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** typedef struct
 373:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 374:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 375:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t IC1Polarity;        /*!< Specifies the active edge of TI1 input.
 376:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     This parameter can be a value of @ref TIM_LL_EC_IC_POLARITY.
 377:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 378:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function
 379:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     @ref LL_TIM_IC_SetPolarity().*/
 380:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 381:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t IC1Prescaler;       /*!< Specifies the TI1 input prescaler value.
 382:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     Prescaler must be set to get a maximum counter period longer th
 383:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     time interval between 2 consecutive changes on the Hall inputs.
 384:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     This parameter can be a value of @ref TIM_LL_EC_ICPSC.
 385:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 386:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function
 387:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     @ref LL_TIM_IC_SetPrescaler().*/
 388:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 389:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t IC1Filter;          /*!< Specifies the TI1 input filter.
 390:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     This parameter can be a value of
 391:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     @ref TIM_LL_EC_IC_FILTER.
 392:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 393:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function
 394:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     @ref LL_TIM_IC_SetFilter().*/
 395:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 396:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t CommutationDelay;   /*!< Specifies the compare value to be loaded into the Capture Compa
 397:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     A positive pulse (TRGO event) is generated with a programmable 
 398:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     a change occurs on the Hall inputs.
 399:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     This parameter can be a number between Min_Data = 0x0000 and Ma
 400:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 123


 401:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     This feature can be modified afterwards using unitary function
 402:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                     @ref LL_TIM_OC_SetCompareCH2().*/
 403:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** } LL_TIM_HALLSENSOR_InitTypeDef;
 404:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 405:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 406:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  BDTR (Break and Dead Time) structure definition
 407:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 408:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** typedef struct
 409:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 410:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t OSSRState;            /*!< Specifies the Off-State selection used in Run mode.
 411:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_OSSR
 412:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 413:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 414:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       @ref LL_TIM_SetOffStates()
 415:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 416:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       @note This bit-field cannot be modified as long as LOCK level
 417:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                        programmed. */
 418:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 419:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t OSSIState;            /*!< Specifies the Off-State used in Idle state.
 420:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_OSSI
 421:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 422:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 423:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       @ref LL_TIM_SetOffStates()
 424:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 425:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       @note This bit-field cannot be modified as long as LOCK level
 426:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       programmed. */
 427:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 428:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t LockLevel;            /*!< Specifies the LOCK level parameters.
 429:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_LOCKLEVEL
 430:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 431:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       @note The LOCK bits can be written only once after the reset.
 432:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       register has been written, their content is frozen until the 
 433:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 434:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t DeadTime;              /*!< Specifies the delay time between the switching-off and the
 435:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       switching-on of the outputs.
 436:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       This parameter can be a number between Min_Data = 0x00 and Ma
 437:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 438:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 439:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       @ref LL_TIM_OC_SetDeadTime()
 440:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 441:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 442:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                        programmed. */
 443:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 444:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint16_t BreakState;           /*!< Specifies whether the TIM Break input is enabled or not.
 445:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_BREAK_ENABLE
 446:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 447:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 448:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       @ref LL_TIM_EnableBRK() or @ref LL_TIM_DisableBRK()
 449:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 450:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 451:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       programmed. */
 452:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 453:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t BreakPolarity;        /*!< Specifies the TIM Break Input pin polarity.
 454:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_BREAK_POLARIT
 455:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 456:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 457:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       @ref LL_TIM_ConfigBRK()
ARM GAS  /tmp/ccLne6l3.s 			page 124


 458:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 459:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 460:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       programmed. */
 461:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 462:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t AutomaticOutput;      /*!< Specifies whether the TIM Automatic Output feature is enabled
 463:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       This parameter can be a value of @ref TIM_LL_EC_AUTOMATICOUTP
 464:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 465:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       This feature can be modified afterwards using unitary functio
 466:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       @ref LL_TIM_EnableAutomaticOutput() or @ref LL_TIM_DisableAut
 467:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 468:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       @note This bit-field can not be modified as long as LOCK leve
 469:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       programmed. */
 470:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** } LL_TIM_BDTR_InitTypeDef;
 471:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 472:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 473:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 474:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 475:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 476:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 477:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /* Exported constants --------------------------------------------------------*/
 478:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Constants TIM Exported Constants
 479:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 480:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 481:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 482:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_GET_FLAG Get Flags Defines
 483:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief    Flags defines which can be used with LL_TIM_ReadReg function.
 484:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 485:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 486:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SR_UIF                          TIM_SR_UIF           /*!< Update interrupt flag */
 487:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SR_CC1IF                        TIM_SR_CC1IF         /*!< Capture/compare 1 interrup
 488:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SR_CC2IF                        TIM_SR_CC2IF         /*!< Capture/compare 2 interrup
 489:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SR_CC3IF                        TIM_SR_CC3IF         /*!< Capture/compare 3 interrup
 490:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SR_CC4IF                        TIM_SR_CC4IF         /*!< Capture/compare 4 interrup
 491:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SR_COMIF                        TIM_SR_COMIF         /*!< COM interrupt flag */
 492:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SR_TIF                          TIM_SR_TIF           /*!< Trigger interrupt flag */
 493:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SR_BIF                          TIM_SR_BIF           /*!< Break interrupt flag */
 494:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SR_CC1OF                        TIM_SR_CC1OF         /*!< Capture/Compare 1 overcapt
 495:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SR_CC2OF                        TIM_SR_CC2OF         /*!< Capture/Compare 2 overcapt
 496:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SR_CC3OF                        TIM_SR_CC3OF         /*!< Capture/Compare 3 overcapt
 497:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SR_CC4OF                        TIM_SR_CC4OF         /*!< Capture/Compare 4 overcapt
 498:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 499:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 500:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 501:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 502:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 503:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_BREAK_ENABLE Break Enable
 504:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 505:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 506:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_BREAK_DISABLE            0x00000000U             /*!< Break function disabled */
 507:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_BREAK_ENABLE             TIM_BDTR_BKE            /*!< Break function enabled */
 508:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 509:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 510:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 511:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 512:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_AUTOMATICOUTPUT_ENABLE Automatic output enable
 513:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 514:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
ARM GAS  /tmp/ccLne6l3.s 			page 125


 515:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_AUTOMATICOUTPUT_DISABLE         0x00000000U             /*!< MOE can be set only by 
 516:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_AUTOMATICOUTPUT_ENABLE          TIM_BDTR_AOE            /*!< MOE can be set by softw
 517:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 518:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 519:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 520:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 521:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 522:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IT IT Defines
 523:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief    IT defines which can be used with LL_TIM_ReadReg and  LL_TIM_WriteReg functions.
 524:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 525:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 526:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DIER_UIE                        TIM_DIER_UIE         /*!< Update interrupt enable */
 527:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DIER_CC1IE                      TIM_DIER_CC1IE       /*!< Capture/compare 1 interrup
 528:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DIER_CC2IE                      TIM_DIER_CC2IE       /*!< Capture/compare 2 interrup
 529:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DIER_CC3IE                      TIM_DIER_CC3IE       /*!< Capture/compare 3 interrup
 530:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DIER_CC4IE                      TIM_DIER_CC4IE       /*!< Capture/compare 4 interrup
 531:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DIER_COMIE                      TIM_DIER_COMIE       /*!< COM interrupt enable */
 532:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DIER_TIE                        TIM_DIER_TIE         /*!< Trigger interrupt enable *
 533:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DIER_BIE                        TIM_DIER_BIE         /*!< Break interrupt enable */
 534:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 535:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 536:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 537:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 538:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_UPDATESOURCE Update Source
 539:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 540:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 541:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_UPDATESOURCE_REGULAR            0x00000000U          /*!< Counter overflow/underflow
 542:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_UPDATESOURCE_COUNTER            TIM_CR1_URS          /*!< Only counter overflow/unde
 543:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 544:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 545:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 546:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 547:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ONEPULSEMODE One Pulse Mode
 548:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 549:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 550:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ONEPULSEMODE_SINGLE             TIM_CR1_OPM          /*!< Counter stops counting at 
 551:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ONEPULSEMODE_REPETITIVE         0x00000000U          /*!< Counter is not stopped at 
 552:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 553:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 554:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 555:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 556:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_COUNTERMODE Counter Mode
 557:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 558:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 559:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_UP                  0x00000000U          /*!<Counter used as upcounter *
 560:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_DOWN                TIM_CR1_DIR          /*!< Counter used as downcounte
 561:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_DOWN         TIM_CR1_CMS_0        /*!< The counter counts up and 
 562:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_UP           TIM_CR1_CMS_1        /*!<The counter counts up and d
 563:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_COUNTERMODE_CENTER_UP_DOWN      TIM_CR1_CMS          /*!< The counter counts up and 
 564:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 565:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 566:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 567:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 568:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CLOCKDIVISION Clock Division
 569:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 570:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 571:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV1              0x00000000U          /*!< tDTS=tCK_INT */
ARM GAS  /tmp/ccLne6l3.s 			page 126


 572:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV2              TIM_CR1_CKD_0        /*!< tDTS=2*tCK_INT */
 573:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CLOCKDIVISION_DIV4              TIM_CR1_CKD_1        /*!< tDTS=4*tCK_INT */
 574:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 575:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 576:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 577:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 578:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_COUNTERDIRECTION Counter Direction
 579:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 580:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 581:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_COUNTERDIRECTION_UP             0x00000000U          /*!< Timer counter counts up */
 582:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_COUNTERDIRECTION_DOWN           TIM_CR1_DIR          /*!< Timer counter counts down 
 583:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 584:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 585:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 586:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 587:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CCUPDATESOURCE Capture Compare  Update Source
 588:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 589:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 590:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CCUPDATESOURCE_COMG_ONLY        0x00000000U          /*!< Capture/compare control bi
 591:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI    TIM_CR2_CCUS         /*!< Capture/compare control bi
 592:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 593:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 594:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 595:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 596:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CCDMAREQUEST Capture Compare DMA Request
 597:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 598:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 599:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CCDMAREQUEST_CC                 0x00000000U          /*!< CCx DMA request sent when 
 600:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CCDMAREQUEST_UPDATE             TIM_CR2_CCDS         /*!< CCx DMA requests sent when
 601:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 602:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 603:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 604:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 605:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_LOCKLEVEL Lock Level
 606:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 607:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 608:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_OFF                   0x00000000U          /*!< LOCK OFF - No bit is write
 609:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_1                     TIM_BDTR_LOCK_0      /*!< LOCK Level 1 */
 610:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_2                     TIM_BDTR_LOCK_1      /*!< LOCK Level 2 */
 611:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_LOCKLEVEL_3                     TIM_BDTR_LOCK        /*!< LOCK Level 3 */
 612:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 613:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 614:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 615:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 616:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CHANNEL Channel
 617:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 618:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 619:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH1                     TIM_CCER_CC1E     /*!< Timer input/output channel 1 
 620:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH1N                    TIM_CCER_CC1NE    /*!< Timer complementary output ch
 621:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH2                     TIM_CCER_CC2E     /*!< Timer input/output channel 2 
 622:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH2N                    TIM_CCER_CC2NE    /*!< Timer complementary output ch
 623:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH3                     TIM_CCER_CC3E     /*!< Timer input/output channel 3 
 624:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH3N                    TIM_CCER_CC3NE    /*!< Timer complementary output ch
 625:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CHANNEL_CH4                     TIM_CCER_CC4E     /*!< Timer input/output channel 4 
 626:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 627:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 628:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
ARM GAS  /tmp/ccLne6l3.s 			page 127


 629:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 630:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #if defined(USE_FULL_LL_DRIVER)
 631:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCSTATE Output Configuration State
 632:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 633:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 634:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OCSTATE_DISABLE                 0x00000000U             /*!< OCx is not active */
 635:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OCSTATE_ENABLE                  TIM_CCER_CC1E           /*!< OCx signal is output on
 636:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 637:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 638:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 639:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #endif /* USE_FULL_LL_DRIVER */
 640:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 641:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCMODE Output Configuration Mode
 642:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 643:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 644:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OCMODE_FROZEN                   0x00000000U                                         
 645:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OCMODE_ACTIVE                   TIM_CCMR1_OC1M_0                                    
 646:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OCMODE_INACTIVE                 TIM_CCMR1_OC1M_1                                    
 647:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OCMODE_TOGGLE                   (TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0)               
 648:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OCMODE_FORCED_INACTIVE          TIM_CCMR1_OC1M_2                                    
 649:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OCMODE_FORCED_ACTIVE            (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_0)               
 650:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OCMODE_PWM1                     (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1)               
 651:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OCMODE_PWM2                     (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1
 652:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 653:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 654:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 655:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 656:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCPOLARITY Output Configuration Polarity
 657:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 658:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 659:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OCPOLARITY_HIGH                 0x00000000U                 /*!< OCxactive high*/
 660:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OCPOLARITY_LOW                  TIM_CCER_CC1P               /*!< OCxactive low*/
 661:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 662:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 663:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 664:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 665:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OCIDLESTATE Output Configuration Idle State
 666:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 667:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 668:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OCIDLESTATE_LOW                 0x00000000U             /*!<OCx=0 (after a dead-time
 669:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OCIDLESTATE_HIGH                TIM_CR2_OIS1            /*!<OCx=1 (after a dead-time
 670:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 671:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 672:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 673:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 674:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 675:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ACTIVEINPUT Active Input Selection
 676:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 677:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 678:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_DIRECTTI            (TIM_CCMR1_CC1S_0 << 16U) /*!< ICx is mapped on TIx 
 679:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_INDIRECTTI          (TIM_CCMR1_CC1S_1 << 16U) /*!< ICx is mapped on TIy 
 680:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ACTIVEINPUT_TRC                 (TIM_CCMR1_CC1S << 16U)   /*!< ICx is mapped on TRC 
 681:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 682:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 683:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 684:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 685:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ICPSC Input Configuration Prescaler
ARM GAS  /tmp/ccLne6l3.s 			page 128


 686:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 687:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 688:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV1                      0x00000000U                    /*!< No prescaler, ca
 689:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV2                      (TIM_CCMR1_IC1PSC_0 << 16U)    /*!< Capture is done 
 690:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV4                      (TIM_CCMR1_IC1PSC_1 << 16U)    /*!< Capture is done 
 691:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ICPSC_DIV8                      (TIM_CCMR1_IC1PSC << 16U)      /*!< Capture is done 
 692:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 693:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 694:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 695:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 696:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IC_FILTER Input Configuration Filter
 697:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 698:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 699:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1                 0x00000000U                                         
 700:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N2              (TIM_CCMR1_IC1F_0 << 16U)                           
 701:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N4              (TIM_CCMR1_IC1F_1 << 16U)                           
 702:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV1_N8              ((TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_0) << 16U)      
 703:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV2_N6              (TIM_CCMR1_IC1F_2 << 16U)                           
 704:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV2_N8              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_0) << 16U)      
 705:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV4_N6              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1) << 16U)      
 706:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV4_N8              ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC
 707:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV8_N6              (TIM_CCMR1_IC1F_3 << 16U)                           
 708:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV8_N8              ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_0) << 16U)      
 709:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N5             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1) << 16U)      
 710:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N6             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC
 711:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV16_N8             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2) << 16U)      
 712:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N5             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC
 713:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N6             ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC
 714:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_FILTER_FDIV32_N8             (TIM_CCMR1_IC1F << 16U)                             
 715:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 716:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 717:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 718:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 719:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_IC_POLARITY Input Configuration Polarity
 720:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 721:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 722:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_RISING              0x00000000U                      /*!< The circuit is
 723:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_IC_POLARITY_FALLING             TIM_CCER_CC1P                    /*!< The circuit is
 724:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 725:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 726:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 727:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 728:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_CLOCKSOURCE Clock Source
 729:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 730:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 731:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_INTERNAL            0x00000000U                                         
 732:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_EXT_MODE1           (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)  
 733:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_CLOCKSOURCE_EXT_MODE2           TIM_SMCR_ECE                                        
 734:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 735:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 736:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 737:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 738:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ENCODERMODE Encoder Mode
 739:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 740:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 741:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X2_TI1                     TIM_SMCR_SMS_0                               
 742:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X2_TI2                     TIM_SMCR_SMS_1                               
ARM GAS  /tmp/ccLne6l3.s 			page 129


 743:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ENCODERMODE_X4_TI12                   (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)             
 744:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 745:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 746:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 747:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 748:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TRGO Trigger Output
 749:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 750:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 751:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TRGO_RESET                      0x00000000U                                     /*!<
 752:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TRGO_ENABLE                     TIM_CR2_MMS_0                                   /*!<
 753:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TRGO_UPDATE                     TIM_CR2_MMS_1                                   /*!<
 754:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TRGO_CC1IF                      (TIM_CR2_MMS_1 | TIM_CR2_MMS_0)                 /*!<
 755:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TRGO_OC1REF                     TIM_CR2_MMS_2                                   /*!<
 756:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TRGO_OC2REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_0)                 /*!<
 757:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TRGO_OC3REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_1)                 /*!<
 758:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TRGO_OC4REF                     (TIM_CR2_MMS_2 | TIM_CR2_MMS_1 | TIM_CR2_MMS_0) /*!<
 759:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 760:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 761:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 762:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 763:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 764:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_SLAVEMODE Slave Mode
 765:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 766:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 767:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_DISABLED              0x00000000U                         /*!< Slave mode 
 768:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_RESET                 TIM_SMCR_SMS_2                      /*!< Reset Mode 
 769:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_GATED                 (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_0)   /*!< Gated Mode 
 770:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_SLAVEMODE_TRIGGER               (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1)   /*!< Trigger Mod
 771:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 772:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 773:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 774:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 775:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_TS Trigger Selection
 776:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 777:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 778:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TS_ITR0                         0x00000000U                                         
 779:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TS_ITR1                         TIM_SMCR_TS_0                                       
 780:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TS_ITR2                         TIM_SMCR_TS_1                                       
 781:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TS_ITR3                         (TIM_SMCR_TS_0 | TIM_SMCR_TS_1)                     
 782:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TS_TI1F_ED                      TIM_SMCR_TS_2                                       
 783:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TS_TI1FP1                       (TIM_SMCR_TS_2 | TIM_SMCR_TS_0)                     
 784:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TS_TI2FP2                       (TIM_SMCR_TS_2 | TIM_SMCR_TS_1)                     
 785:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_TS_ETRF                         (TIM_SMCR_TS_2 | TIM_SMCR_TS_1 | TIM_SMCR_TS_0)     
 786:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 787:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 788:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 789:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 790:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_POLARITY External Trigger Polarity
 791:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 792:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 793:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_POLARITY_NONINVERTED        0x00000000U             /*!< ETR is non-inverted, ac
 794:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_POLARITY_INVERTED           TIM_SMCR_ETP            /*!< ETR is inverted, active
 795:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 796:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 797:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 798:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 799:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_PRESCALER External Trigger Prescaler
ARM GAS  /tmp/ccLne6l3.s 			page 130


 800:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 801:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 802:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV1              0x00000000U             /*!< ETR prescaler OFF */
 803:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV2              TIM_SMCR_ETPS_0         /*!< ETR frequency is divide
 804:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV4              TIM_SMCR_ETPS_1         /*!< ETR frequency is divide
 805:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_PRESCALER_DIV8              TIM_SMCR_ETPS           /*!< ETR frequency is divide
 806:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 807:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 808:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 809:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 810:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_ETR_FILTER External Trigger Filter
 811:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 812:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 813:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1                0x00000000U                                         
 814:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N2             TIM_SMCR_ETF_0                                      
 815:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N4             TIM_SMCR_ETF_1                                      
 816:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV1_N8             (TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)                   
 817:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV2_N6             TIM_SMCR_ETF_2                                      
 818:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV2_N8             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)                   
 819:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV4_N6             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)                   
 820:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV4_N8             (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)  
 821:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV8_N6             TIM_SMCR_ETF_3                                      
 822:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV8_N8             (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_0)                   
 823:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N5            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1)                   
 824:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N6            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)  
 825:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV16_N8            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2)                   
 826:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N5            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)  
 827:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N6            (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)  
 828:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ETR_FILTER_FDIV32_N8            TIM_SMCR_ETF                                        
 829:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 830:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 831:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 832:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 833:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 834:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_BREAK_POLARITY break polarity
 835:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 836:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 837:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_BREAK_POLARITY_LOW              0x00000000U               /*!< Break input BRK is ac
 838:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_BREAK_POLARITY_HIGH             TIM_BDTR_BKP              /*!< Break input BRK is ac
 839:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 840:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 841:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 842:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 843:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 844:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 845:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 846:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OSSI OSSI
 847:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 848:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 849:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OSSI_DISABLE                    0x00000000U             /*!< When inactive, OCx/OCxN
 850:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OSSI_ENABLE                     TIM_BDTR_OSSI           /*!< When inactive, OxC/OCxN
 851:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 852:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 853:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 854:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 855:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_OSSR OSSR
 856:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
ARM GAS  /tmp/ccLne6l3.s 			page 131


 857:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 858:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OSSR_DISABLE                    0x00000000U             /*!< When inactive, OCx/OCxN
 859:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_OSSR_ENABLE                     TIM_BDTR_OSSR           /*!< When inactive, OC/OCN o
 860:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 861:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 862:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 863:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 864:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 865:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_DMABURST_BASEADDR DMA Burst Base Address
 866:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 867:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 868:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CR1           0x00000000U                                         
 869:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CR2           TIM_DCR_DBA_0                                       
 870:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_SMCR          TIM_DCR_DBA_1                                       
 871:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_DIER          (TIM_DCR_DBA_1 |  TIM_DCR_DBA_0)                    
 872:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_SR            TIM_DCR_DBA_2                                       
 873:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_EGR           (TIM_DCR_DBA_2 | TIM_DCR_DBA_0)                     
 874:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCMR1         (TIM_DCR_DBA_2 | TIM_DCR_DBA_1)                     
 875:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCMR2         (TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)     
 876:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCER          TIM_DCR_DBA_3                                       
 877:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CNT           (TIM_DCR_DBA_3 | TIM_DCR_DBA_0)                     
 878:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_PSC           (TIM_DCR_DBA_3 | TIM_DCR_DBA_1)                     
 879:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_ARR           (TIM_DCR_DBA_3 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)     
 880:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_RCR           (TIM_DCR_DBA_3 | TIM_DCR_DBA_2)                     
 881:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR1          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_0)     
 882:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR2          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1)     
 883:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR3          (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM
 884:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_CCR4          TIM_DCR_DBA_4                                       
 885:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_BASEADDR_BDTR          (TIM_DCR_DBA_4 | TIM_DCR_DBA_0)                     
 886:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 887:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 888:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 889:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 890:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EC_DMABURST_LENGTH DMA Burst Length
 891:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 892:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 893:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_1TRANSFER       0x00000000U                                         
 894:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_2TRANSFERS      TIM_DCR_DBL_0                                       
 895:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_3TRANSFERS      TIM_DCR_DBL_1                                       
 896:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_4TRANSFERS      (TIM_DCR_DBL_1 |  TIM_DCR_DBL_0)                    
 897:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_5TRANSFERS      TIM_DCR_DBL_2                                       
 898:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_6TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_0)                     
 899:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_7TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_1)                     
 900:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_8TRANSFERS      (TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)     
 901:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_9TRANSFERS      TIM_DCR_DBL_3                                       
 902:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_10TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_0)                     
 903:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_11TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_1)                     
 904:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_12TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)     
 905:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_13TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2)                     
 906:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_14TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_0)     
 907:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_15TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1)     
 908:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_16TRANSFERS     (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM
 909:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_17TRANSFERS     TIM_DCR_DBL_4                                       
 910:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_DMABURST_LENGTH_18TRANSFERS     (TIM_DCR_DBL_4 |  TIM_DCR_DBL_0)                    
 911:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 912:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 913:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
ARM GAS  /tmp/ccLne6l3.s 			page 132


 914:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 915:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 916:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 917:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 918:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 919:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 920:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 921:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /* Exported macro ------------------------------------------------------------*/
 922:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Macros TIM Exported Macros
 923:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 924:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 925:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 926:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EM_WRITE_READ Common Write and read registers Macros
 927:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
 928:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 929:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 930:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Write a value in TIM register.
 931:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __INSTANCE__ TIM Instance
 932:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __REG__ Register to be written
 933:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __VALUE__ Value to be written in the register
 934:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
 935:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 936:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG((__INSTANCE__)->__REG__, (__VAL
 937:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 938:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 939:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Read a value in TIM register.
 940:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __INSTANCE__ TIM Instance
 941:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __REG__ Register to be read
 942:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Register value
 943:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 944:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define LL_TIM_ReadReg(__INSTANCE__, __REG__) READ_REG((__INSTANCE__)->__REG__)
 945:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 946:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
 947:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 948:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 949:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 950:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  HELPER macro calculating DTG[0:7] in the TIMx_BDTR register to achieve the requested de
 951:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_DEADTIME (80000000, @ref LL_TIM_GetClockDivision (), 120);
 952:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
 953:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __CKD__ This parameter can be one of the following values:
 954:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
 955:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
 956:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
 957:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __DT__ deadtime duration (in ns)
 958:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval DTG[0:7]
 959:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 960:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define __LL_TIM_CALC_DEADTIME(__TIMCLK__, __CKD__, __DT__)  \
 961:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   ( (((uint64_t)((__DT__)*1000U)) < ((DT_DELAY_1+1U) * TIM_CALC_DTS((__TIMCLK__), (__CKD__))))    ?
 962:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****     (uint8_t)(((uint64_t)((__DT__)*1000U) / TIM_CALC_DTS((__TIMCLK__), (__CKD__)))  & DT_DELAY_1) :
 963:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****     (((uint64_t)((__DT__)*1000U)) < ((64U + (DT_DELAY_2+1U)) * 2U * TIM_CALC_DTS((__TIMCLK__), (__C
 964:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****     (uint8_t)(DT_RANGE_2 | ((uint8_t)((uint8_t)((((uint64_t)((__DT__)*1000U))/ TIM_CALC_DTS((__TIMC
 965:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                                  (__CKD__))) >> 1U) - (uint8_t) 64) & DT_DELAY_2)) 
 966:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****     (((uint64_t)((__DT__)*1000U)) < ((32U + (DT_DELAY_3+1U)) * 8U * TIM_CALC_DTS((__TIMCLK__), (__C
 967:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****     (uint8_t)(DT_RANGE_3 | ((uint8_t)((uint8_t)(((((uint64_t)(__DT__)*1000U))/ TIM_CALC_DTS((__TIMC
 968:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                                  (__CKD__))) >> 3U) - (uint8_t) 32) & DT_DELAY_3)) 
 969:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****     (((uint64_t)((__DT__)*1000U)) < ((32U + (DT_DELAY_4+1U)) * 16U * TIM_CALC_DTS((__TIMCLK__), (__
 970:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****     (uint8_t)(DT_RANGE_4 | ((uint8_t)((uint8_t)(((((uint64_t)(__DT__)*1000U))/ TIM_CALC_DTS((__TIMC
ARM GAS  /tmp/ccLne6l3.s 			page 133


 971:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                                  (__CKD__))) >> 4U) - (uint8_t) 32) & DT_DELAY_4)) 
 972:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****     0U)
 973:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 974:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 975:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  HELPER macro calculating the prescaler value to achieve the required counter clock freq
 976:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_PSC (80000000, 1000000);
 977:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
 978:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __CNTCLK__ counter clock frequency (in Hz)
 979:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Prescaler value  (between Min_Data=0 and Max_Data=65535)
 980:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 981:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define __LL_TIM_CALC_PSC(__TIMCLK__, __CNTCLK__)   \
 982:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   (((__TIMCLK__) >= (__CNTCLK__)) ? (uint32_t)((((__TIMCLK__) + (__CNTCLK__)/2U)/(__CNTCLK__)) - 1U
 983:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 984:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 985:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  HELPER macro calculating the auto-reload value to achieve the required output signal fr
 986:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_ARR (1000000, @ref LL_TIM_GetPrescaler (), 10000);
 987:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
 988:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __PSC__ prescaler
 989:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __FREQ__ output signal frequency (in Hz)
 990:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval  Auto-reload value  (between Min_Data=0 and Max_Data=65535)
 991:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
 992:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define __LL_TIM_CALC_ARR(__TIMCLK__, __PSC__, __FREQ__) \
 993:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   ((((__TIMCLK__)/((__PSC__) + 1U)) >= (__FREQ__)) ? (((__TIMCLK__)/((__FREQ__) * ((__PSC__) + 1U))
 994:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
 995:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
 996:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  HELPER macro calculating the compare value required to achieve the required timer outpu
 997:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         active/inactive delay.
 998:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_DELAY (1000000, @ref LL_TIM_GetPrescaler (), 10);
 999:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1000:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __PSC__ prescaler
1001:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __DELAY__ timer output compare active/inactive delay (in us)
1002:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Compare value  (between Min_Data=0 and Max_Data=65535)
1003:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1004:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define __LL_TIM_CALC_DELAY(__TIMCLK__, __PSC__, __DELAY__)  \
1005:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   ((uint32_t)(((uint64_t)(__TIMCLK__) * (uint64_t)(__DELAY__)) \
1006:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****               / ((uint64_t)1000000U * (uint64_t)((__PSC__) + 1U))))
1007:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1008:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1009:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  HELPER macro calculating the auto-reload value to achieve the required pulse duration
1010:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         (when the timer operates in one pulse mode).
1011:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_CALC_PULSE (1000000, @ref LL_TIM_GetPrescaler (), 10, 20);
1012:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __TIMCLK__ timer input clock frequency (in Hz)
1013:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __PSC__ prescaler
1014:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __DELAY__ timer output compare active/inactive delay (in us)
1015:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __PULSE__ pulse duration (in us)
1016:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Auto-reload value  (between Min_Data=0 and Max_Data=65535)
1017:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1018:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define __LL_TIM_CALC_PULSE(__TIMCLK__, __PSC__, __DELAY__, __PULSE__)  \
1019:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   ((uint32_t)(__LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__PULSE__)) \
1020:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****               + __LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__DELAY__))))
1021:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1022:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1023:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  HELPER macro retrieving the ratio of the input capture prescaler
1024:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note ex: @ref __LL_TIM_GET_ICPSC_RATIO (@ref LL_TIM_IC_GetPrescaler ());
1025:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  __ICPSC__ This parameter can be one of the following values:
1026:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
1027:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
ARM GAS  /tmp/ccLne6l3.s 			page 134


1028:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
1029:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
1030:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Input capture prescaler ratio (1, 2, 4 or 8)
1031:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1032:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** #define __LL_TIM_GET_ICPSC_RATIO(__ICPSC__)  \
1033:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   ((uint32_t)(0x01U << (((__ICPSC__) >> 16U) >> TIM_CCMR1_IC1PSC_Pos)))
1034:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1035:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1036:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1037:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
1038:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1039:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1040:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /* Exported functions --------------------------------------------------------*/
1041:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_Exported_Functions TIM Exported Functions
1042:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
1043:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1044:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1045:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Time_Base Time Base configuration
1046:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
1047:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1048:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1049:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Enable timer counter.
1050:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_EnableCounter
1051:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1052:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1053:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1054:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
1055:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1146              		.loc 4 1055 1
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 8
 1149              		@ frame_needed = 1, uses_anonymous_args = 0
 1150              		@ link register save eliminated.
 1151 0000 80B4     		push	{r7}
 1152              	.LCFI102:
 1153              		.cfi_def_cfa_offset 4
 1154              		.cfi_offset 7, -4
 1155 0002 83B0     		sub	sp, sp, #12
 1156              	.LCFI103:
 1157              		.cfi_def_cfa_offset 16
 1158 0004 00AF     		add	r7, sp, #0
 1159              	.LCFI104:
 1160              		.cfi_def_cfa_register 7
 1161 0006 7860     		str	r0, [r7, #4]
1056:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 1162              		.loc 4 1056 3
 1163 0008 7B68     		ldr	r3, [r7, #4]
 1164 000a 1B68     		ldr	r3, [r3]
 1165 000c 43F00102 		orr	r2, r3, #1
 1166 0010 7B68     		ldr	r3, [r7, #4]
 1167 0012 1A60     		str	r2, [r3]
1057:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1168              		.loc 4 1057 1
 1169 0014 00BF     		nop
 1170 0016 0C37     		adds	r7, r7, #12
 1171              	.LCFI105:
 1172              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccLne6l3.s 			page 135


 1173 0018 BD46     		mov	sp, r7
 1174              	.LCFI106:
 1175              		.cfi_def_cfa_register 13
 1176              		@ sp needed
 1177 001a 80BC     		pop	{r7}
 1178              	.LCFI107:
 1179              		.cfi_restore 7
 1180              		.cfi_def_cfa_offset 0
 1181 001c 7047     		bx	lr
 1182              		.cfi_endproc
 1183              	.LFE237:
 1185              		.section	.text.LL_TIM_DisableCounter,"ax",%progbits
 1186              		.align	1
 1187              		.syntax unified
 1188              		.thumb
 1189              		.thumb_func
 1191              	LL_TIM_DisableCounter:
 1192              	.LFB238:
1058:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1059:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1060:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Disable timer counter.
1061:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_DisableCounter
1062:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1063:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1064:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1065:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
1066:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1193              		.loc 4 1066 1
 1194              		.cfi_startproc
 1195              		@ args = 0, pretend = 0, frame = 8
 1196              		@ frame_needed = 1, uses_anonymous_args = 0
 1197              		@ link register save eliminated.
 1198 0000 80B4     		push	{r7}
 1199              	.LCFI108:
 1200              		.cfi_def_cfa_offset 4
 1201              		.cfi_offset 7, -4
 1202 0002 83B0     		sub	sp, sp, #12
 1203              	.LCFI109:
 1204              		.cfi_def_cfa_offset 16
 1205 0004 00AF     		add	r7, sp, #0
 1206              	.LCFI110:
 1207              		.cfi_def_cfa_register 7
 1208 0006 7860     		str	r0, [r7, #4]
1067:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 1209              		.loc 4 1067 3
 1210 0008 7B68     		ldr	r3, [r7, #4]
 1211 000a 1B68     		ldr	r3, [r3]
 1212 000c 23F00102 		bic	r2, r3, #1
 1213 0010 7B68     		ldr	r3, [r7, #4]
 1214 0012 1A60     		str	r2, [r3]
1068:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1215              		.loc 4 1068 1
 1216 0014 00BF     		nop
 1217 0016 0C37     		adds	r7, r7, #12
 1218              	.LCFI111:
 1219              		.cfi_def_cfa_offset 4
 1220 0018 BD46     		mov	sp, r7
ARM GAS  /tmp/ccLne6l3.s 			page 136


 1221              	.LCFI112:
 1222              		.cfi_def_cfa_register 13
 1223              		@ sp needed
 1224 001a 80BC     		pop	{r7}
 1225              	.LCFI113:
 1226              		.cfi_restore 7
 1227              		.cfi_def_cfa_offset 0
 1228 001c 7047     		bx	lr
 1229              		.cfi_endproc
 1230              	.LFE238:
 1232              		.section	.text.LL_TIM_EnableARRPreload,"ax",%progbits
 1233              		.align	1
 1234              		.syntax unified
 1235              		.thumb
 1236              		.thumb_func
 1238              	LL_TIM_EnableARRPreload:
 1239              	.LFB249:
1069:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1070:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1071:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Indicates whether the timer counter is enabled.
1072:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
1073:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1074:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1075:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1076:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(const TIM_TypeDef *TIMx)
1077:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1078:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
1079:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1080:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1081:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1082:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Enable update event generation.
1083:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_EnableUpdateEvent
1084:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1085:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1086:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1087:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableUpdateEvent(TIM_TypeDef *TIMx)
1088:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1089:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
1090:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1091:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1092:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1093:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Disable update event generation.
1094:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_DisableUpdateEvent
1095:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1096:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1097:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1098:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableUpdateEvent(TIM_TypeDef *TIMx)
1099:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1100:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_UDIS);
1101:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1102:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1103:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1104:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Indicates whether update event generation is enabled.
1105:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          UDIS          LL_TIM_IsEnabledUpdateEvent
1106:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1107:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Inverted state of bit (0 or 1).
1108:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
ARM GAS  /tmp/ccLne6l3.s 			page 137


1109:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledUpdateEvent(const TIM_TypeDef *TIMx)
1110:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1111:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_UDIS) == (uint32_t)RESET) ? 1UL : 0UL);
1112:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1113:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1114:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1115:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set update event source
1116:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Update event source set to LL_TIM_UPDATESOURCE_REGULAR: any of the following events
1117:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       generate an update interrupt or DMA request if enabled:
1118:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *        - Counter overflow/underflow
1119:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *        - Setting the UG bit
1120:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *        - Update generation through the slave mode controller
1121:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Update event source set to LL_TIM_UPDATESOURCE_COUNTER: only counter
1122:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       overflow/underflow generates an update interrupt or DMA request if enabled.
1123:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          URS           LL_TIM_SetUpdateSource
1124:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1125:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  UpdateSource This parameter can be one of the following values:
1126:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
1127:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
1128:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1129:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1130:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetUpdateSource(TIM_TypeDef *TIMx, uint32_t UpdateSource)
1131:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1132:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
1133:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1134:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1135:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1136:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get actual event update source
1137:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          URS           LL_TIM_GetUpdateSource
1138:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1139:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1140:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
1141:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
1142:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1143:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetUpdateSource(const TIM_TypeDef *TIMx)
1144:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1145:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_URS));
1146:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1147:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1148:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1149:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set one pulse mode (one shot v.s. repetitive).
1150:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          OPM           LL_TIM_SetOnePulseMode
1151:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1152:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  OnePulseMode This parameter can be one of the following values:
1153:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
1154:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
1155:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1156:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1157:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
1158:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1159:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
1160:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1161:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1162:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1163:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get actual one pulse mode.
1164:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          OPM           LL_TIM_GetOnePulseMode
1165:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
ARM GAS  /tmp/ccLne6l3.s 			page 138


1166:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1167:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
1168:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
1169:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1170:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetOnePulseMode(const TIM_TypeDef *TIMx)
1171:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1172:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_OPM));
1173:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1174:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1175:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1176:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the timer counter counting mode.
1177:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
1178:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       check whether or not the counter mode selection feature is supported
1179:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       by a timer instance.
1180:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Switching from Center Aligned counter mode to Edge counter mode (or reverse)
1181:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       requires a timer reset to avoid unexpected direction
1182:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       due to DIR bit readonly in center aligned mode.
1183:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_SetCounterMode\n
1184:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR1          CMS           LL_TIM_SetCounterMode
1185:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1186:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  CounterMode This parameter can be one of the following values:
1187:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_UP
1188:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_DOWN
1189:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
1190:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
1191:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
1192:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1193:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1194:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
1195:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1196:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
1197:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1198:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1199:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1200:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get actual counter mode.
1201:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx) can be used to
1202:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       check whether or not the counter mode selection feature is supported
1203:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       by a timer instance.
1204:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_GetCounterMode\n
1205:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR1          CMS           LL_TIM_GetCounterMode
1206:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1207:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1208:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_UP
1209:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_DOWN
1210:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP
1211:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
1212:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
1213:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1214:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetCounterMode(const TIM_TypeDef *TIMx)
1215:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1216:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t counter_mode;
1217:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1218:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
1219:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1220:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   if (counter_mode == 0U)
1221:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   {
1222:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****     counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
ARM GAS  /tmp/ccLne6l3.s 			page 139


1223:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   }
1224:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1225:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return counter_mode;
1226:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1227:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1228:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1229:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Enable auto-reload (ARR) preload.
1230:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
1231:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1232:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1233:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1234:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
1235:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1240              		.loc 4 1235 1
 1241              		.cfi_startproc
 1242              		@ args = 0, pretend = 0, frame = 8
 1243              		@ frame_needed = 1, uses_anonymous_args = 0
 1244              		@ link register save eliminated.
 1245 0000 80B4     		push	{r7}
 1246              	.LCFI114:
 1247              		.cfi_def_cfa_offset 4
 1248              		.cfi_offset 7, -4
 1249 0002 83B0     		sub	sp, sp, #12
 1250              	.LCFI115:
 1251              		.cfi_def_cfa_offset 16
 1252 0004 00AF     		add	r7, sp, #0
 1253              	.LCFI116:
 1254              		.cfi_def_cfa_register 7
 1255 0006 7860     		str	r0, [r7, #4]
1236:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 1256              		.loc 4 1236 3
 1257 0008 7B68     		ldr	r3, [r7, #4]
 1258 000a 1B68     		ldr	r3, [r3]
 1259 000c 43F08002 		orr	r2, r3, #128
 1260 0010 7B68     		ldr	r3, [r7, #4]
 1261 0012 1A60     		str	r2, [r3]
1237:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1262              		.loc 4 1237 1
 1263 0014 00BF     		nop
 1264 0016 0C37     		adds	r7, r7, #12
 1265              	.LCFI117:
 1266              		.cfi_def_cfa_offset 4
 1267 0018 BD46     		mov	sp, r7
 1268              	.LCFI118:
 1269              		.cfi_def_cfa_register 13
 1270              		@ sp needed
 1271 001a 80BC     		pop	{r7}
 1272              	.LCFI119:
 1273              		.cfi_restore 7
 1274              		.cfi_def_cfa_offset 0
 1275 001c 7047     		bx	lr
 1276              		.cfi_endproc
 1277              	.LFE249:
 1279              		.section	.text.LL_TIM_SetPrescaler,"ax",%progbits
 1280              		.align	1
 1281              		.syntax unified
 1282              		.thumb
ARM GAS  /tmp/ccLne6l3.s 			page 140


 1283              		.thumb_func
 1285              	LL_TIM_SetPrescaler:
 1286              	.LFB257:
1238:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1239:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1240:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Disable auto-reload (ARR) preload.
1241:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
1242:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1243:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1244:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1245:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
1246:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1247:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
1248:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1249:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1250:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1251:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Indicates whether auto-reload (ARR) preload is enabled.
1252:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          ARPE          LL_TIM_IsEnabledARRPreload
1253:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1254:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1255:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1256:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledARRPreload(const TIM_TypeDef *TIMx)
1257:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1258:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR1, TIM_CR1_ARPE) == (TIM_CR1_ARPE)) ? 1UL : 0UL);
1259:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1260:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1261:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1262:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the division ratio between the timer clock  and the sampling clock used by the dead
1263:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         (when supported) and the digital filters.
1264:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
1265:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       whether or not the clock division feature is supported by the timer
1266:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       instance.
1267:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          CKD           LL_TIM_SetClockDivision
1268:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1269:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  ClockDivision This parameter can be one of the following values:
1270:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
1271:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
1272:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
1273:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1274:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1275:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
1276:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1277:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->CR1, TIM_CR1_CKD, ClockDivision);
1278:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1279:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1280:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1281:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get the actual division ratio between the timer clock  and the sampling clock used by t
1282:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         generators (when supported) and the digital filters.
1283:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx) can be used to check
1284:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       whether or not the clock division feature is supported by the timer
1285:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       instance.
1286:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          CKD           LL_TIM_GetClockDivision
1287:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1288:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1289:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV1
1290:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV2
1291:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKDIVISION_DIV4
ARM GAS  /tmp/ccLne6l3.s 			page 141


1292:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1293:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetClockDivision(const TIM_TypeDef *TIMx)
1294:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1295:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CKD));
1296:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1297:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1298:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1299:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the counter value.
1300:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CNT          CNT           LL_TIM_SetCounter
1301:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1302:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
1303:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1304:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1305:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
1306:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1307:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   WRITE_REG(TIMx->CNT, Counter);
1308:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1309:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1310:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1311:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get the counter value.
1312:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CNT          CNT           LL_TIM_GetCounter
1313:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1314:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
1315:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1316:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetCounter(const TIM_TypeDef *TIMx)
1317:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1318:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CNT));
1319:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1320:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1321:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1322:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get the current direction of the counter
1323:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR1          DIR           LL_TIM_GetDirection
1324:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1325:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1326:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERDIRECTION_UP
1327:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_COUNTERDIRECTION_DOWN
1328:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1329:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetDirection(const TIM_TypeDef *TIMx)
1330:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1331:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
1332:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1333:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1334:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1335:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the prescaler value.
1336:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
1337:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note The prescaler can be changed on the fly as this control register is buffered. The new
1338:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       prescaler ratio is taken into account at the next update event.
1339:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_PSC can be used to calculate the Prescaler parameter
1340:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll PSC          PSC           LL_TIM_SetPrescaler
1341:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1342:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Prescaler between Min_Data=0 and Max_Data=65535
1343:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1344:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1345:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
1346:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1287              		.loc 4 1346 1
 1288              		.cfi_startproc
ARM GAS  /tmp/ccLne6l3.s 			page 142


 1289              		@ args = 0, pretend = 0, frame = 8
 1290              		@ frame_needed = 1, uses_anonymous_args = 0
 1291              		@ link register save eliminated.
 1292 0000 80B4     		push	{r7}
 1293              	.LCFI120:
 1294              		.cfi_def_cfa_offset 4
 1295              		.cfi_offset 7, -4
 1296 0002 83B0     		sub	sp, sp, #12
 1297              	.LCFI121:
 1298              		.cfi_def_cfa_offset 16
 1299 0004 00AF     		add	r7, sp, #0
 1300              	.LCFI122:
 1301              		.cfi_def_cfa_register 7
 1302 0006 7860     		str	r0, [r7, #4]
 1303 0008 3960     		str	r1, [r7]
1347:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   WRITE_REG(TIMx->PSC, Prescaler);
 1304              		.loc 4 1347 3
 1305 000a 7B68     		ldr	r3, [r7, #4]
 1306 000c 3A68     		ldr	r2, [r7]
 1307 000e 9A62     		str	r2, [r3, #40]
1348:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1308              		.loc 4 1348 1
 1309 0010 00BF     		nop
 1310 0012 0C37     		adds	r7, r7, #12
 1311              	.LCFI123:
 1312              		.cfi_def_cfa_offset 4
 1313 0014 BD46     		mov	sp, r7
 1314              	.LCFI124:
 1315              		.cfi_def_cfa_register 13
 1316              		@ sp needed
 1317 0016 80BC     		pop	{r7}
 1318              	.LCFI125:
 1319              		.cfi_restore 7
 1320              		.cfi_def_cfa_offset 0
 1321 0018 7047     		bx	lr
 1322              		.cfi_endproc
 1323              	.LFE257:
 1325              		.section	.text.LL_TIM_SetAutoReload,"ax",%progbits
 1326              		.align	1
 1327              		.syntax unified
 1328              		.thumb
 1329              		.thumb_func
 1331              	LL_TIM_SetAutoReload:
 1332              	.LFB259:
1349:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1350:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1351:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get the prescaler value.
1352:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
1353:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1354:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
1355:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1356:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
1357:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1358:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->PSC));
1359:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1360:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1361:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
ARM GAS  /tmp/ccLne6l3.s 			page 143


1362:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the auto-reload value.
1363:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note The counter is blocked while the auto-reload value is null.
1364:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_ARR can be used to calculate the AutoReload parameter
1365:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll ARR          ARR           LL_TIM_SetAutoReload
1366:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1367:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  AutoReload between Min_Data=0 and Max_Data=65535
1368:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1369:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1370:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
1371:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1333              		.loc 4 1371 1
 1334              		.cfi_startproc
 1335              		@ args = 0, pretend = 0, frame = 8
 1336              		@ frame_needed = 1, uses_anonymous_args = 0
 1337              		@ link register save eliminated.
 1338 0000 80B4     		push	{r7}
 1339              	.LCFI126:
 1340              		.cfi_def_cfa_offset 4
 1341              		.cfi_offset 7, -4
 1342 0002 83B0     		sub	sp, sp, #12
 1343              	.LCFI127:
 1344              		.cfi_def_cfa_offset 16
 1345 0004 00AF     		add	r7, sp, #0
 1346              	.LCFI128:
 1347              		.cfi_def_cfa_register 7
 1348 0006 7860     		str	r0, [r7, #4]
 1349 0008 3960     		str	r1, [r7]
1372:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   WRITE_REG(TIMx->ARR, AutoReload);
 1350              		.loc 4 1372 3
 1351 000a 7B68     		ldr	r3, [r7, #4]
 1352 000c 3A68     		ldr	r2, [r7]
 1353 000e DA62     		str	r2, [r3, #44]
1373:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1354              		.loc 4 1373 1
 1355 0010 00BF     		nop
 1356 0012 0C37     		adds	r7, r7, #12
 1357              	.LCFI129:
 1358              		.cfi_def_cfa_offset 4
 1359 0014 BD46     		mov	sp, r7
 1360              	.LCFI130:
 1361              		.cfi_def_cfa_register 13
 1362              		@ sp needed
 1363 0016 80BC     		pop	{r7}
 1364              	.LCFI131:
 1365              		.cfi_restore 7
 1366              		.cfi_def_cfa_offset 0
 1367 0018 7047     		bx	lr
 1368              		.cfi_endproc
 1369              	.LFE259:
 1371              		.section	.text.LL_TIM_CC_EnableChannel,"ax",%progbits
 1372              		.align	1
 1373              		.syntax unified
 1374              		.thumb
 1375              		.thumb_func
 1377              	LL_TIM_CC_EnableChannel:
 1378              	.LFB269:
1374:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 144


1375:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1376:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get the auto-reload value.
1377:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll ARR          ARR           LL_TIM_GetAutoReload
1378:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1379:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Auto-reload value
1380:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1381:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetAutoReload(const TIM_TypeDef *TIMx)
1382:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1383:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->ARR));
1384:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1385:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1386:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1387:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the repetition counter value.
1388:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
1389:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       whether or not a timer instance supports a repetition counter.
1390:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll RCR          REP           LL_TIM_SetRepetitionCounter
1391:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1392:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
1393:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1394:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1395:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
1396:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1397:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   WRITE_REG(TIMx->RCR, RepetitionCounter);
1398:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1399:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1400:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1401:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get the repetition counter value.
1402:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx) can be used to check
1403:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       whether or not a timer instance supports a repetition counter.
1404:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll RCR          REP           LL_TIM_GetRepetitionCounter
1405:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1406:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Repetition counter value
1407:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1408:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_GetRepetitionCounter(const TIM_TypeDef *TIMx)
1409:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1410:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->RCR));
1411:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1412:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1413:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1414:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
1415:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1416:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1417:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Capture_Compare Capture Compare configuration
1418:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
1419:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1420:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1421:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Enable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
1422:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note CCxE, CCxNE and OCxM bits are preloaded, after having been written,
1423:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       they are updated only when a commutation event (COM) occurs.
1424:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Only on channels that have a complementary output.
1425:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1426:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1427:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR2          CCPC          LL_TIM_CC_EnablePreload
1428:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1429:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1430:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1431:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_EnablePreload(TIM_TypeDef *TIMx)
ARM GAS  /tmp/ccLne6l3.s 			page 145


1432:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1433:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
1434:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1435:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1436:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1437:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Disable  the capture/compare control bits (CCxE, CCxNE and OCxM) preload.
1438:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1439:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1440:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR2          CCPC          LL_TIM_CC_DisablePreload
1441:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1442:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1443:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1444:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_DisablePreload(TIM_TypeDef *TIMx)
1445:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1446:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR2, TIM_CR2_CCPC);
1447:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1448:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1449:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1450:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the updated source of the capture/compare control bits (CCxE, CCxNE and OCxM).
1451:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_COMMUTATION_EVENT_INSTANCE(TIMx) can be used to check
1452:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       whether or not a timer instance is able to generate a commutation event.
1453:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR2          CCUS          LL_TIM_CC_SetUpdate
1454:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1455:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  CCUpdateSource This parameter can be one of the following values:
1456:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_ONLY
1457:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI
1458:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1459:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1460:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetUpdate(TIM_TypeDef *TIMx, uint32_t CCUpdateSource)
1461:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1462:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
1463:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1464:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1465:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1466:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the trigger of the capture/compare DMA request.
1467:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR2          CCDS          LL_TIM_CC_SetDMAReqTrigger
1468:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1469:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  DMAReqTrigger This parameter can be one of the following values:
1470:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_CC
1471:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
1472:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1473:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1474:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
1475:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1476:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
1477:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1478:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1479:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1480:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get actual trigger of the capture/compare DMA request.
1481:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR2          CCDS          LL_TIM_CC_GetDMAReqTrigger
1482:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1483:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1484:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_CC
1485:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
1486:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1487:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_CC_GetDMAReqTrigger(const TIM_TypeDef *TIMx)
1488:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
ARM GAS  /tmp/ccLne6l3.s 			page 146


1489:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_BIT(TIMx->CR2, TIM_CR2_CCDS));
1490:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1491:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1492:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1493:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the lock level to freeze the
1494:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         configuration of several capture/compare parameters.
1495:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
1496:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       the lock mechanism is supported by a timer instance.
1497:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll BDTR         LOCK          LL_TIM_CC_SetLockLevel
1498:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1499:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  LockLevel This parameter can be one of the following values:
1500:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_OFF
1501:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_1
1502:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_2
1503:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_LOCKLEVEL_3
1504:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1505:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1506:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_SetLockLevel(TIM_TypeDef *TIMx, uint32_t LockLevel)
1507:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1508:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_LOCK, LockLevel);
1509:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1510:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1511:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1512:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Enable capture/compare channels.
1513:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_EnableChannel\n
1514:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_EnableChannel\n
1515:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_EnableChannel\n
1516:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_EnableChannel\n
1517:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_EnableChannel\n
1518:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_EnableChannel\n
1519:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_EnableChannel
1520:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1521:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1522:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1523:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1524:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1525:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1526:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1527:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1528:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1529:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1530:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1531:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1532:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1379              		.loc 4 1532 1
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 8
 1382              		@ frame_needed = 1, uses_anonymous_args = 0
 1383              		@ link register save eliminated.
 1384 0000 80B4     		push	{r7}
 1385              	.LCFI132:
 1386              		.cfi_def_cfa_offset 4
 1387              		.cfi_offset 7, -4
 1388 0002 83B0     		sub	sp, sp, #12
 1389              	.LCFI133:
 1390              		.cfi_def_cfa_offset 16
 1391 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccLne6l3.s 			page 147


 1392              	.LCFI134:
 1393              		.cfi_def_cfa_register 7
 1394 0006 7860     		str	r0, [r7, #4]
 1395 0008 3960     		str	r1, [r7]
1533:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   SET_BIT(TIMx->CCER, Channels);
 1396              		.loc 4 1533 3
 1397 000a 7B68     		ldr	r3, [r7, #4]
 1398 000c 1A6A     		ldr	r2, [r3, #32]
 1399 000e 3B68     		ldr	r3, [r7]
 1400 0010 1A43     		orrs	r2, r2, r3
 1401 0012 7B68     		ldr	r3, [r7, #4]
 1402 0014 1A62     		str	r2, [r3, #32]
1534:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1403              		.loc 4 1534 1
 1404 0016 00BF     		nop
 1405 0018 0C37     		adds	r7, r7, #12
 1406              	.LCFI135:
 1407              		.cfi_def_cfa_offset 4
 1408 001a BD46     		mov	sp, r7
 1409              	.LCFI136:
 1410              		.cfi_def_cfa_register 13
 1411              		@ sp needed
 1412 001c 80BC     		pop	{r7}
 1413              	.LCFI137:
 1414              		.cfi_restore 7
 1415              		.cfi_def_cfa_offset 0
 1416 001e 7047     		bx	lr
 1417              		.cfi_endproc
 1418              	.LFE269:
 1420              		.section	.text.LL_TIM_OC_DisableFast,"ax",%progbits
 1421              		.align	1
 1422              		.syntax unified
 1423              		.thumb
 1424              		.thumb_func
 1426              	LL_TIM_OC_DisableFast:
 1427              	.LFB280:
1535:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1536:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1537:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Disable capture/compare channels.
1538:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_DisableChannel\n
1539:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_DisableChannel\n
1540:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_DisableChannel\n
1541:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_DisableChannel\n
1542:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_DisableChannel\n
1543:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_DisableChannel\n
1544:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_DisableChannel
1545:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1546:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1547:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1548:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1549:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1550:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1551:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1552:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1553:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1554:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1555:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
ARM GAS  /tmp/ccLne6l3.s 			page 148


1556:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
1557:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1558:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(TIMx->CCER, Channels);
1559:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1560:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1561:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1562:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Indicate whether channel(s) is(are) enabled.
1563:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCER         CC1E          LL_TIM_CC_IsEnabledChannel\n
1564:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC1NE         LL_TIM_CC_IsEnabledChannel\n
1565:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2E          LL_TIM_CC_IsEnabledChannel\n
1566:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2NE         LL_TIM_CC_IsEnabledChannel\n
1567:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3E          LL_TIM_CC_IsEnabledChannel\n
1568:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3NE         LL_TIM_CC_IsEnabledChannel\n
1569:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC4E          LL_TIM_CC_IsEnabledChannel
1570:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1571:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channels This parameter can be a combination of the following values:
1572:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1573:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1574:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1575:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1576:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1577:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1578:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1579:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1580:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1581:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(const TIM_TypeDef *TIMx, uint32_t Channels)
1582:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1583:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
1584:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1585:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1586:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1587:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
1588:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1589:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1590:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Output_Channel Output channel configuration
1591:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
1592:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1593:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1594:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Configure an output channel.
1595:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_OC_ConfigOutput\n
1596:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_OC_ConfigOutput\n
1597:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_OC_ConfigOutput\n
1598:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_OC_ConfigOutput\n
1599:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC1P          LL_TIM_OC_ConfigOutput\n
1600:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_ConfigOutput\n
1601:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_ConfigOutput\n
1602:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_ConfigOutput\n
1603:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2          OIS1          LL_TIM_OC_ConfigOutput\n
1604:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2          OIS2          LL_TIM_OC_ConfigOutput\n
1605:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2          OIS3          LL_TIM_OC_ConfigOutput\n
1606:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2          OIS4          LL_TIM_OC_ConfigOutput
1607:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1608:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1609:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1610:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1611:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1612:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
ARM GAS  /tmp/ccLne6l3.s 			page 149


1613:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Configuration This parameter must be a combination of all the following values:
1614:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH or @ref LL_TIM_OCPOLARITY_LOW
1615:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW or @ref LL_TIM_OCIDLESTATE_HIGH
1616:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1617:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1618:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_ConfigOutput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configura
1619:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1620:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1621:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1622:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_CC1S << SHIFT_TAB_OCxx[iChannel]));
1623:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),
1624:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****              (Configuration & TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]);
1625:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),
1626:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****              (Configuration & TIM_CR2_OIS1) << SHIFT_TAB_OISx[iChannel]);
1627:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1628:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1629:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1630:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Define the behavior of the output reference signal OCxREF from which
1631:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         OCx and OCxN (when relevant) are derived.
1632:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        OC1M          LL_TIM_OC_SetMode\n
1633:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        OC2M          LL_TIM_OC_SetMode\n
1634:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC3M          LL_TIM_OC_SetMode\n
1635:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC4M          LL_TIM_OC_SetMode
1636:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1637:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1638:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1639:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1640:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1641:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1642:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Mode This parameter can be one of the following values:
1643:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FROZEN
1644:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ACTIVE
1645:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_INACTIVE
1646:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_TOGGLE
1647:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
1648:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
1649:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM1
1650:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM2
1651:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1652:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1653:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
1654:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1655:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1656:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1657:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT
1658:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1659:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1660:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1661:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get the output compare mode of an output channel.
1662:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        OC1M          LL_TIM_OC_GetMode\n
1663:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        OC2M          LL_TIM_OC_GetMode\n
1664:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC3M          LL_TIM_OC_GetMode\n
1665:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC4M          LL_TIM_OC_GetMode
1666:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1667:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1668:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1669:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
ARM GAS  /tmp/ccLne6l3.s 			page 150


1670:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1671:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1672:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1673:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FROZEN
1674:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_ACTIVE
1675:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_INACTIVE
1676:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_TOGGLE
1677:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_INACTIVE
1678:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_FORCED_ACTIVE
1679:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM1
1680:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCMODE_PWM2
1681:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1682:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetMode(const TIM_TypeDef *TIMx, uint32_t Channel)
1683:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1684:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1685:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1686:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (READ_BIT(*pReg, ((TIM_CCMR1_OC1M | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel])) >> SHIFT
1687:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1688:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1689:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1690:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the polarity of an output channel.
1691:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_OC_SetPolarity\n
1692:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_OC_SetPolarity\n
1693:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_SetPolarity\n
1694:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_OC_SetPolarity\n
1695:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_SetPolarity\n
1696:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_OC_SetPolarity\n
1697:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_SetPolarity
1698:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1699:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1700:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1701:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1702:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1703:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1704:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1705:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1706:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1707:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Polarity This parameter can be one of the following values:
1708:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH
1709:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_LOW
1710:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1711:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1712:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
1713:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1714:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1715:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[i
1716:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1717:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1718:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1719:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get the polarity of an output channel.
1720:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_OC_GetPolarity\n
1721:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_OC_GetPolarity\n
1722:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_OC_GetPolarity\n
1723:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_OC_GetPolarity\n
1724:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_OC_GetPolarity\n
1725:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_OC_GetPolarity\n
1726:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_OC_GetPolarity
ARM GAS  /tmp/ccLne6l3.s 			page 151


1727:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1728:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1729:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1730:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1731:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1732:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1733:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1734:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1735:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1736:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1737:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_HIGH
1738:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCPOLARITY_LOW
1739:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1740:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetPolarity(const TIM_TypeDef *TIMx, uint32_t Channel)
1741:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1742:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1743:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (READ_BIT(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel])) >> SHIFT_TAB_CCxP[iChan
1744:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1745:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1746:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1747:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the IDLE state of an output channel
1748:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note This function is significant only for the timer instances
1749:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       supporting the break feature. Macro IS_TIM_BREAK_INSTANCE(TIMx)
1750:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       can be used to check whether or not a timer instance provides
1751:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a break input.
1752:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR2         OIS1          LL_TIM_OC_SetIdleState\n
1753:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2         OIS1N         LL_TIM_OC_SetIdleState\n
1754:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2         OIS2          LL_TIM_OC_SetIdleState\n
1755:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2         OIS2N         LL_TIM_OC_SetIdleState\n
1756:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2         OIS3          LL_TIM_OC_SetIdleState\n
1757:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2         OIS3N         LL_TIM_OC_SetIdleState\n
1758:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2         OIS4          LL_TIM_OC_SetIdleState
1759:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1760:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1761:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1762:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1763:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1764:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1765:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1766:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1767:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1768:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  IdleState This parameter can be one of the following values:
1769:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW
1770:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
1771:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1772:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1773:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState
1774:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1775:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1776:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel]),  IdleState << SHIFT_TAB_OISx[iC
1777:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1778:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1779:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1780:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get the IDLE state of an output channel
1781:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR2         OIS1          LL_TIM_OC_GetIdleState\n
1782:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2         OIS1N         LL_TIM_OC_GetIdleState\n
1783:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2         OIS2          LL_TIM_OC_GetIdleState\n
ARM GAS  /tmp/ccLne6l3.s 			page 152


1784:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2         OIS2N         LL_TIM_OC_GetIdleState\n
1785:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2         OIS3          LL_TIM_OC_GetIdleState\n
1786:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2         OIS3N         LL_TIM_OC_GetIdleState\n
1787:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CR2         OIS4          LL_TIM_OC_GetIdleState
1788:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1789:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1790:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1791:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1N
1792:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1793:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2N
1794:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1795:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3N
1796:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1797:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
1798:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_LOW
1799:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OCIDLESTATE_HIGH
1800:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1801:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetIdleState(const TIM_TypeDef *TIMx, uint32_t Channel)
1802:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1803:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1804:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (READ_BIT(TIMx->CR2, (TIM_CR2_OIS1 << SHIFT_TAB_OISx[iChannel])) >> SHIFT_TAB_OISx[iChanne
1805:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1806:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1807:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1808:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Enable fast mode for the output channel.
1809:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Acts only if the channel is configured in PWM1 or PWM2 mode.
1810:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_EnableFast\n
1811:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_EnableFast\n
1812:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_EnableFast\n
1813:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_EnableFast
1814:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1815:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1816:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1817:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1818:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1819:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1820:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1821:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1822:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
1823:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1824:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1825:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1826:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
1827:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1828:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1829:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1830:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1831:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Disable fast mode for the output channel.
1832:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_DisableFast\n
1833:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_DisableFast\n
1834:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_DisableFast\n
1835:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_DisableFast
1836:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1837:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1838:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1839:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1840:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
ARM GAS  /tmp/ccLne6l3.s 			page 153


1841:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1842:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1843:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1844:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
1845:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1428              		.loc 4 1845 1
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 16
 1431              		@ frame_needed = 1, uses_anonymous_args = 0
 1432              		@ link register save eliminated.
 1433 0000 80B4     		push	{r7}
 1434              	.LCFI138:
 1435              		.cfi_def_cfa_offset 4
 1436              		.cfi_offset 7, -4
 1437 0002 85B0     		sub	sp, sp, #20
 1438              	.LCFI139:
 1439              		.cfi_def_cfa_offset 24
 1440 0004 00AF     		add	r7, sp, #0
 1441              	.LCFI140:
 1442              		.cfi_def_cfa_register 7
 1443 0006 7860     		str	r0, [r7, #4]
 1444 0008 3960     		str	r1, [r7]
1846:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 1445              		.loc 4 1846 11
 1446 000a 3B68     		ldr	r3, [r7]
 1447 000c 012B     		cmp	r3, #1
 1448 000e 1CD0     		beq	.L46
 1449              		.loc 4 1846 11 is_stmt 0 discriminator 1
 1450 0010 3B68     		ldr	r3, [r7]
 1451 0012 042B     		cmp	r3, #4
 1452 0014 17D0     		beq	.L47
 1453              		.loc 4 1846 11 discriminator 3
 1454 0016 3B68     		ldr	r3, [r7]
 1455 0018 102B     		cmp	r3, #16
 1456 001a 12D0     		beq	.L48
 1457              		.loc 4 1846 11 discriminator 5
 1458 001c 3B68     		ldr	r3, [r7]
 1459 001e 402B     		cmp	r3, #64
 1460 0020 0DD0     		beq	.L49
 1461              		.loc 4 1846 11 discriminator 7
 1462 0022 3B68     		ldr	r3, [r7]
 1463 0024 B3F5807F 		cmp	r3, #256
 1464 0028 07D0     		beq	.L50
 1465              		.loc 4 1846 11 discriminator 9
 1466 002a 3B68     		ldr	r3, [r7]
 1467 002c B3F5806F 		cmp	r3, #1024
 1468 0030 01D1     		bne	.L51
 1469              		.loc 4 1846 11 discriminator 11
 1470 0032 0523     		movs	r3, #5
 1471 0034 0AE0     		b	.L57
 1472              	.L51:
 1473              		.loc 4 1846 11 discriminator 12
 1474 0036 0623     		movs	r3, #6
 1475 0038 08E0     		b	.L57
 1476              	.L50:
 1477              		.loc 4 1846 11 discriminator 10
 1478 003a 0423     		movs	r3, #4
ARM GAS  /tmp/ccLne6l3.s 			page 154


 1479 003c 06E0     		b	.L57
 1480              	.L49:
 1481              		.loc 4 1846 11 discriminator 8
 1482 003e 0323     		movs	r3, #3
 1483 0040 04E0     		b	.L57
 1484              	.L48:
 1485              		.loc 4 1846 11 discriminator 6
 1486 0042 0223     		movs	r3, #2
 1487 0044 02E0     		b	.L57
 1488              	.L47:
 1489              		.loc 4 1846 11 discriminator 4
 1490 0046 0123     		movs	r3, #1
 1491 0048 00E0     		b	.L57
 1492              	.L46:
 1493              		.loc 4 1846 11 discriminator 2
 1494 004a 0023     		movs	r3, #0
 1495              	.L57:
 1496              		.loc 4 1846 11 discriminator 24
 1497 004c FB73     		strb	r3, [r7, #15]
1847:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
 1498              		.loc 4 1847 65 is_stmt 1 discriminator 24
 1499 004e 7B68     		ldr	r3, [r7, #4]
 1500 0050 1833     		adds	r3, r3, #24
 1501              		.loc 4 1847 54 discriminator 24
 1502 0052 1946     		mov	r1, r3
 1503              		.loc 4 1847 97 discriminator 24
 1504 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1505 0056 0A4A     		ldr	r2, .L58
 1506 0058 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1507              		.loc 4 1847 43 discriminator 24
 1508 005a 0B44     		add	r3, r3, r1
 1509              		.loc 4 1847 18 discriminator 24
 1510 005c BB60     		str	r3, [r7, #8]
1848:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 1511              		.loc 4 1848 3 discriminator 24
 1512 005e BB68     		ldr	r3, [r7, #8]
 1513 0060 1A68     		ldr	r2, [r3]
 1514 0062 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1515 0064 0749     		ldr	r1, .L58+4
 1516 0066 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 1517 0068 1946     		mov	r1, r3
 1518 006a 0423     		movs	r3, #4
 1519 006c 8B40     		lsls	r3, r3, r1
 1520 006e DB43     		mvns	r3, r3
 1521 0070 1A40     		ands	r2, r2, r3
 1522 0072 BB68     		ldr	r3, [r7, #8]
 1523 0074 1A60     		str	r2, [r3]
1849:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1850:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1524              		.loc 4 1850 1 discriminator 24
 1525 0076 00BF     		nop
 1526 0078 1437     		adds	r7, r7, #20
 1527              	.LCFI141:
 1528              		.cfi_def_cfa_offset 4
 1529 007a BD46     		mov	sp, r7
 1530              	.LCFI142:
 1531              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccLne6l3.s 			page 155


 1532              		@ sp needed
 1533 007c 80BC     		pop	{r7}
 1534              	.LCFI143:
 1535              		.cfi_restore 7
 1536              		.cfi_def_cfa_offset 0
 1537 007e 7047     		bx	lr
 1538              	.L59:
 1539              		.align	2
 1540              	.L58:
 1541 0080 00000000 		.word	OFFSET_TAB_CCMRx
 1542 0084 00000000 		.word	SHIFT_TAB_OCxx
 1543              		.cfi_endproc
 1544              	.LFE280:
 1546              		.section	.text.LL_TIM_OC_EnablePreload,"ax",%progbits
 1547              		.align	1
 1548              		.syntax unified
 1549              		.thumb
 1550              		.thumb_func
 1552              	LL_TIM_OC_EnablePreload:
 1553              	.LFB282:
1851:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1852:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1853:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Indicates whether fast mode is enabled for the output channel.
1854:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        OC1FE          LL_TIM_OC_IsEnabledFast\n
1855:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        OC2FE          LL_TIM_OC_IsEnabledFast\n
1856:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC3FE          LL_TIM_OC_IsEnabledFast\n
1857:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC4FE          LL_TIM_OC_IsEnabledFast\n
1858:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1859:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1860:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1861:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1862:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1863:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1864:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1865:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1866:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledFast(const TIM_TypeDef *TIMx, uint32_t Channel)
1867:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1868:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1869:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1870:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel];
1871:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
1872:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1873:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1874:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1875:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Enable compare register (TIMx_CCRx) preload for the output channel.
1876:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_EnablePreload\n
1877:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_EnablePreload\n
1878:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_EnablePreload\n
1879:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_EnablePreload
1880:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1881:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1882:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1883:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1884:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1885:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1886:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1887:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
ARM GAS  /tmp/ccLne6l3.s 			page 156


1888:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
1889:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1554              		.loc 4 1889 1
 1555              		.cfi_startproc
 1556              		@ args = 0, pretend = 0, frame = 16
 1557              		@ frame_needed = 1, uses_anonymous_args = 0
 1558              		@ link register save eliminated.
 1559 0000 80B4     		push	{r7}
 1560              	.LCFI144:
 1561              		.cfi_def_cfa_offset 4
 1562              		.cfi_offset 7, -4
 1563 0002 85B0     		sub	sp, sp, #20
 1564              	.LCFI145:
 1565              		.cfi_def_cfa_offset 24
 1566 0004 00AF     		add	r7, sp, #0
 1567              	.LCFI146:
 1568              		.cfi_def_cfa_register 7
 1569 0006 7860     		str	r0, [r7, #4]
 1570 0008 3960     		str	r1, [r7]
1890:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 1571              		.loc 4 1890 11
 1572 000a 3B68     		ldr	r3, [r7]
 1573 000c 012B     		cmp	r3, #1
 1574 000e 1CD0     		beq	.L61
 1575              		.loc 4 1890 11 is_stmt 0 discriminator 1
 1576 0010 3B68     		ldr	r3, [r7]
 1577 0012 042B     		cmp	r3, #4
 1578 0014 17D0     		beq	.L62
 1579              		.loc 4 1890 11 discriminator 3
 1580 0016 3B68     		ldr	r3, [r7]
 1581 0018 102B     		cmp	r3, #16
 1582 001a 12D0     		beq	.L63
 1583              		.loc 4 1890 11 discriminator 5
 1584 001c 3B68     		ldr	r3, [r7]
 1585 001e 402B     		cmp	r3, #64
 1586 0020 0DD0     		beq	.L64
 1587              		.loc 4 1890 11 discriminator 7
 1588 0022 3B68     		ldr	r3, [r7]
 1589 0024 B3F5807F 		cmp	r3, #256
 1590 0028 07D0     		beq	.L65
 1591              		.loc 4 1890 11 discriminator 9
 1592 002a 3B68     		ldr	r3, [r7]
 1593 002c B3F5806F 		cmp	r3, #1024
 1594 0030 01D1     		bne	.L66
 1595              		.loc 4 1890 11 discriminator 11
 1596 0032 0523     		movs	r3, #5
 1597 0034 0AE0     		b	.L72
 1598              	.L66:
 1599              		.loc 4 1890 11 discriminator 12
 1600 0036 0623     		movs	r3, #6
 1601 0038 08E0     		b	.L72
 1602              	.L65:
 1603              		.loc 4 1890 11 discriminator 10
 1604 003a 0423     		movs	r3, #4
 1605 003c 06E0     		b	.L72
 1606              	.L64:
 1607              		.loc 4 1890 11 discriminator 8
ARM GAS  /tmp/ccLne6l3.s 			page 157


 1608 003e 0323     		movs	r3, #3
 1609 0040 04E0     		b	.L72
 1610              	.L63:
 1611              		.loc 4 1890 11 discriminator 6
 1612 0042 0223     		movs	r3, #2
 1613 0044 02E0     		b	.L72
 1614              	.L62:
 1615              		.loc 4 1890 11 discriminator 4
 1616 0046 0123     		movs	r3, #1
 1617 0048 00E0     		b	.L72
 1618              	.L61:
 1619              		.loc 4 1890 11 discriminator 2
 1620 004a 0023     		movs	r3, #0
 1621              	.L72:
 1622              		.loc 4 1890 11 discriminator 24
 1623 004c FB73     		strb	r3, [r7, #15]
1891:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
 1624              		.loc 4 1891 65 is_stmt 1 discriminator 24
 1625 004e 7B68     		ldr	r3, [r7, #4]
 1626 0050 1833     		adds	r3, r3, #24
 1627              		.loc 4 1891 54 discriminator 24
 1628 0052 1946     		mov	r1, r3
 1629              		.loc 4 1891 97 discriminator 24
 1630 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1631 0056 0A4A     		ldr	r2, .L73
 1632 0058 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1633              		.loc 4 1891 43 discriminator 24
 1634 005a 0B44     		add	r3, r3, r1
 1635              		.loc 4 1891 18 discriminator 24
 1636 005c BB60     		str	r3, [r7, #8]
1892:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 1637              		.loc 4 1892 3 discriminator 24
 1638 005e BB68     		ldr	r3, [r7, #8]
 1639 0060 1A68     		ldr	r2, [r3]
 1640 0062 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1641 0064 0749     		ldr	r1, .L73+4
 1642 0066 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 1643 0068 1946     		mov	r1, r3
 1644 006a 0823     		movs	r3, #8
 1645 006c 8B40     		lsls	r3, r3, r1
 1646 006e 1A43     		orrs	r2, r2, r3
 1647 0070 BB68     		ldr	r3, [r7, #8]
 1648 0072 1A60     		str	r2, [r3]
1893:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1649              		.loc 4 1893 1 discriminator 24
 1650 0074 00BF     		nop
 1651 0076 1437     		adds	r7, r7, #20
 1652              	.LCFI147:
 1653              		.cfi_def_cfa_offset 4
 1654 0078 BD46     		mov	sp, r7
 1655              	.LCFI148:
 1656              		.cfi_def_cfa_register 13
 1657              		@ sp needed
 1658 007a 80BC     		pop	{r7}
 1659              	.LCFI149:
 1660              		.cfi_restore 7
 1661              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccLne6l3.s 			page 158


 1662 007c 7047     		bx	lr
 1663              	.L74:
 1664 007e 00BF     		.align	2
 1665              	.L73:
 1666 0080 00000000 		.word	OFFSET_TAB_CCMRx
 1667 0084 00000000 		.word	SHIFT_TAB_OCxx
 1668              		.cfi_endproc
 1669              	.LFE282:
 1671              		.section	.text.LL_TIM_SetClockSource,"ax",%progbits
 1672              		.align	1
 1673              		.syntax unified
 1674              		.thumb
 1675              		.thumb_func
 1677              	LL_TIM_SetClockSource:
 1678              	.LFB316:
1894:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1895:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1896:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Disable compare register (TIMx_CCRx) preload for the output channel.
1897:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_DisablePreload\n
1898:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_DisablePreload\n
1899:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_DisablePreload\n
1900:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_DisablePreload
1901:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1902:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1903:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1904:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1905:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1906:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1907:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1908:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1909:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
1910:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1911:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1912:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1913:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
1914:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1915:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1916:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1917:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Indicates whether compare register (TIMx_CCRx) preload is enabled for the output channe
1918:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        OC1PE          LL_TIM_OC_IsEnabledPreload\n
1919:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        OC2PE          LL_TIM_OC_IsEnabledPreload\n
1920:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC3PE          LL_TIM_OC_IsEnabledPreload\n
1921:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC4PE          LL_TIM_OC_IsEnabledPreload\n
1922:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1923:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1924:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1925:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1926:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1927:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1928:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval State of bit (1 or 0).
1929:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1930:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledPreload(const TIM_TypeDef *TIMx, uint32_t Channel)
1931:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1932:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1933:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
1934:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel];
1935:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
ARM GAS  /tmp/ccLne6l3.s 			page 159


1936:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1937:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1938:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1939:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Enable clearing the output channel on an external event.
1940:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes. It does not work in Force
1941:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
1942:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
1943:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_EnableClear\n
1944:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_EnableClear\n
1945:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_EnableClear\n
1946:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_EnableClear
1947:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1948:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1949:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1950:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1951:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1952:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1953:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1954:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1955:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_EnableClear(TIM_TypeDef *TIMx, uint32_t Channel)
1956:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1957:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1958:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1959:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   SET_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
1960:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1961:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1962:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1963:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Disable clearing the output channel on an external event.
1964:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
1965:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
1966:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_DisableClear\n
1967:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_DisableClear\n
1968:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_DisableClear\n
1969:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_DisableClear
1970:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1971:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1972:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1973:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1974:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
1975:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
1976:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
1977:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
1978:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_DisableClear(TIM_TypeDef *TIMx, uint32_t Channel)
1979:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
1980:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
1981:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
1982:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(*pReg, (TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel]));
1983:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
1984:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
1985:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
1986:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Indicates clearing the output channel on an external event is enabled for the output ch
1987:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note This function enables clearing the output channel on an external event.
1988:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note This function can only be used in Output compare and PWM modes. It does not work in Force
1989:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_OCXREF_CLEAR_INSTANCE(TIMx) can be used to check whether
1990:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       or not a timer instance can clear the OCxREF signal on an external event.
1991:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        OC1CE          LL_TIM_OC_IsEnabledClear\n
1992:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        OC2CE          LL_TIM_OC_IsEnabledClear\n
ARM GAS  /tmp/ccLne6l3.s 			page 160


1993:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC3CE          LL_TIM_OC_IsEnabledClear\n
1994:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        OC4CE          LL_TIM_OC_IsEnabledClear\n
1995:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
1996:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
1997:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
1998:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
1999:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2000:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2001:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2002:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2003:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_IsEnabledClear(const TIM_TypeDef *TIMx, uint32_t Channel)
2004:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2005:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2006:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2007:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint32_t bitfield = TIM_CCMR1_OC1CE << SHIFT_TAB_OCxx[iChannel];
2008:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(*pReg, bitfield) == bitfield) ? 1UL : 0UL);
2009:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2010:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2011:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2012:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the dead-time delay (delay inserted between the rising edge of the OCxREF signal an
2013:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         the Ocx and OCxN signals).
2014:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2015:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       dead-time insertion feature is supported by a timer instance.
2016:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Helper macro @ref __LL_TIM_CALC_DEADTIME can be used to calculate the DeadTime parameter
2017:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll BDTR         DTG           LL_TIM_OC_SetDeadTime
2018:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2019:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  DeadTime between Min_Data=0 and Max_Data=255
2020:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2021:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2022:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetDeadTime(TIM_TypeDef *TIMx, uint32_t DeadTime)
2023:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2024:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_DTG, DeadTime);
2025:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2026:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2027:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2028:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set compare value for output channel 1 (TIMx_CCR1).
2029:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
2030:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       output channel 1 is supported by a timer instance.
2031:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_OC_SetCompareCH1
2032:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2033:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2034:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2035:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2036:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
2037:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2038:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   WRITE_REG(TIMx->CCR1, CompareValue);
2039:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2040:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2041:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2042:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set compare value for output channel 2 (TIMx_CCR2).
2043:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
2044:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       output channel 2 is supported by a timer instance.
2045:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_OC_SetCompareCH2
2046:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2047:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2048:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2049:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
ARM GAS  /tmp/ccLne6l3.s 			page 161


2050:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
2051:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2052:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   WRITE_REG(TIMx->CCR2, CompareValue);
2053:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2054:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2055:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2056:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set compare value for output channel 3 (TIMx_CCR3).
2057:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
2058:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       output channel is supported by a timer instance.
2059:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_OC_SetCompareCH3
2060:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2061:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2062:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2063:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2064:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
2065:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2066:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   WRITE_REG(TIMx->CCR3, CompareValue);
2067:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2068:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2069:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2070:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set compare value for output channel 4 (TIMx_CCR4).
2071:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
2072:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       output channel 4 is supported by a timer instance.
2073:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_OC_SetCompareCH4
2074:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2075:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  CompareValue between Min_Data=0 and Max_Data=65535
2076:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2077:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2078:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
2079:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2080:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   WRITE_REG(TIMx->CCR4, CompareValue);
2081:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2082:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2083:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2084:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR1) set for  output channel 1.
2085:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
2086:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       output channel 1 is supported by a timer instance.
2087:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
2088:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2089:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2090:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2091:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(const TIM_TypeDef *TIMx)
2092:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2093:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR1));
2094:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2095:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2096:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2097:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR2) set for  output channel 2.
2098:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
2099:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       output channel 2 is supported by a timer instance.
2100:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
2101:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2102:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2103:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2104:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(const TIM_TypeDef *TIMx)
2105:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2106:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR2));
ARM GAS  /tmp/ccLne6l3.s 			page 162


2107:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2108:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2109:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2110:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR3) set for  output channel 3.
2111:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
2112:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       output channel 3 is supported by a timer instance.
2113:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_OC_GetCompareCH3
2114:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2115:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2116:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2117:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH3(const TIM_TypeDef *TIMx)
2118:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2119:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR3));
2120:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2121:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2122:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2123:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get compare value (TIMx_CCR4) set for  output channel 4.
2124:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
2125:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       output channel 4 is supported by a timer instance.
2126:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_OC_GetCompareCH4
2127:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2128:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
2129:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2130:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH4(const TIM_TypeDef *TIMx)
2131:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2132:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR4));
2133:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2134:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2135:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2136:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
2137:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2138:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2139:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Input_Channel Input channel configuration
2140:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
2141:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2142:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2143:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Configure input channel.
2144:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_Config\n
2145:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        IC1PSC        LL_TIM_IC_Config\n
2146:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        IC1F          LL_TIM_IC_Config\n
2147:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_Config\n
2148:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_Config\n
2149:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_Config\n
2150:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_Config\n
2151:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_Config\n
2152:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_Config\n
2153:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_Config\n
2154:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_Config\n
2155:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_Config\n
2156:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC1P          LL_TIM_IC_Config\n
2157:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_Config\n
2158:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_Config\n
2159:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_Config\n
2160:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_Config\n
2161:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_Config\n
2162:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_Config\n
2163:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
ARM GAS  /tmp/ccLne6l3.s 			page 163


2164:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2165:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2166:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2167:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2168:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2169:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Configuration This parameter must be a combination of all the following values:
2170:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI or @ref LL_TIM_ACTIVEINPUT_INDIRECTTI or @ref LL_
2171:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1 or ... or @ref LL_TIM_ICPSC_DIV8
2172:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1 or ... or @ref LL_TIM_IC_FILTER_FDIV32_N8
2173:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING or @ref LL_TIM_IC_POLARITY_FALLING
2174:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2175:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2176:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
2177:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2178:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2179:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2180:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChanne
2181:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****              ((Configuration >> 16U) & (TIM_CCMR1_IC1F | TIM_CCMR1_IC1PSC | TIM_CCMR1_CC1S))       
2182:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****              << SHIFT_TAB_ICxx[iChannel]);
2183:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
2184:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****              (Configuration & (TIM_CCER_CC1NP | TIM_CCER_CC1P)) << SHIFT_TAB_CCxP[iChannel]);
2185:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2186:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2187:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2188:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the active input.
2189:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_SetActiveInput\n
2190:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_SetActiveInput\n
2191:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_SetActiveInput\n
2192:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_SetActiveInput
2193:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2194:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2195:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2196:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2197:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2198:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2199:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  ICActiveInput This parameter can be one of the following values:
2200:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
2201:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
2202:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
2203:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2204:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2205:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiv
2206:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2207:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2208:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2209:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT
2210:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2211:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2212:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2213:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get the current active input.
2214:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        CC1S          LL_TIM_IC_GetActiveInput\n
2215:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        CC2S          LL_TIM_IC_GetActiveInput\n
2216:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        CC3S          LL_TIM_IC_GetActiveInput\n
2217:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        CC4S          LL_TIM_IC_GetActiveInput
2218:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2219:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2220:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
ARM GAS  /tmp/ccLne6l3.s 			page 164


2221:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2222:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2223:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2224:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2225:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_DIRECTTI
2226:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
2227:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
2228:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2229:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetActiveInput(const TIM_TypeDef *TIMx, uint32_t Channel)
2230:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2231:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2232:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2233:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChann
2234:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2235:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2236:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2237:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the prescaler of input channel.
2238:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_SetPrescaler\n
2239:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_SetPrescaler\n
2240:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_SetPrescaler\n
2241:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_SetPrescaler
2242:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2243:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2244:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2245:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2246:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2247:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2248:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  ICPrescaler This parameter can be one of the following values:
2249:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
2250:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
2251:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
2252:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
2253:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2254:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2255:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescal
2256:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2257:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2258:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2259:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT
2260:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2261:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2262:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2263:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get the current prescaler value acting on an  input channel.
2264:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        IC1PSC        LL_TIM_IC_GetPrescaler\n
2265:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        IC2PSC        LL_TIM_IC_GetPrescaler\n
2266:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        IC3PSC        LL_TIM_IC_GetPrescaler\n
2267:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        IC4PSC        LL_TIM_IC_GetPrescaler
2268:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2269:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2270:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2271:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2272:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2273:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2274:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2275:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV1
2276:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV2
2277:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV4
ARM GAS  /tmp/ccLne6l3.s 			page 165


2278:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ICPSC_DIV8
2279:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2280:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetPrescaler(const TIM_TypeDef *TIMx, uint32_t Channel)
2281:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2282:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2283:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2284:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iCha
2285:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2286:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2287:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2288:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the input filter duration.
2289:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        IC1F          LL_TIM_IC_SetFilter\n
2290:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_SetFilter\n
2291:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_SetFilter\n
2292:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_SetFilter
2293:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2294:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2295:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2296:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2297:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2298:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2299:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  ICFilter This parameter can be one of the following values:
2300:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1
2301:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
2302:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
2303:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
2304:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
2305:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
2306:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
2307:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
2308:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
2309:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
2310:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
2311:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
2312:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
2313:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
2314:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
2315:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
2316:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2317:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2318:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
2319:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2320:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2321:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iC
2322:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_
2323:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2324:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2325:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2326:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get the input filter duration.
2327:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCMR1        IC1F          LL_TIM_IC_GetFilter\n
2328:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR1        IC2F          LL_TIM_IC_GetFilter\n
2329:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        IC3F          LL_TIM_IC_GetFilter\n
2330:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCMR2        IC4F          LL_TIM_IC_GetFilter
2331:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2332:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2333:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2334:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
ARM GAS  /tmp/ccLne6l3.s 			page 166


2335:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2336:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2337:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2338:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1
2339:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N2
2340:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N4
2341:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV1_N8
2342:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N6
2343:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV2_N8
2344:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N6
2345:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV4_N8
2346:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N6
2347:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV8_N8
2348:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N5
2349:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N6
2350:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV16_N8
2351:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N5
2352:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
2353:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
2354:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2355:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetFilter(const TIM_TypeDef *TIMx, uint32_t Channel)
2356:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2357:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2358:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   const __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CC
2359:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel])) >> SHIFT_TAB_ICxx[iChann
2360:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2361:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2362:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2363:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the input channel polarity.
2364:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_IC_SetPolarity\n
2365:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_SetPolarity\n
2366:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_SetPolarity\n
2367:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_SetPolarity\n
2368:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_SetPolarity\n
2369:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_SetPolarity\n
2370:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_SetPolarity\n
2371:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2372:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2373:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2374:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2375:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2376:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2377:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  ICPolarity This parameter can be one of the following values:
2378:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING
2379:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_FALLING
2380:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2381:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2382:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity
2383:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2384:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2385:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
2386:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****              ICPolarity << SHIFT_TAB_CCxP[iChannel]);
2387:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2388:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2389:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2390:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get the current input channel polarity.
2391:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCER         CC1P          LL_TIM_IC_GetPolarity\n
ARM GAS  /tmp/ccLne6l3.s 			page 167


2392:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC1NP         LL_TIM_IC_GetPolarity\n
2393:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2P          LL_TIM_IC_GetPolarity\n
2394:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC2NP         LL_TIM_IC_GetPolarity\n
2395:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3P          LL_TIM_IC_GetPolarity\n
2396:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC3NP         LL_TIM_IC_GetPolarity\n
2397:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         CCER         CC4P          LL_TIM_IC_GetPolarity\n
2398:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2399:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  Channel This parameter can be one of the following values:
2400:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH1
2401:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH2
2402:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH3
2403:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CHANNEL_CH4
2404:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval Returned value can be one of the following values:
2405:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_RISING
2406:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_IC_POLARITY_FALLING
2407:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2408:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetPolarity(const TIM_TypeDef *TIMx, uint32_t Channel)
2409:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2410:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
2411:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
2412:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****           SHIFT_TAB_CCxP[iChannel]);
2413:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2414:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2415:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2416:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Connect the TIMx_CH1, CH2 and CH3 pins  to the TI1 input (XOR combination).
2417:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2418:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance provides an XOR input.
2419:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_EnableXORCombination
2420:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2421:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2422:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2423:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
2424:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2425:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
2426:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2427:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2428:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2429:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Disconnect the TIMx_CH1, CH2 and CH3 pins  from the TI1 input.
2430:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2431:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance provides an XOR input.
2432:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_DisableXORCombination
2433:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2434:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2435:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2436:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
2437:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2438:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(TIMx->CR2, TIM_CR2_TI1S);
2439:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2440:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2441:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2442:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Indicates whether the TIMx_CH1, CH2 and CH3 pins are connectected to the TI1 input.
2443:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_XOR_INSTANCE(TIMx) can be used to check whether or not
2444:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * a timer instance provides an XOR input.
2445:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR2          TI1S          LL_TIM_IC_IsEnabledXORCombination
2446:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2447:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2448:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
ARM GAS  /tmp/ccLne6l3.s 			page 168


2449:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_IsEnabledXORCombination(const TIM_TypeDef *TIMx)
2450:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2451:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(TIMx->CR2, TIM_CR2_TI1S) == (TIM_CR2_TI1S)) ? 1UL : 0UL);
2452:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2453:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2454:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2455:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get captured value for input channel 1.
2456:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CC1_INSTANCE(TIMx) can be used to check whether or not
2457:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       input channel 1 is supported by a timer instance.
2458:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
2459:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2460:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2461:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2462:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(const TIM_TypeDef *TIMx)
2463:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2464:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR1));
2465:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2466:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2467:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2468:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get captured value for input channel 2.
2469:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CC2_INSTANCE(TIMx) can be used to check whether or not
2470:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       input channel 2 is supported by a timer instance.
2471:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCR2         CCR2          LL_TIM_IC_GetCaptureCH2
2472:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2473:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2474:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2475:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH2(const TIM_TypeDef *TIMx)
2476:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2477:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR2));
2478:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2479:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2480:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2481:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get captured value for input channel 3.
2482:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CC3_INSTANCE(TIMx) can be used to check whether or not
2483:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       input channel 3 is supported by a timer instance.
2484:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCR3         CCR3          LL_TIM_IC_GetCaptureCH3
2485:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2486:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2487:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2488:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH3(const TIM_TypeDef *TIMx)
2489:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2490:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR3));
2491:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2492:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2493:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2494:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Get captured value for input channel 4.
2495:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CC4_INSTANCE(TIMx) can be used to check whether or not
2496:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       input channel 4 is supported by a timer instance.
2497:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CCR4         CCR4          LL_TIM_IC_GetCaptureCH4
2498:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2499:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
2500:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2501:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH4(const TIM_TypeDef *TIMx)
2502:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2503:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return (uint32_t)(READ_REG(TIMx->CCR4));
2504:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2505:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 169


2506:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2507:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
2508:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2509:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2510:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Clock_Selection Counter clock selection
2511:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
2512:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2513:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2514:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Enable external clock mode 2.
2515:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note When external clock mode 2 is enabled the counter is clocked by any active edge on the ET
2516:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2517:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2518:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_EnableExternalClock
2519:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2520:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2521:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2522:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
2523:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2524:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   SET_BIT(TIMx->SMCR, TIM_SMCR_ECE);
2525:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2526:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2527:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2528:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Disable external clock mode 2.
2529:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2530:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2531:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
2532:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2533:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2534:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2535:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
2536:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2537:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
2538:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2539:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2540:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2541:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Indicate whether external clock mode 2 is enabled.
2542:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2543:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
2544:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll SMCR         ECE           LL_TIM_IsEnabledExternalClock
2545:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2546:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2547:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2548:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledExternalClock(const TIM_TypeDef *TIMx)
2549:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2550:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(TIMx->SMCR, TIM_SMCR_ECE) == (TIM_SMCR_ECE)) ? 1UL : 0UL);
2551:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2552:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2553:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2554:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the clock source of the counter clock.
2555:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note when selected clock source is external clock mode 1, the timer input
2556:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       the external clock is applied is selected by calling the @ref LL_TIM_SetTriggerInput()
2557:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       function. This timer input must be configured by calling
2558:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       the @ref LL_TIM_IC_Config() function.
2559:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(TIMx) can be used to check
2560:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode1.
2561:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(TIMx) can be used to check
2562:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       whether or not a timer instance supports external clock mode2.
ARM GAS  /tmp/ccLne6l3.s 			page 170


2563:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetClockSource\n
2564:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         SMCR         ECE           LL_TIM_SetClockSource
2565:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2566:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  ClockSource This parameter can be one of the following values:
2567:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_INTERNAL
2568:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
2569:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
2570:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2571:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2572:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
2573:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1679              		.loc 4 2573 1
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 8
 1682              		@ frame_needed = 1, uses_anonymous_args = 0
 1683              		@ link register save eliminated.
 1684 0000 80B4     		push	{r7}
 1685              	.LCFI150:
 1686              		.cfi_def_cfa_offset 4
 1687              		.cfi_offset 7, -4
 1688 0002 83B0     		sub	sp, sp, #12
 1689              	.LCFI151:
 1690              		.cfi_def_cfa_offset 16
 1691 0004 00AF     		add	r7, sp, #0
 1692              	.LCFI152:
 1693              		.cfi_def_cfa_register 7
 1694 0006 7860     		str	r0, [r7, #4]
 1695 0008 3960     		str	r1, [r7]
2574:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 1696              		.loc 4 2574 3
 1697 000a 7B68     		ldr	r3, [r7, #4]
 1698 000c 9B68     		ldr	r3, [r3, #8]
 1699 000e 23F48043 		bic	r3, r3, #16384
 1700 0012 23F00703 		bic	r3, r3, #7
 1701 0016 3A68     		ldr	r2, [r7]
 1702 0018 1A43     		orrs	r2, r2, r3
 1703 001a 7B68     		ldr	r3, [r7, #4]
 1704 001c 9A60     		str	r2, [r3, #8]
2575:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1705              		.loc 4 2575 1
 1706 001e 00BF     		nop
 1707 0020 0C37     		adds	r7, r7, #12
 1708              	.LCFI153:
 1709              		.cfi_def_cfa_offset 4
 1710 0022 BD46     		mov	sp, r7
 1711              	.LCFI154:
 1712              		.cfi_def_cfa_register 13
 1713              		@ sp needed
 1714 0024 80BC     		pop	{r7}
 1715              	.LCFI155:
 1716              		.cfi_restore 7
 1717              		.cfi_def_cfa_offset 0
 1718 0026 7047     		bx	lr
 1719              		.cfi_endproc
 1720              	.LFE316:
 1722              		.section	.text.LL_TIM_SetTriggerOutput,"ax",%progbits
 1723              		.align	1
ARM GAS  /tmp/ccLne6l3.s 			page 171


 1724              		.syntax unified
 1725              		.thumb
 1726              		.thumb_func
 1728              	LL_TIM_SetTriggerOutput:
 1729              	.LFB318:
2576:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2577:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2578:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the encoder interface mode.
2579:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_ENCODER_INTERFACE_INSTANCE(TIMx) can be used to check
2580:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       whether or not a timer instance supports the encoder mode.
2581:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetEncoderMode
2582:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2583:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  EncoderMode This parameter can be one of the following values:
2584:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X2_TI1
2585:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
2586:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
2587:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2588:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2589:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
2590:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2591:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
2592:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2593:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2594:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2595:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
2596:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2597:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2598:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Timer_Synchronization Timer synchronisation configuration
2599:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
2600:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2601:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2602:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the trigger output (TRGO) used for timer synchronization .
2603:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_MASTER_INSTANCE(TIMx) can be used to check
2604:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       whether or not a timer instance can operate as a master timer.
2605:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll CR2          MMS           LL_TIM_SetTriggerOutput
2606:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2607:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TimerSynchronization This parameter can be one of the following values:
2608:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_RESET
2609:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_ENABLE
2610:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_UPDATE
2611:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_CC1IF
2612:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC1REF
2613:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC2REF
2614:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC3REF
2615:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TRGO_OC4REF
2616:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2617:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2618:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
2619:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1730              		.loc 4 2619 1
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 8
 1733              		@ frame_needed = 1, uses_anonymous_args = 0
 1734              		@ link register save eliminated.
 1735 0000 80B4     		push	{r7}
 1736              	.LCFI156:
 1737              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccLne6l3.s 			page 172


 1738              		.cfi_offset 7, -4
 1739 0002 83B0     		sub	sp, sp, #12
 1740              	.LCFI157:
 1741              		.cfi_def_cfa_offset 16
 1742 0004 00AF     		add	r7, sp, #0
 1743              	.LCFI158:
 1744              		.cfi_def_cfa_register 7
 1745 0006 7860     		str	r0, [r7, #4]
 1746 0008 3960     		str	r1, [r7]
2620:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 1747              		.loc 4 2620 3
 1748 000a 7B68     		ldr	r3, [r7, #4]
 1749 000c 5B68     		ldr	r3, [r3, #4]
 1750 000e 23F07002 		bic	r2, r3, #112
 1751 0012 3B68     		ldr	r3, [r7]
 1752 0014 1A43     		orrs	r2, r2, r3
 1753 0016 7B68     		ldr	r3, [r7, #4]
 1754 0018 5A60     		str	r2, [r3, #4]
2621:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1755              		.loc 4 2621 1
 1756 001a 00BF     		nop
 1757 001c 0C37     		adds	r7, r7, #12
 1758              	.LCFI159:
 1759              		.cfi_def_cfa_offset 4
 1760 001e BD46     		mov	sp, r7
 1761              	.LCFI160:
 1762              		.cfi_def_cfa_register 13
 1763              		@ sp needed
 1764 0020 80BC     		pop	{r7}
 1765              	.LCFI161:
 1766              		.cfi_restore 7
 1767              		.cfi_def_cfa_offset 0
 1768 0022 7047     		bx	lr
 1769              		.cfi_endproc
 1770              	.LFE318:
 1772              		.section	.text.LL_TIM_DisableMasterSlaveMode,"ax",%progbits
 1773              		.align	1
 1774              		.syntax unified
 1775              		.thumb
 1776              		.thumb_func
 1778              	LL_TIM_DisableMasterSlaveMode:
 1779              	.LFB322:
2622:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2623:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2624:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the synchronization mode of a slave timer.
2625:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2626:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2627:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll SMCR         SMS           LL_TIM_SetSlaveMode
2628:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2629:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  SlaveMode This parameter can be one of the following values:
2630:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_DISABLED
2631:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_RESET
2632:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_GATED
2633:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
2634:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2635:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2636:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
ARM GAS  /tmp/ccLne6l3.s 			page 173


2637:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2638:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
2639:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2640:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2641:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2642:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Set the selects the trigger input to be used to synchronize the counter.
2643:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2644:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2645:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll SMCR         TS            LL_TIM_SetTriggerInput
2646:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2647:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TriggerInput This parameter can be one of the following values:
2648:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR0
2649:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR1
2650:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR2
2651:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ITR3
2652:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI1F_ED
2653:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI1FP1
2654:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_TI2FP2
2655:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_TS_ETRF
2656:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2657:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2658:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
2659:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2660:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
2661:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2662:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2663:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2664:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Enable the Master/Slave mode.
2665:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2666:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2667:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll SMCR         MSM           LL_TIM_EnableMasterSlaveMode
2668:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2669:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2670:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2671:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
2672:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2673:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
2674:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2675:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2676:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2677:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Disable the Master/Slave mode.
2678:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2679:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance can operate as a slave timer.
2680:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
2681:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2682:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2683:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2684:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
2685:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1780              		.loc 4 2685 1
 1781              		.cfi_startproc
 1782              		@ args = 0, pretend = 0, frame = 8
 1783              		@ frame_needed = 1, uses_anonymous_args = 0
 1784              		@ link register save eliminated.
 1785 0000 80B4     		push	{r7}
 1786              	.LCFI162:
 1787              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccLne6l3.s 			page 174


 1788              		.cfi_offset 7, -4
 1789 0002 83B0     		sub	sp, sp, #12
 1790              	.LCFI163:
 1791              		.cfi_def_cfa_offset 16
 1792 0004 00AF     		add	r7, sp, #0
 1793              	.LCFI164:
 1794              		.cfi_def_cfa_register 7
 1795 0006 7860     		str	r0, [r7, #4]
2686:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 1796              		.loc 4 2686 3
 1797 0008 7B68     		ldr	r3, [r7, #4]
 1798 000a 9B68     		ldr	r3, [r3, #8]
 1799 000c 23F08002 		bic	r2, r3, #128
 1800 0010 7B68     		ldr	r3, [r7, #4]
 1801 0012 9A60     		str	r2, [r3, #8]
2687:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1802              		.loc 4 2687 1
 1803 0014 00BF     		nop
 1804 0016 0C37     		adds	r7, r7, #12
 1805              	.LCFI165:
 1806              		.cfi_def_cfa_offset 4
 1807 0018 BD46     		mov	sp, r7
 1808              	.LCFI166:
 1809              		.cfi_def_cfa_register 13
 1810              		@ sp needed
 1811 001a 80BC     		pop	{r7}
 1812              	.LCFI167:
 1813              		.cfi_restore 7
 1814              		.cfi_def_cfa_offset 0
 1815 001c 7047     		bx	lr
 1816              		.cfi_endproc
 1817              	.LFE322:
 1819              		.section	.text.LL_TIM_EnableAutomaticOutput,"ax",%progbits
 1820              		.align	1
 1821              		.syntax unified
 1822              		.thumb
 1823              		.thumb_func
 1825              	LL_TIM_EnableAutomaticOutput:
 1826              	.LFB329:
2688:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2689:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2690:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief Indicates whether the Master/Slave mode is enabled.
2691:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_SLAVE_INSTANCE(TIMx) can be used to check whether or not
2692:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * a timer instance can operate as a slave timer.
2693:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll SMCR         MSM           LL_TIM_IsEnabledMasterSlaveMode
2694:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2695:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2696:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2697:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledMasterSlaveMode(const TIM_TypeDef *TIMx)
2698:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2699:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(TIMx->SMCR, TIM_SMCR_MSM) == (TIM_SMCR_MSM)) ? 1UL : 0UL);
2700:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2701:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2702:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2703:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Configure the external trigger (ETR) input.
2704:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_ETR_INSTANCE(TIMx) can be used to check whether or not
2705:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance provides an external trigger input.
ARM GAS  /tmp/ccLne6l3.s 			page 175


2706:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll SMCR         ETP           LL_TIM_ConfigETR\n
2707:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         SMCR         ETPS          LL_TIM_ConfigETR\n
2708:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         SMCR         ETF           LL_TIM_ConfigETR
2709:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2710:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  ETRPolarity This parameter can be one of the following values:
2711:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_POLARITY_NONINVERTED
2712:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_POLARITY_INVERTED
2713:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  ETRPrescaler This parameter can be one of the following values:
2714:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV1
2715:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV2
2716:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV4
2717:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_PRESCALER_DIV8
2718:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  ETRFilter This parameter can be one of the following values:
2719:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1
2720:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N2
2721:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N4
2722:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV1_N8
2723:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N6
2724:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV2_N8
2725:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N6
2726:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV4_N8
2727:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N6
2728:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV8_N8
2729:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N5
2730:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N6
2731:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV16_N8
2732:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N5
2733:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N6
2734:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
2735:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2736:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2737:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescale
2738:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****                                       uint32_t ETRFilter)
2739:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2740:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | 
2741:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2742:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2743:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2744:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
2745:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2746:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2747:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EF_Break_Function Break function configuration
2748:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
2749:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2750:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2751:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Enable the break function.
2752:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2753:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance provides a break input.
2754:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll BDTR         BKE           LL_TIM_EnableBRK
2755:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2756:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2757:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2758:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableBRK(TIM_TypeDef *TIMx)
2759:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2760:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t tmpreg;
2761:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   SET_BIT(TIMx->BDTR, TIM_BDTR_BKE);
2762:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   /* Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. 
ARM GAS  /tmp/ccLne6l3.s 			page 176


2763:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   tmpreg = READ_REG(TIMx->BDTR);
2764:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   (void)(tmpreg);
2765:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2766:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2767:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2768:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Disable the break function.
2769:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll BDTR         BKE           LL_TIM_DisableBRK
2770:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2771:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2772:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance provides a break input.
2773:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2774:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2775:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableBRK(TIM_TypeDef *TIMx)
2776:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2777:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t tmpreg;
2778:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(TIMx->BDTR, TIM_BDTR_BKE);
2779:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   /* Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective. 
2780:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   tmpreg = READ_REG(TIMx->BDTR);
2781:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   (void)(tmpreg);
2782:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2783:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2784:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2785:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Configure the break input.
2786:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2787:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance provides a break input.
2788:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll BDTR         BKP           LL_TIM_ConfigBRK
2789:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2790:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  BreakPolarity This parameter can be one of the following values:
2791:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_BREAK_POLARITY_LOW
2792:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_BREAK_POLARITY_HIGH
2793:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2794:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2795:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ConfigBRK(TIM_TypeDef *TIMx, uint32_t BreakPolarity)
2796:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2797:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   __IO uint32_t tmpreg;
2798:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_BKP, BreakPolarity);
2799:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   /* Note: Any write operation to BKP bit takes a delay of 1 APB clock cycle to become effective. *
2800:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   tmpreg = READ_REG(TIMx->BDTR);
2801:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   (void)(tmpreg);
2802:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2803:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2804:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2805:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Select the outputs off state (enabled v.s. disabled) in Idle and Run modes.
2806:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2807:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance provides a break input.
2808:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll BDTR         OSSI          LL_TIM_SetOffStates\n
2809:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         BDTR         OSSR          LL_TIM_SetOffStates
2810:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2811:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  OffStateIdle This parameter can be one of the following values:
2812:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSI_DISABLE
2813:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSI_ENABLE
2814:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  OffStateRun This parameter can be one of the following values:
2815:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSR_DISABLE
2816:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_OSSR_ENABLE
2817:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2818:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2819:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_SetOffStates(TIM_TypeDef *TIMx, uint32_t OffStateIdle, uint32_t OffStat
ARM GAS  /tmp/ccLne6l3.s 			page 177


2820:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2821:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->BDTR, TIM_BDTR_OSSI | TIM_BDTR_OSSR, OffStateIdle | OffStateRun);
2822:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2823:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2824:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2825:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Enable automatic output (MOE can be set by software or automatically when a break input
2826:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2827:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance provides a break input.
2828:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll BDTR         AOE           LL_TIM_EnableAutomaticOutput
2829:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2830:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2831:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2832:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableAutomaticOutput(TIM_TypeDef *TIMx)
2833:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1827              		.loc 4 2833 1
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 8
 1830              		@ frame_needed = 1, uses_anonymous_args = 0
 1831              		@ link register save eliminated.
 1832 0000 80B4     		push	{r7}
 1833              	.LCFI168:
 1834              		.cfi_def_cfa_offset 4
 1835              		.cfi_offset 7, -4
 1836 0002 83B0     		sub	sp, sp, #12
 1837              	.LCFI169:
 1838              		.cfi_def_cfa_offset 16
 1839 0004 00AF     		add	r7, sp, #0
 1840              	.LCFI170:
 1841              		.cfi_def_cfa_register 7
 1842 0006 7860     		str	r0, [r7, #4]
2834:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   SET_BIT(TIMx->BDTR, TIM_BDTR_AOE);
 1843              		.loc 4 2834 3
 1844 0008 7B68     		ldr	r3, [r7, #4]
 1845 000a 5B6C     		ldr	r3, [r3, #68]
 1846 000c 43F48042 		orr	r2, r3, #16384
 1847 0010 7B68     		ldr	r3, [r7, #4]
 1848 0012 5A64     		str	r2, [r3, #68]
2835:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1849              		.loc 4 2835 1
 1850 0014 00BF     		nop
 1851 0016 0C37     		adds	r7, r7, #12
 1852              	.LCFI171:
 1853              		.cfi_def_cfa_offset 4
 1854 0018 BD46     		mov	sp, r7
 1855              	.LCFI172:
 1856              		.cfi_def_cfa_register 13
 1857              		@ sp needed
 1858 001a 80BC     		pop	{r7}
 1859              	.LCFI173:
 1860              		.cfi_restore 7
 1861              		.cfi_def_cfa_offset 0
 1862 001c 7047     		bx	lr
 1863              		.cfi_endproc
 1864              	.LFE329:
 1866              		.section	.text.LL_TIM_EnableAllOutputs,"ax",%progbits
 1867              		.align	1
 1868              		.syntax unified
ARM GAS  /tmp/ccLne6l3.s 			page 178


 1869              		.thumb
 1870              		.thumb_func
 1872              	LL_TIM_EnableAllOutputs:
 1873              	.LFB332:
2836:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2837:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2838:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Disable automatic output (MOE can be set only by software).
2839:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2840:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance provides a break input.
2841:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll BDTR         AOE           LL_TIM_DisableAutomaticOutput
2842:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2843:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2844:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2845:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableAutomaticOutput(TIM_TypeDef *TIMx)
2846:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2847:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(TIMx->BDTR, TIM_BDTR_AOE);
2848:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2849:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2850:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2851:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Indicate whether automatic output is enabled.
2852:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2853:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance provides a break input.
2854:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll BDTR         AOE           LL_TIM_IsEnabledAutomaticOutput
2855:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2856:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2857:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2858:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledAutomaticOutput(const TIM_TypeDef *TIMx)
2859:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2860:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(TIMx->BDTR, TIM_BDTR_AOE) == (TIM_BDTR_AOE)) ? 1UL : 0UL);
2861:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2862:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2863:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2864:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Enable the outputs (set the MOE bit in TIMx_BDTR register).
2865:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
2866:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       software and is reset in case of break or break2 event
2867:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2868:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance provides a break input.
2869:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
2870:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2871:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2872:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2873:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
2874:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1874              		.loc 4 2874 1
 1875              		.cfi_startproc
 1876              		@ args = 0, pretend = 0, frame = 8
 1877              		@ frame_needed = 1, uses_anonymous_args = 0
 1878              		@ link register save eliminated.
 1879 0000 80B4     		push	{r7}
 1880              	.LCFI174:
 1881              		.cfi_def_cfa_offset 4
 1882              		.cfi_offset 7, -4
 1883 0002 83B0     		sub	sp, sp, #12
 1884              	.LCFI175:
 1885              		.cfi_def_cfa_offset 16
 1886 0004 00AF     		add	r7, sp, #0
 1887              	.LCFI176:
ARM GAS  /tmp/ccLne6l3.s 			page 179


 1888              		.cfi_def_cfa_register 7
 1889 0006 7860     		str	r0, [r7, #4]
2875:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 1890              		.loc 4 2875 3
 1891 0008 7B68     		ldr	r3, [r7, #4]
 1892 000a 5B6C     		ldr	r3, [r3, #68]
 1893 000c 43F40042 		orr	r2, r3, #32768
 1894 0010 7B68     		ldr	r3, [r7, #4]
 1895 0012 5A64     		str	r2, [r3, #68]
2876:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1896              		.loc 4 2876 1
 1897 0014 00BF     		nop
 1898 0016 0C37     		adds	r7, r7, #12
 1899              	.LCFI177:
 1900              		.cfi_def_cfa_offset 4
 1901 0018 BD46     		mov	sp, r7
 1902              	.LCFI178:
 1903              		.cfi_def_cfa_register 13
 1904              		@ sp needed
 1905 001a 80BC     		pop	{r7}
 1906              	.LCFI179:
 1907              		.cfi_restore 7
 1908              		.cfi_def_cfa_offset 0
 1909 001c 7047     		bx	lr
 1910              		.cfi_endproc
 1911              	.LFE332:
 1913              		.section	.text.LL_TIM_ClearFlag_UPDATE,"ax",%progbits
 1914              		.align	1
 1915              		.syntax unified
 1916              		.thumb
 1917              		.thumb_func
 1919              	LL_TIM_ClearFlag_UPDATE:
 1920              	.LFB336:
2877:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2878:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2879:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Disable the outputs (reset the MOE bit in TIMx_BDTR register).
2880:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note The MOE bit in TIMx_BDTR register allows to enable /disable the outputs by
2881:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       software and is reset in case of break or break2 event.
2882:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2883:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance provides a break input.
2884:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
2885:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2886:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2887:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2888:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
2889:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2890:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
2891:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2892:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2893:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2894:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Indicates whether outputs are enabled.
2895:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_BREAK_INSTANCE(TIMx) can be used to check whether or not
2896:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       a timer instance provides a break input.
2897:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll BDTR         MOE           LL_TIM_IsEnabledAllOutputs
2898:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2899:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2900:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
ARM GAS  /tmp/ccLne6l3.s 			page 180


2901:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsEnabledAllOutputs(const TIM_TypeDef *TIMx)
2902:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2903:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(TIMx->BDTR, TIM_BDTR_MOE) == (TIM_BDTR_MOE)) ? 1UL : 0UL);
2904:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2905:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2906:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2907:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
2908:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2909:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2910:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EF_DMA_Burst_Mode DMA burst mode configuration
2911:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
2912:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2913:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2914:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Configures the timer DMA burst feature.
2915:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @note Macro IS_TIM_DMABURST_INSTANCE(TIMx) can be used to check whether or
2916:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *       not a timer instance supports the DMA burst mode.
2917:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll DCR          DBL           LL_TIM_ConfigDMABurst\n
2918:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         DCR          DBA           LL_TIM_ConfigDMABurst
2919:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2920:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  DMABurstBaseAddress This parameter can be one of the following values:
2921:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR1
2922:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CR2
2923:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_SMCR
2924:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_DIER
2925:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_SR
2926:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_EGR
2927:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR1
2928:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCMR2
2929:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCER
2930:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CNT
2931:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_PSC
2932:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_ARR
2933:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_RCR
2934:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR1
2935:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR2
2936:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR3
2937:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_CCR4
2938:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_BASEADDR_BDTR
2939:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  DMABurstLength This parameter can be one of the following values:
2940:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_1TRANSFER
2941:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_2TRANSFERS
2942:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_3TRANSFERS
2943:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_4TRANSFERS
2944:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_5TRANSFERS
2945:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_6TRANSFERS
2946:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_7TRANSFERS
2947:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_8TRANSFERS
2948:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_9TRANSFERS
2949:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_10TRANSFERS
2950:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_11TRANSFERS
2951:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_12TRANSFERS
2952:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_13TRANSFERS
2953:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_14TRANSFERS
2954:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_15TRANSFERS
2955:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_16TRANSFERS
2956:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_17TRANSFERS
2957:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   *         @arg @ref LL_TIM_DMABURST_LENGTH_18TRANSFERS
ARM GAS  /tmp/ccLne6l3.s 			page 181


2958:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2959:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2960:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ConfigDMABurst(TIM_TypeDef *TIMx, uint32_t DMABurstBaseAddress, uint32_
2961:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
2962:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   MODIFY_REG(TIMx->DCR, (TIM_DCR_DBL | TIM_DCR_DBA), (DMABurstBaseAddress | DMABurstLength));
2963:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
2964:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2965:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2966:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @}
2967:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2968:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2969:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2970:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /** @defgroup TIM_LL_EF_FLAG_Management FLAG-Management
2971:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @{
2972:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2973:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2974:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Clear the update interrupt flag (UIF).
2975:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
2976:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2977:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval None
2978:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2979:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
2980:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1921              		.loc 4 2980 1
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 8
 1924              		@ frame_needed = 1, uses_anonymous_args = 0
 1925              		@ link register save eliminated.
 1926 0000 80B4     		push	{r7}
 1927              	.LCFI180:
 1928              		.cfi_def_cfa_offset 4
 1929              		.cfi_offset 7, -4
 1930 0002 83B0     		sub	sp, sp, #12
 1931              	.LCFI181:
 1932              		.cfi_def_cfa_offset 16
 1933 0004 00AF     		add	r7, sp, #0
 1934              	.LCFI182:
 1935              		.cfi_def_cfa_register 7
 1936 0006 7860     		str	r0, [r7, #4]
2981:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 1937              		.loc 4 2981 3
 1938 0008 7B68     		ldr	r3, [r7, #4]
 1939 000a 6FF00102 		mvn	r2, #1
 1940 000e 1A61     		str	r2, [r3, #16]
2982:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1941              		.loc 4 2982 1
 1942 0010 00BF     		nop
 1943 0012 0C37     		adds	r7, r7, #12
 1944              	.LCFI183:
 1945              		.cfi_def_cfa_offset 4
 1946 0014 BD46     		mov	sp, r7
 1947              	.LCFI184:
 1948              		.cfi_def_cfa_register 13
 1949              		@ sp needed
 1950 0016 80BC     		pop	{r7}
 1951              	.LCFI185:
 1952              		.cfi_restore 7
ARM GAS  /tmp/ccLne6l3.s 			page 182


 1953              		.cfi_def_cfa_offset 0
 1954 0018 7047     		bx	lr
 1955              		.cfi_endproc
 1956              	.LFE336:
 1958              		.section	.text.LL_TIM_IsActiveFlag_UPDATE,"ax",%progbits
 1959              		.align	1
 1960              		.syntax unified
 1961              		.thumb
 1962              		.thumb_func
 1964              	LL_TIM_IsActiveFlag_UPDATE:
 1965              	.LFB337:
2983:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** 
2984:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** /**
2985:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @brief  Indicate whether update interrupt flag (UIF) is set (update interrupt is pending).
2986:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
2987:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @param  TIMx Timer instance
2988:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   * @retval State of bit (1 or 0).
2989:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   */
2990:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** __STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
2991:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** {
 1966              		.loc 4 2991 1
 1967              		.cfi_startproc
 1968              		@ args = 0, pretend = 0, frame = 8
 1969              		@ frame_needed = 1, uses_anonymous_args = 0
 1970              		@ link register save eliminated.
 1971 0000 80B4     		push	{r7}
 1972              	.LCFI186:
 1973              		.cfi_def_cfa_offset 4
 1974              		.cfi_offset 7, -4
 1975 0002 83B0     		sub	sp, sp, #12
 1976              	.LCFI187:
 1977              		.cfi_def_cfa_offset 16
 1978 0004 00AF     		add	r7, sp, #0
 1979              	.LCFI188:
 1980              		.cfi_def_cfa_register 7
 1981 0006 7860     		str	r0, [r7, #4]
2992:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h ****   return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 1982              		.loc 4 2992 12
 1983 0008 7B68     		ldr	r3, [r7, #4]
 1984 000a 1B69     		ldr	r3, [r3, #16]
 1985 000c 03F00103 		and	r3, r3, #1
 1986              		.loc 4 2992 66
 1987 0010 012B     		cmp	r3, #1
 1988 0012 01D1     		bne	.L82
 1989              		.loc 4 2992 66 is_stmt 0 discriminator 1
 1990 0014 0123     		movs	r3, #1
 1991 0016 00E0     		b	.L84
 1992              	.L82:
 1993              		.loc 4 2992 66 discriminator 2
 1994 0018 0023     		movs	r3, #0
 1995              	.L84:
2993:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_tim.h **** }
 1996              		.loc 4 2993 1 is_stmt 1 discriminator 5
 1997 001a 1846     		mov	r0, r3
 1998 001c 0C37     		adds	r7, r7, #12
 1999              	.LCFI189:
 2000              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccLne6l3.s 			page 183


 2001 001e BD46     		mov	sp, r7
 2002              	.LCFI190:
 2003              		.cfi_def_cfa_register 13
 2004              		@ sp needed
 2005 0020 80BC     		pop	{r7}
 2006              	.LCFI191:
 2007              		.cfi_restore 7
 2008              		.cfi_def_cfa_offset 0
 2009 0022 7047     		bx	lr
 2010              		.cfi_endproc
 2011              	.LFE337:
 2013              		.section	.text.LL_AHB1_GRP1_EnableClock,"ax",%progbits
 2014              		.align	1
 2015              		.syntax unified
 2016              		.thumb
 2017              		.thumb_func
 2019              	LL_AHB1_GRP1_EnableClock:
 2020              	.LFB413:
 2021              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h"
   1:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @file    stm32f1xx_ll_bus.h
   4:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @brief   Header file of BUS LL module.
   6:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
   7:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   @verbatim
   8:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****                       ##### RCC Limitations #####
   9:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   ==============================================================================
  10:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****     [..]
  11:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****       A delay between an RCC peripheral clock enable and the effective peripheral
  12:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****       enabling should be taken into account in order to manage the peripheral read/write
  13:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****       from/to registers.
  14:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****       (+) This delay depends on the peripheral mapping.
  15:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****         (++) AHB & APB peripherals, 1 dummy read is necessary
  16:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
  17:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****     [..]
  18:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****       Workarounds:
  19:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****       (#) For AHB & APB peripherals, a dummy read to the peripheral register has been
  20:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****           inserted in each LL_{BUS}_GRP{x}_EnableClock() function.
  21:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
  22:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   @endverbatim
  23:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   ******************************************************************************
  24:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @attention
  25:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *
  26:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * Copyright (c) 2016 STMicroelectronics.
  27:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * All rights reserved.
  28:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *
  29:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * This software is licensed under terms that can be found in the LICENSE file in
  30:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * the root directory of this software component.
  31:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  32:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   ******************************************************************************
  33:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
  34:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
  35:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  36:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #ifndef __STM32F1xx_LL_BUS_H
  37:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define __STM32F1xx_LL_BUS_H
  38:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 184


  39:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #ifdef __cplusplus
  40:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** extern "C" {
  41:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif
  42:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
  43:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /* Includes ------------------------------------------------------------------*/
  44:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #include "stm32f1xx.h"
  45:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
  46:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /** @addtogroup STM32F1xx_LL_Driver
  47:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @{
  48:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
  49:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
  50:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(RCC)
  51:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
  52:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /** @defgroup BUS_LL BUS
  53:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @{
  54:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
  55:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
  56:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /* Private types -------------------------------------------------------------*/
  57:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /* Private variables ---------------------------------------------------------*/
  58:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
  59:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /* Private constants ---------------------------------------------------------*/
  60:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(RCC_AHBRSTR_OTGFSRST) || defined(RCC_AHBRSTR_ETHMACRST)
  61:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define RCC_AHBRSTR_SUPPORT
  62:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /* RCC_AHBRSTR_OTGFSRST || RCC_AHBRSTR_ETHMACRST */
  63:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
  64:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /* Private macros ------------------------------------------------------------*/
  65:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
  66:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /* Exported types ------------------------------------------------------------*/
  67:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /* Exported constants --------------------------------------------------------*/
  68:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /** @defgroup BUS_LL_Exported_Constants BUS Exported Constants
  69:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @{
  70:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
  71:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
  72:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /** @defgroup BUS_LL_EC_AHB1_GRP1_PERIPH  AHB1 GRP1 PERIPH
  73:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @{
  74:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
  75:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_ALL            (uint32_t)0xFFFFFFFFU
  76:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_CRC            RCC_AHBENR_CRCEN
  77:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_DMA1           RCC_AHBENR_DMA1EN
  78:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(DMA2)
  79:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_DMA2           RCC_AHBENR_DMA2EN
  80:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*DMA2*/
  81:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(ETH)
  82:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_ETHMAC         RCC_AHBENR_ETHMACEN
  83:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_ETHMACRX       RCC_AHBENR_ETHMACRXEN
  84:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_ETHMACTX       RCC_AHBENR_ETHMACTXEN
  85:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*ETH*/
  86:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_FLASH          RCC_AHBENR_FLITFEN
  87:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(FSMC_Bank1)
  88:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_FSMC           RCC_AHBENR_FSMCEN
  89:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*FSMC_Bank1*/
  90:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(USB_OTG_FS)
  91:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_OTGFS          RCC_AHBENR_OTGFSEN
  92:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*USB_OTG_FS*/
  93:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(SDIO)
  94:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_SDIO           RCC_AHBENR_SDIOEN
  95:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*SDIO*/
ARM GAS  /tmp/ccLne6l3.s 			page 185


  96:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_SRAM           RCC_AHBENR_SRAMEN
  97:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
  98:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @}
  99:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
 100:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 101:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB1_GRP1_PERIPH  APB1 GRP1 PERIPH
 102:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @{
 103:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
 104:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_ALL            (uint32_t)0xFFFFFFFFU
 105:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_BKP            RCC_APB1ENR_BKPEN
 106:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(CAN1)
 107:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_CAN1           RCC_APB1ENR_CAN1EN
 108:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*CAN1*/
 109:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(CAN2)
 110:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_CAN2           RCC_APB1ENR_CAN2EN
 111:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*CAN2*/
 112:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(CEC)
 113:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_CEC            RCC_APB1ENR_CECEN
 114:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*CEC*/
 115:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(DAC)
 116:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_DAC1           RCC_APB1ENR_DACEN
 117:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*DAC*/
 118:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C1           RCC_APB1ENR_I2C1EN
 119:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(I2C2)
 120:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C2           RCC_APB1ENR_I2C2EN
 121:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*I2C2*/
 122:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_PWR            RCC_APB1ENR_PWREN
 123:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(SPI2)
 124:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_SPI2           RCC_APB1ENR_SPI2EN
 125:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*SPI2*/
 126:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(SPI3)
 127:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_SPI3           RCC_APB1ENR_SPI3EN
 128:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*SPI3*/
 129:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(TIM12)
 130:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM12          RCC_APB1ENR_TIM12EN
 131:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*TIM12*/
 132:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(TIM13)
 133:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM13          RCC_APB1ENR_TIM13EN
 134:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*TIM13*/
 135:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(TIM14)
 136:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM14          RCC_APB1ENR_TIM14EN
 137:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*TIM14*/
 138:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM2           RCC_APB1ENR_TIM2EN
 139:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM3           RCC_APB1ENR_TIM3EN
 140:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(TIM4)
 141:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM4           RCC_APB1ENR_TIM4EN
 142:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*TIM4*/
 143:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(TIM5)
 144:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM5           RCC_APB1ENR_TIM5EN
 145:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*TIM5*/
 146:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(TIM6)
 147:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM6           RCC_APB1ENR_TIM6EN
 148:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*TIM6*/
 149:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(TIM7)
 150:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM7           RCC_APB1ENR_TIM7EN
 151:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*TIM7*/
 152:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(UART4)
ARM GAS  /tmp/ccLne6l3.s 			page 186


 153:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_UART4          RCC_APB1ENR_UART4EN
 154:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*UART4*/
 155:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(UART5)
 156:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_UART5          RCC_APB1ENR_UART5EN
 157:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*UART5*/
 158:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART2         RCC_APB1ENR_USART2EN
 159:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(USART3)
 160:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART3         RCC_APB1ENR_USART3EN
 161:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*USART3*/
 162:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(USB)
 163:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USB            RCC_APB1ENR_USBEN
 164:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*USB*/
 165:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_WWDG           RCC_APB1ENR_WWDGEN
 166:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 167:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @}
 168:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
 169:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 170:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB2_GRP1_PERIPH  APB2 GRP1 PERIPH
 171:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @{
 172:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
 173:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ALL            (uint32_t)0xFFFFFFFFU
 174:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ADC1           RCC_APB2ENR_ADC1EN
 175:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(ADC2)
 176:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ADC2           RCC_APB2ENR_ADC2EN
 177:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*ADC2*/
 178:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(ADC3)
 179:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ADC3           RCC_APB2ENR_ADC3EN
 180:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*ADC3*/
 181:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_AFIO           RCC_APB2ENR_AFIOEN
 182:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_GPIOA          RCC_APB2ENR_IOPAEN
 183:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_GPIOB          RCC_APB2ENR_IOPBEN
 184:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_GPIOC          RCC_APB2ENR_IOPCEN
 185:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_GPIOD          RCC_APB2ENR_IOPDEN
 186:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(GPIOE)
 187:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_GPIOE          RCC_APB2ENR_IOPEEN
 188:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*GPIOE*/
 189:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(GPIOF)
 190:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_GPIOF          RCC_APB2ENR_IOPFEN
 191:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*GPIOF*/
 192:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(GPIOG)
 193:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_GPIOG          RCC_APB2ENR_IOPGEN
 194:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*GPIOG*/
 195:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SPI1           RCC_APB2ENR_SPI1EN
 196:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(TIM10)
 197:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM10          RCC_APB2ENR_TIM10EN
 198:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*TIM10*/
 199:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(TIM11)
 200:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM11          RCC_APB2ENR_TIM11EN
 201:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*TIM11*/
 202:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(TIM15)
 203:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM15          RCC_APB2ENR_TIM15EN
 204:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*TIM15*/
 205:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(TIM16)
 206:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM16          RCC_APB2ENR_TIM16EN
 207:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*TIM16*/
 208:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(TIM17)
 209:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM17          RCC_APB2ENR_TIM17EN
ARM GAS  /tmp/ccLne6l3.s 			page 187


 210:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*TIM17*/
 211:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM1           RCC_APB2ENR_TIM1EN
 212:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(TIM8)
 213:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM8           RCC_APB2ENR_TIM8EN
 214:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*TIM8*/
 215:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(TIM9)
 216:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM9           RCC_APB2ENR_TIM9EN
 217:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /*TIM9*/
 218:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_USART1         RCC_APB2ENR_USART1EN
 219:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 220:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @}
 221:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
 222:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 223:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 224:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @}
 225:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
 226:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 227:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /* Exported macro ------------------------------------------------------------*/
 228:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 229:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /* Exported functions --------------------------------------------------------*/
 230:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /** @defgroup BUS_LL_Exported_Functions BUS Exported Functions
 231:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @{
 232:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
 233:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 234:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /** @defgroup BUS_LL_EF_AHB1 AHB1
 235:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @{
 236:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
 237:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 238:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 239:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @brief  Enable AHB1 peripherals clock.
 240:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @rmtoll AHBENR       CRCEN         LL_AHB1_GRP1_EnableClock\n
 241:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       DMA1EN        LL_AHB1_GRP1_EnableClock\n
 242:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       DMA2EN        LL_AHB1_GRP1_EnableClock\n
 243:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       ETHMACEN      LL_AHB1_GRP1_EnableClock\n
 244:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       ETHMACRXEN    LL_AHB1_GRP1_EnableClock\n
 245:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       ETHMACTXEN    LL_AHB1_GRP1_EnableClock\n
 246:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       FLITFEN       LL_AHB1_GRP1_EnableClock\n
 247:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       FSMCEN        LL_AHB1_GRP1_EnableClock\n
 248:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       OTGFSEN       LL_AHB1_GRP1_EnableClock\n
 249:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       SDIOEN        LL_AHB1_GRP1_EnableClock\n
 250:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       SRAMEN        LL_AHB1_GRP1_EnableClock
 251:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 252:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 253:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 254:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 255:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ETHMAC (*)
 256:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ETHMACRX (*)
 257:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ETHMACTX (*)
 258:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 259:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FSMC (*)
 260:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_OTGFS (*)
 261:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SDIO (*)
 262:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM
 263:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *
 264:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 265:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @retval None
 266:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** */
ARM GAS  /tmp/ccLne6l3.s 			page 188


 267:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
 268:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** {
 2022              		.loc 5 268 1
 2023              		.cfi_startproc
 2024              		@ args = 0, pretend = 0, frame = 16
 2025              		@ frame_needed = 1, uses_anonymous_args = 0
 2026              		@ link register save eliminated.
 2027 0000 80B4     		push	{r7}
 2028              	.LCFI192:
 2029              		.cfi_def_cfa_offset 4
 2030              		.cfi_offset 7, -4
 2031 0002 85B0     		sub	sp, sp, #20
 2032              	.LCFI193:
 2033              		.cfi_def_cfa_offset 24
 2034 0004 00AF     		add	r7, sp, #0
 2035              	.LCFI194:
 2036              		.cfi_def_cfa_register 7
 2037 0006 7860     		str	r0, [r7, #4]
 269:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   __IO uint32_t tmpreg;
 270:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   SET_BIT(RCC->AHBENR, Periphs);
 2038              		.loc 5 270 3
 2039 0008 084B     		ldr	r3, .L86
 2040 000a 5A69     		ldr	r2, [r3, #20]
 2041 000c 0749     		ldr	r1, .L86
 2042 000e 7B68     		ldr	r3, [r7, #4]
 2043 0010 1343     		orrs	r3, r3, r2
 2044 0012 4B61     		str	r3, [r1, #20]
 271:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 272:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 2045              		.loc 5 272 12
 2046 0014 054B     		ldr	r3, .L86
 2047 0016 5A69     		ldr	r2, [r3, #20]
 2048 0018 7B68     		ldr	r3, [r7, #4]
 2049 001a 1340     		ands	r3, r3, r2
 2050              		.loc 5 272 10
 2051 001c FB60     		str	r3, [r7, #12]
 273:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   (void)tmpreg;
 2052              		.loc 5 273 3
 2053 001e FB68     		ldr	r3, [r7, #12]
 274:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** }
 2054              		.loc 5 274 1
 2055 0020 00BF     		nop
 2056 0022 1437     		adds	r7, r7, #20
 2057              	.LCFI195:
 2058              		.cfi_def_cfa_offset 4
 2059 0024 BD46     		mov	sp, r7
 2060              	.LCFI196:
 2061              		.cfi_def_cfa_register 13
 2062              		@ sp needed
 2063 0026 80BC     		pop	{r7}
 2064              	.LCFI197:
 2065              		.cfi_restore 7
 2066              		.cfi_def_cfa_offset 0
 2067 0028 7047     		bx	lr
 2068              	.L87:
 2069 002a 00BF     		.align	2
 2070              	.L86:
ARM GAS  /tmp/ccLne6l3.s 			page 189


 2071 002c 00100240 		.word	1073876992
 2072              		.cfi_endproc
 2073              	.LFE413:
 2075              		.section	.text.LL_APB1_GRP1_EnableClock,"ax",%progbits
 2076              		.align	1
 2077              		.syntax unified
 2078              		.thumb
 2079              		.thumb_func
 2081              	LL_APB1_GRP1_EnableClock:
 2082              	.LFB416:
 275:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 276:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 277:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @brief  Check if AHB1 peripheral clock is enabled or not
 278:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @rmtoll AHBENR       CRCEN         LL_AHB1_GRP1_IsEnabledClock\n
 279:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       DMA1EN        LL_AHB1_GRP1_IsEnabledClock\n
 280:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       DMA2EN        LL_AHB1_GRP1_IsEnabledClock\n
 281:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       ETHMACEN      LL_AHB1_GRP1_IsEnabledClock\n
 282:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       ETHMACRXEN    LL_AHB1_GRP1_IsEnabledClock\n
 283:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       ETHMACTXEN    LL_AHB1_GRP1_IsEnabledClock\n
 284:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       FLITFEN       LL_AHB1_GRP1_IsEnabledClock\n
 285:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       FSMCEN        LL_AHB1_GRP1_IsEnabledClock\n
 286:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       OTGFSEN       LL_AHB1_GRP1_IsEnabledClock\n
 287:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       SDIOEN        LL_AHB1_GRP1_IsEnabledClock\n
 288:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       SRAMEN        LL_AHB1_GRP1_IsEnabledClock
 289:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 290:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 291:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 292:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 293:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ETHMAC (*)
 294:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ETHMACRX (*)
 295:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ETHMACTX (*)
 296:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 297:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FSMC (*)
 298:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_OTGFS (*)
 299:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SDIO (*)
 300:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM
 301:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *
 302:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 303:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @retval State of Periphs (1 or 0).
 304:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** */
 305:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** __STATIC_INLINE uint32_t LL_AHB1_GRP1_IsEnabledClock(uint32_t Periphs)
 306:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** {
 307:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   return (READ_BIT(RCC->AHBENR, Periphs) == Periphs);
 308:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** }
 309:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 310:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 311:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @brief  Disable AHB1 peripherals clock.
 312:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @rmtoll AHBENR       CRCEN         LL_AHB1_GRP1_DisableClock\n
 313:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       DMA1EN        LL_AHB1_GRP1_DisableClock\n
 314:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       DMA2EN        LL_AHB1_GRP1_DisableClock\n
 315:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       ETHMACEN      LL_AHB1_GRP1_DisableClock\n
 316:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       ETHMACRXEN    LL_AHB1_GRP1_DisableClock\n
 317:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       ETHMACTXEN    LL_AHB1_GRP1_DisableClock\n
 318:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       FLITFEN       LL_AHB1_GRP1_DisableClock\n
 319:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       FSMCEN        LL_AHB1_GRP1_DisableClock\n
 320:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       OTGFSEN       LL_AHB1_GRP1_DisableClock\n
 321:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       SDIOEN        LL_AHB1_GRP1_DisableClock\n
ARM GAS  /tmp/ccLne6l3.s 			page 190


 322:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBENR       SRAMEN        LL_AHB1_GRP1_DisableClock
 323:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 324:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 325:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 326:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 327:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ETHMAC (*)
 328:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ETHMACRX (*)
 329:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ETHMACTX (*)
 330:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 331:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FSMC (*)
 332:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_OTGFS (*)
 333:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SDIO (*)
 334:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM
 335:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *
 336:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 337:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @retval None
 338:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** */
 339:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_DisableClock(uint32_t Periphs)
 340:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** {
 341:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBENR, Periphs);
 342:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** }
 343:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 344:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #if defined(RCC_AHBRSTR_SUPPORT)
 345:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 346:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @brief  Force AHB1 peripherals reset.
 347:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @rmtoll AHBRSTR      ETHMACRST     LL_AHB1_GRP1_ForceReset\n
 348:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBRSTR      OTGFSRST      LL_AHB1_GRP1_ForceReset
 349:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 350:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ALL
 351:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ETHMAC (*)
 352:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_OTGFS (*)
 353:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *
 354:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 355:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @retval None
 356:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** */
 357:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_ForceReset(uint32_t Periphs)
 358:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** {
 359:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   SET_BIT(RCC->AHBRSTR, Periphs);
 360:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** }
 361:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 362:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 363:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @brief  Release AHB1 peripherals reset.
 364:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @rmtoll AHBRSTR      ETHMACRST     LL_AHB1_GRP1_ReleaseReset\n
 365:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         AHBRSTR      OTGFSRST      LL_AHB1_GRP1_ReleaseReset
 366:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 367:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ALL
 368:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ETHMAC (*)
 369:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_OTGFS (*)
 370:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *
 371:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 372:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @retval None
 373:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** */
 374:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_ReleaseReset(uint32_t Periphs)
 375:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** {
 376:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBRSTR, Periphs);
 377:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** }
 378:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** #endif /* RCC_AHBRSTR_SUPPORT */
ARM GAS  /tmp/ccLne6l3.s 			page 191


 379:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 380:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 381:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @}
 382:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
 383:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 384:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /** @defgroup BUS_LL_EF_APB1 APB1
 385:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @{
 386:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
 387:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 388:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 389:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @brief  Enable APB1 peripherals clock.
 390:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @rmtoll APB1ENR      BKPEN         LL_APB1_GRP1_EnableClock\n
 391:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      CAN1EN        LL_APB1_GRP1_EnableClock\n
 392:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      CAN2EN        LL_APB1_GRP1_EnableClock\n
 393:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      CECEN         LL_APB1_GRP1_EnableClock\n
 394:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      DACEN         LL_APB1_GRP1_EnableClock\n
 395:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      I2C1EN        LL_APB1_GRP1_EnableClock\n
 396:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      I2C2EN        LL_APB1_GRP1_EnableClock\n
 397:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      PWREN         LL_APB1_GRP1_EnableClock\n
 398:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      SPI2EN        LL_APB1_GRP1_EnableClock\n
 399:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      SPI3EN        LL_APB1_GRP1_EnableClock\n
 400:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM12EN       LL_APB1_GRP1_EnableClock\n
 401:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM13EN       LL_APB1_GRP1_EnableClock\n
 402:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM14EN       LL_APB1_GRP1_EnableClock\n
 403:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM2EN        LL_APB1_GRP1_EnableClock\n
 404:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM3EN        LL_APB1_GRP1_EnableClock\n
 405:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM4EN        LL_APB1_GRP1_EnableClock\n
 406:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM5EN        LL_APB1_GRP1_EnableClock\n
 407:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM6EN        LL_APB1_GRP1_EnableClock\n
 408:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM7EN        LL_APB1_GRP1_EnableClock\n
 409:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      UART4EN       LL_APB1_GRP1_EnableClock\n
 410:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      UART5EN       LL_APB1_GRP1_EnableClock\n
 411:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      USART2EN      LL_APB1_GRP1_EnableClock\n
 412:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      USART3EN      LL_APB1_GRP1_EnableClock\n
 413:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      USBEN         LL_APB1_GRP1_EnableClock\n
 414:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      WWDGEN        LL_APB1_GRP1_EnableClock
 415:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 416:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
 417:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
 418:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
 419:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
 420:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
 421:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 422:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
 423:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 424:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
 425:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
 426:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
 427:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
 428:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
 429:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 430:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
 431:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
 432:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
 433:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
 434:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
 435:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
ARM GAS  /tmp/ccLne6l3.s 			page 192


 436:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
 437:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 438:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
 439:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 440:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 441:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *
 442:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 443:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @retval None
 444:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** */
 445:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
 446:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** {
 2083              		.loc 5 446 1
 2084              		.cfi_startproc
 2085              		@ args = 0, pretend = 0, frame = 16
 2086              		@ frame_needed = 1, uses_anonymous_args = 0
 2087              		@ link register save eliminated.
 2088 0000 80B4     		push	{r7}
 2089              	.LCFI198:
 2090              		.cfi_def_cfa_offset 4
 2091              		.cfi_offset 7, -4
 2092 0002 85B0     		sub	sp, sp, #20
 2093              	.LCFI199:
 2094              		.cfi_def_cfa_offset 24
 2095 0004 00AF     		add	r7, sp, #0
 2096              	.LCFI200:
 2097              		.cfi_def_cfa_register 7
 2098 0006 7860     		str	r0, [r7, #4]
 447:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   __IO uint32_t tmpreg;
 448:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   SET_BIT(RCC->APB1ENR, Periphs);
 2099              		.loc 5 448 3
 2100 0008 084B     		ldr	r3, .L89
 2101 000a DA69     		ldr	r2, [r3, #28]
 2102 000c 0749     		ldr	r1, .L89
 2103 000e 7B68     		ldr	r3, [r7, #4]
 2104 0010 1343     		orrs	r3, r3, r2
 2105 0012 CB61     		str	r3, [r1, #28]
 449:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 450:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 2106              		.loc 5 450 12
 2107 0014 054B     		ldr	r3, .L89
 2108 0016 DA69     		ldr	r2, [r3, #28]
 2109 0018 7B68     		ldr	r3, [r7, #4]
 2110 001a 1340     		ands	r3, r3, r2
 2111              		.loc 5 450 10
 2112 001c FB60     		str	r3, [r7, #12]
 451:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   (void)tmpreg;
 2113              		.loc 5 451 3
 2114 001e FB68     		ldr	r3, [r7, #12]
 452:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** }
 2115              		.loc 5 452 1
 2116 0020 00BF     		nop
 2117 0022 1437     		adds	r7, r7, #20
 2118              	.LCFI201:
 2119              		.cfi_def_cfa_offset 4
 2120 0024 BD46     		mov	sp, r7
 2121              	.LCFI202:
 2122              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccLne6l3.s 			page 193


 2123              		@ sp needed
 2124 0026 80BC     		pop	{r7}
 2125              	.LCFI203:
 2126              		.cfi_restore 7
 2127              		.cfi_def_cfa_offset 0
 2128 0028 7047     		bx	lr
 2129              	.L90:
 2130 002a 00BF     		.align	2
 2131              	.L89:
 2132 002c 00100240 		.word	1073876992
 2133              		.cfi_endproc
 2134              	.LFE416:
 2136              		.section	.text.LL_APB2_GRP1_EnableClock,"ax",%progbits
 2137              		.align	1
 2138              		.syntax unified
 2139              		.thumb
 2140              		.thumb_func
 2142              	LL_APB2_GRP1_EnableClock:
 2143              	.LFB421:
 453:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 454:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 455:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @brief  Check if APB1 peripheral clock is enabled or not
 456:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @rmtoll APB1ENR      BKPEN         LL_APB1_GRP1_IsEnabledClock\n
 457:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      CAN1EN        LL_APB1_GRP1_IsEnabledClock\n
 458:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      CAN2EN        LL_APB1_GRP1_IsEnabledClock\n
 459:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      CECEN         LL_APB1_GRP1_IsEnabledClock\n
 460:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      DACEN         LL_APB1_GRP1_IsEnabledClock\n
 461:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      I2C1EN        LL_APB1_GRP1_IsEnabledClock\n
 462:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      I2C2EN        LL_APB1_GRP1_IsEnabledClock\n
 463:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      PWREN         LL_APB1_GRP1_IsEnabledClock\n
 464:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      SPI2EN        LL_APB1_GRP1_IsEnabledClock\n
 465:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      SPI3EN        LL_APB1_GRP1_IsEnabledClock\n
 466:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM12EN       LL_APB1_GRP1_IsEnabledClock\n
 467:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM13EN       LL_APB1_GRP1_IsEnabledClock\n
 468:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM14EN       LL_APB1_GRP1_IsEnabledClock\n
 469:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM2EN        LL_APB1_GRP1_IsEnabledClock\n
 470:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM3EN        LL_APB1_GRP1_IsEnabledClock\n
 471:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM4EN        LL_APB1_GRP1_IsEnabledClock\n
 472:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM5EN        LL_APB1_GRP1_IsEnabledClock\n
 473:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM6EN        LL_APB1_GRP1_IsEnabledClock\n
 474:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM7EN        LL_APB1_GRP1_IsEnabledClock\n
 475:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      UART4EN       LL_APB1_GRP1_IsEnabledClock\n
 476:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      UART5EN       LL_APB1_GRP1_IsEnabledClock\n
 477:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      USART2EN      LL_APB1_GRP1_IsEnabledClock\n
 478:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      USART3EN      LL_APB1_GRP1_IsEnabledClock\n
 479:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      USBEN         LL_APB1_GRP1_IsEnabledClock\n
 480:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      WWDGEN        LL_APB1_GRP1_IsEnabledClock
 481:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 482:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
 483:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
 484:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
 485:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
 486:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
 487:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 488:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
 489:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 490:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
ARM GAS  /tmp/ccLne6l3.s 			page 194


 491:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
 492:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
 493:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
 494:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
 495:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 496:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
 497:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
 498:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
 499:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
 500:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
 501:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
 502:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
 503:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 504:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
 505:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 506:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 507:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *
 508:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 509:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @retval State of Periphs (1 or 0).
 510:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** */
 511:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** __STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
 512:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** {
 513:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 514:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** }
 515:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 516:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 517:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @brief  Disable APB1 peripherals clock.
 518:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @rmtoll APB1ENR      BKPEN         LL_APB1_GRP1_DisableClock\n
 519:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      CAN1EN        LL_APB1_GRP1_DisableClock\n
 520:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      CAN2EN        LL_APB1_GRP1_DisableClock\n
 521:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      CECEN         LL_APB1_GRP1_DisableClock\n
 522:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      DACEN         LL_APB1_GRP1_DisableClock\n
 523:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      I2C1EN        LL_APB1_GRP1_DisableClock\n
 524:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      I2C2EN        LL_APB1_GRP1_DisableClock\n
 525:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      PWREN         LL_APB1_GRP1_DisableClock\n
 526:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      SPI2EN        LL_APB1_GRP1_DisableClock\n
 527:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      SPI3EN        LL_APB1_GRP1_DisableClock\n
 528:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM12EN       LL_APB1_GRP1_DisableClock\n
 529:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM13EN       LL_APB1_GRP1_DisableClock\n
 530:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM14EN       LL_APB1_GRP1_DisableClock\n
 531:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM2EN        LL_APB1_GRP1_DisableClock\n
 532:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM3EN        LL_APB1_GRP1_DisableClock\n
 533:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM4EN        LL_APB1_GRP1_DisableClock\n
 534:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM5EN        LL_APB1_GRP1_DisableClock\n
 535:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM6EN        LL_APB1_GRP1_DisableClock\n
 536:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      TIM7EN        LL_APB1_GRP1_DisableClock\n
 537:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      UART4EN       LL_APB1_GRP1_DisableClock\n
 538:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      UART5EN       LL_APB1_GRP1_DisableClock\n
 539:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      USART2EN      LL_APB1_GRP1_DisableClock\n
 540:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      USART3EN      LL_APB1_GRP1_DisableClock\n
 541:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      USBEN         LL_APB1_GRP1_DisableClock\n
 542:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1ENR      WWDGEN        LL_APB1_GRP1_DisableClock
 543:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 544:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
 545:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
 546:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
 547:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
ARM GAS  /tmp/ccLne6l3.s 			page 195


 548:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
 549:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 550:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
 551:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 552:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
 553:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
 554:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
 555:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
 556:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
 557:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 558:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
 559:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
 560:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
 561:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
 562:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
 563:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
 564:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
 565:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 566:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
 567:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 568:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 569:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *
 570:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 571:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @retval None
 572:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** */
 573:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
 574:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** {
 575:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   CLEAR_BIT(RCC->APB1ENR, Periphs);
 576:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** }
 577:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 578:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 579:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @brief  Force APB1 peripherals reset.
 580:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @rmtoll APB1RSTR     BKPRST        LL_APB1_GRP1_ForceReset\n
 581:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     CAN1RST       LL_APB1_GRP1_ForceReset\n
 582:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     CAN2RST       LL_APB1_GRP1_ForceReset\n
 583:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     CECRST        LL_APB1_GRP1_ForceReset\n
 584:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     DACRST        LL_APB1_GRP1_ForceReset\n
 585:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     I2C1RST       LL_APB1_GRP1_ForceReset\n
 586:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     I2C2RST       LL_APB1_GRP1_ForceReset\n
 587:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     PWRRST        LL_APB1_GRP1_ForceReset\n
 588:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     SPI2RST       LL_APB1_GRP1_ForceReset\n
 589:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     SPI3RST       LL_APB1_GRP1_ForceReset\n
 590:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM12RST      LL_APB1_GRP1_ForceReset\n
 591:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM13RST      LL_APB1_GRP1_ForceReset\n
 592:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM14RST      LL_APB1_GRP1_ForceReset\n
 593:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM2RST       LL_APB1_GRP1_ForceReset\n
 594:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM3RST       LL_APB1_GRP1_ForceReset\n
 595:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM4RST       LL_APB1_GRP1_ForceReset\n
 596:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM5RST       LL_APB1_GRP1_ForceReset\n
 597:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM6RST       LL_APB1_GRP1_ForceReset\n
 598:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM7RST       LL_APB1_GRP1_ForceReset\n
 599:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     UART4RST      LL_APB1_GRP1_ForceReset\n
 600:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     UART5RST      LL_APB1_GRP1_ForceReset\n
 601:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     USART2RST     LL_APB1_GRP1_ForceReset\n
 602:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     USART3RST     LL_APB1_GRP1_ForceReset\n
 603:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     USBRST        LL_APB1_GRP1_ForceReset\n
 604:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     WWDGRST       LL_APB1_GRP1_ForceReset
ARM GAS  /tmp/ccLne6l3.s 			page 196


 605:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 606:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_ALL
 607:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
 608:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
 609:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
 610:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
 611:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
 612:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 613:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
 614:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 615:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
 616:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
 617:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
 618:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
 619:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
 620:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 621:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
 622:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
 623:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
 624:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
 625:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
 626:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
 627:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
 628:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 629:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
 630:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 631:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 632:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *
 633:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 634:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @retval None
 635:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** */
 636:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
 637:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** {
 638:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   SET_BIT(RCC->APB1RSTR, Periphs);
 639:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** }
 640:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 641:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 642:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @brief  Release APB1 peripherals reset.
 643:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @rmtoll APB1RSTR     BKPRST        LL_APB1_GRP1_ReleaseReset\n
 644:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     CAN1RST       LL_APB1_GRP1_ReleaseReset\n
 645:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     CAN2RST       LL_APB1_GRP1_ReleaseReset\n
 646:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     CECRST        LL_APB1_GRP1_ReleaseReset\n
 647:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     DACRST        LL_APB1_GRP1_ReleaseReset\n
 648:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     I2C1RST       LL_APB1_GRP1_ReleaseReset\n
 649:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     I2C2RST       LL_APB1_GRP1_ReleaseReset\n
 650:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     PWRRST        LL_APB1_GRP1_ReleaseReset\n
 651:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     SPI2RST       LL_APB1_GRP1_ReleaseReset\n
 652:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     SPI3RST       LL_APB1_GRP1_ReleaseReset\n
 653:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM12RST      LL_APB1_GRP1_ReleaseReset\n
 654:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM13RST      LL_APB1_GRP1_ReleaseReset\n
 655:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM14RST      LL_APB1_GRP1_ReleaseReset\n
 656:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM2RST       LL_APB1_GRP1_ReleaseReset\n
 657:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM3RST       LL_APB1_GRP1_ReleaseReset\n
 658:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM4RST       LL_APB1_GRP1_ReleaseReset\n
 659:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM5RST       LL_APB1_GRP1_ReleaseReset\n
 660:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM6RST       LL_APB1_GRP1_ReleaseReset\n
 661:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     TIM7RST       LL_APB1_GRP1_ReleaseReset\n
ARM GAS  /tmp/ccLne6l3.s 			page 197


 662:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     UART4RST      LL_APB1_GRP1_ReleaseReset\n
 663:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     UART5RST      LL_APB1_GRP1_ReleaseReset\n
 664:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     USART2RST     LL_APB1_GRP1_ReleaseReset\n
 665:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     USART3RST     LL_APB1_GRP1_ReleaseReset\n
 666:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     USBRST        LL_APB1_GRP1_ReleaseReset\n
 667:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB1RSTR     WWDGRST       LL_APB1_GRP1_ReleaseReset
 668:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 669:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_ALL
 670:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_BKP
 671:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CAN1 (*)
 672:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CAN2 (*)
 673:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
 674:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1 (*)
 675:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 676:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
 677:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 678:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
 679:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
 680:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
 681:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
 682:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
 683:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 684:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
 685:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
 686:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
 687:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6 (*)
 688:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
 689:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
 690:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
 691:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 692:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART3 (*)
 693:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 694:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 695:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *
 696:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 697:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @retval None
 698:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** */
 699:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
 700:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** {
 701:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   CLEAR_BIT(RCC->APB1RSTR, Periphs);
 702:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** }
 703:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 704:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 705:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @}
 706:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
 707:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 708:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /** @defgroup BUS_LL_EF_APB2 APB2
 709:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @{
 710:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   */
 711:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** 
 712:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** /**
 713:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @brief  Enable APB2 peripherals clock.
 714:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @rmtoll APB2ENR      ADC1EN        LL_APB2_GRP1_EnableClock\n
 715:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      ADC2EN        LL_APB2_GRP1_EnableClock\n
 716:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      ADC3EN        LL_APB2_GRP1_EnableClock\n
 717:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      AFIOEN        LL_APB2_GRP1_EnableClock\n
 718:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      IOPAEN        LL_APB2_GRP1_EnableClock\n
ARM GAS  /tmp/ccLne6l3.s 			page 198


 719:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      IOPBEN        LL_APB2_GRP1_EnableClock\n
 720:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      IOPCEN        LL_APB2_GRP1_EnableClock\n
 721:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      IOPDEN        LL_APB2_GRP1_EnableClock\n
 722:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      IOPEEN        LL_APB2_GRP1_EnableClock\n
 723:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      IOPFEN        LL_APB2_GRP1_EnableClock\n
 724:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      IOPGEN        LL_APB2_GRP1_EnableClock\n
 725:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      SPI1EN        LL_APB2_GRP1_EnableClock\n
 726:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      TIM10EN       LL_APB2_GRP1_EnableClock\n
 727:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      TIM11EN       LL_APB2_GRP1_EnableClock\n
 728:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      TIM15EN       LL_APB2_GRP1_EnableClock\n
 729:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      TIM16EN       LL_APB2_GRP1_EnableClock\n
 730:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      TIM17EN       LL_APB2_GRP1_EnableClock\n
 731:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      TIM1EN        LL_APB2_GRP1_EnableClock\n
 732:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      TIM8EN        LL_APB2_GRP1_EnableClock\n
 733:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      TIM9EN        LL_APB2_GRP1_EnableClock\n
 734:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         APB2ENR      USART1EN      LL_APB2_GRP1_EnableClock
 735:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 736:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_ADC1
 737:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_ADC2 (*)
 738:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_ADC3 (*)
 739:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_AFIO
 740:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOA
 741:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOB
 742:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOC
 743:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOD
 744:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOE (*)
 745:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOF (*)
 746:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_GPIOG (*)
 747:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SPI1
 748:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM10 (*)
 749:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM11 (*)
 750:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM15 (*)
 751:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16 (*)
 752:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17 (*)
 753:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM1
 754:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM8 (*)
 755:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM9 (*)
 756:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_USART1
 757:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *
 758:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 759:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   * @retval None
 760:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** */
 761:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** __STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
 762:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** {
 2144              		.loc 5 762 1
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 16
 2147              		@ frame_needed = 1, uses_anonymous_args = 0
 2148              		@ link register save eliminated.
 2149 0000 80B4     		push	{r7}
 2150              	.LCFI204:
 2151              		.cfi_def_cfa_offset 4
 2152              		.cfi_offset 7, -4
 2153 0002 85B0     		sub	sp, sp, #20
 2154              	.LCFI205:
 2155              		.cfi_def_cfa_offset 24
 2156 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccLne6l3.s 			page 199


 2157              	.LCFI206:
 2158              		.cfi_def_cfa_register 7
 2159 0006 7860     		str	r0, [r7, #4]
 763:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   __IO uint32_t tmpreg;
 764:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   SET_BIT(RCC->APB2ENR, Periphs);
 2160              		.loc 5 764 3
 2161 0008 084B     		ldr	r3, .L92
 2162 000a 9A69     		ldr	r2, [r3, #24]
 2163 000c 0749     		ldr	r1, .L92
 2164 000e 7B68     		ldr	r3, [r7, #4]
 2165 0010 1343     		orrs	r3, r3, r2
 2166 0012 8B61     		str	r3, [r1, #24]
 765:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 766:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 2167              		.loc 5 766 12
 2168 0014 054B     		ldr	r3, .L92
 2169 0016 9A69     		ldr	r2, [r3, #24]
 2170 0018 7B68     		ldr	r3, [r7, #4]
 2171 001a 1340     		ands	r3, r3, r2
 2172              		.loc 5 766 10
 2173 001c FB60     		str	r3, [r7, #12]
 767:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h ****   (void)tmpreg;
 2174              		.loc 5 767 3
 2175 001e FB68     		ldr	r3, [r7, #12]
 768:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_bus.h **** }
 2176              		.loc 5 768 1
 2177 0020 00BF     		nop
 2178 0022 1437     		adds	r7, r7, #20
 2179              	.LCFI207:
 2180              		.cfi_def_cfa_offset 4
 2181 0024 BD46     		mov	sp, r7
 2182              	.LCFI208:
 2183              		.cfi_def_cfa_register 13
 2184              		@ sp needed
 2185 0026 80BC     		pop	{r7}
 2186              	.LCFI209:
 2187              		.cfi_restore 7
 2188              		.cfi_def_cfa_offset 0
 2189 0028 7047     		bx	lr
 2190              	.L93:
 2191 002a 00BF     		.align	2
 2192              	.L92:
 2193 002c 00100240 		.word	1073876992
 2194              		.cfi_endproc
 2195              	.LFE421:
 2197              		.section	.text.LL_GPIO_AF_RemapPartial_TIM1,"ax",%progbits
 2198              		.align	1
 2199              		.syntax unified
 2200              		.thumb
 2201              		.thumb_func
 2203              	LL_GPIO_AF_RemapPartial_TIM1:
 2204              	.LFB609:
 2205              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h"
   1:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @file    stm32f1xx_ll_gpio.h
   4:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @author  MCD Application Team
ARM GAS  /tmp/ccLne6l3.s 			page 200


   5:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief   Header file of GPIO LL module.
   6:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   ******************************************************************************
   7:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @attention
   8:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *
   9:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * All rights reserved.
  11:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *
  12:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * in the root directory of this software component.
  14:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *
  16:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   ******************************************************************************
  17:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
  18:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  19:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #ifndef STM32F1xx_LL_GPIO_H
  21:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define STM32F1xx_LL_GPIO_H
  22:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  23:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #ifdef __cplusplus
  24:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** extern "C" {
  25:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #endif
  26:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  27:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #include "stm32f1xx.h"
  29:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  30:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @addtogroup STM32F1xx_LL_Driver
  31:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
  32:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
  33:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  34:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #if defined (GPIOA) || defined (GPIOB) || defined (GPIOC) || defined (GPIOD) || defined (GPIOE) || 
  35:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  36:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL GPIO
  37:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
  38:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
  39:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  40:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /* Private constants ---------------------------------------------------------*/
  43:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  44:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_Private_Constants GPIO Private Constants
  45:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
  46:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
  47:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /* Defines used for Pin Mask Initialization */
  48:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define GPIO_PIN_MASK_POS   8U
  49:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define GPIO_PIN_NB         16U
  50:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
  51:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
  52:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
  53:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  54:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /* Private macros ------------------------------------------------------------*/
  55:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  56:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_Private_Macros GPIO Private Macros
  57:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
  58:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
  59:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  60:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
  61:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
ARM GAS  /tmp/ccLne6l3.s 			page 201


  62:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
  63:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #endif /*USE_FULL_LL_DRIVER*/
  64:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  65:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /* Exported types ------------------------------------------------------------*/
  66:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  67:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_ES_INIT GPIO Exported Init structures
  68:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
  69:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
  70:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  71:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
  72:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief LL GPIO Init Structure definition
  73:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
  74:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** typedef struct
  75:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
  76:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   uint32_t Pin;          /*!< Specifies the GPIO pins to be configured.
  77:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****                               This parameter can be any value of @ref GPIO_LL_EC_PIN */
  78:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  79:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   uint32_t Mode;         /*!< Specifies the operating mode for the selected pins.
  80:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_MODE.
  81:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  82:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  83:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  84:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   uint32_t Speed;        /*!< Specifies the speed for the selected pins.
  85:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_SPEED.
  86:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  87:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  88:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  89:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   uint32_t OutputType;   /*!< Specifies the operating output type for the selected pins.
  90:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_OUTPUT.
  91:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  92:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  93:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  94:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   uint32_t Pull;         /*!< Specifies the operating Pull-up/Pull down for the selected pins.
  95:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_PULL.
  96:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
  97:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  98:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** } LL_GPIO_InitTypeDef;
  99:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 100:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 101:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 102:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 103:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #endif /* USE_FULL_LL_DRIVER */
 104:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 105:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /* Exported constants --------------------------------------------------------*/
 106:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Constants GPIO Exported Constants
 107:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 108:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 109:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 110:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PIN PIN
 111:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 112:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 113:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_0                    ((GPIO_BSRR_BS0  << GPIO_PIN_MASK_POS) | 0x00000001U)  /*!
 114:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_1                    ((GPIO_BSRR_BS1  << GPIO_PIN_MASK_POS) | 0x00000002U)  /*!
 115:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_2                    ((GPIO_BSRR_BS2  << GPIO_PIN_MASK_POS) | 0x00000004U)  /*!
 116:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_3                    ((GPIO_BSRR_BS3  << GPIO_PIN_MASK_POS) | 0x00000008U)  /*!
 117:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_4                    ((GPIO_BSRR_BS4  << GPIO_PIN_MASK_POS) | 0x00000010U)  /*!
 118:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_5                    ((GPIO_BSRR_BS5  << GPIO_PIN_MASK_POS) | 0x00000020U)  /*!
ARM GAS  /tmp/ccLne6l3.s 			page 202


 119:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_6                    ((GPIO_BSRR_BS6  << GPIO_PIN_MASK_POS) | 0x00000040U)  /*!
 120:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_7                    ((GPIO_BSRR_BS7  << GPIO_PIN_MASK_POS) | 0x00000080U)  /*!
 121:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_8                    ((GPIO_BSRR_BS8  << GPIO_PIN_MASK_POS) | 0x04000001U)  /*!
 122:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_9                    ((GPIO_BSRR_BS9  << GPIO_PIN_MASK_POS) | 0x04000002U)  /*!
 123:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_10                   ((GPIO_BSRR_BS10 << GPIO_PIN_MASK_POS) | 0x04000004U)  /*!
 124:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_11                   ((GPIO_BSRR_BS11 << GPIO_PIN_MASK_POS) | 0x04000008U)  /*!
 125:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_12                   ((GPIO_BSRR_BS12 << GPIO_PIN_MASK_POS) | 0x04000010U)  /*!
 126:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_13                   ((GPIO_BSRR_BS13 << GPIO_PIN_MASK_POS) | 0x04000020U)  /*!
 127:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_14                   ((GPIO_BSRR_BS14 << GPIO_PIN_MASK_POS) | 0x04000040U)  /*!
 128:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_15                   ((GPIO_BSRR_BS15 << GPIO_PIN_MASK_POS) | 0x04000080U)  /*!
 129:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PIN_ALL                  (LL_GPIO_PIN_0  | LL_GPIO_PIN_1  | LL_GPIO_PIN_2  | \
 130:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****                                           LL_GPIO_PIN_3  | LL_GPIO_PIN_4  | LL_GPIO_PIN_5  | \
 131:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****                                           LL_GPIO_PIN_6  | LL_GPIO_PIN_7  | LL_GPIO_PIN_8  | \
 132:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****                                           LL_GPIO_PIN_9  | LL_GPIO_PIN_10 | LL_GPIO_PIN_11 | \
 133:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****                                           LL_GPIO_PIN_12 | LL_GPIO_PIN_13 | LL_GPIO_PIN_14 | \
 134:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****                                           LL_GPIO_PIN_15)                                      /*!<
 135:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 136:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 137:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 138:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 139:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_MODE Mode
 140:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 141:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 142:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_MODE_ANALOG              0x00000000U       /*!< Select analog mode */
 143:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_MODE_FLOATING            GPIO_CRL_CNF0_0   /*!< Select floating mode */
 144:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_MODE_INPUT               GPIO_CRL_CNF0_1   /*!< Select input mode */
 145:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_MODE_OUTPUT              GPIO_CRL_MODE0_0  /*!< Select general purpose output mode 
 146:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_MODE_ALTERNATE           (GPIO_CRL_CNF0_1 | GPIO_CRL_MODE0_0) /*!< Select alternate
 147:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 148:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 149:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 150:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 151:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_OUTPUT Output Type
 152:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 153:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 154:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_PUSHPULL          0x00000000U                /*!< Select push-pull as output
 155:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_OPENDRAIN         GPIO_CRL_CNF0_0            /*!< Select open-drain as outpu
 156:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 157:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 158:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 159:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 160:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_SPEED Output Speed
 161:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 162:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 163:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_MODE_OUTPUT_10MHz        GPIO_CRL_MODE0_0            /*!< Select Output mode, max s
 164:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_MODE_OUTPUT_2MHz         GPIO_CRL_MODE0_1            /*!< Select Output mode, max s
 165:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_MODE_OUTPUT_50MHz        GPIO_CRL_MODE0              /*!< Select Output mode, max s
 166:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 167:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 168:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 169:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 170:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_LOW           LL_GPIO_MODE_OUTPUT_2MHz    /*!< Select I/O low output spe
 171:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_MEDIUM        LL_GPIO_MODE_OUTPUT_10MHz   /*!< Select I/O medium output 
 172:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_HIGH          LL_GPIO_MODE_OUTPUT_50MHz   /*!< Select I/O high output sp
 173:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 174:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PULL Pull Up Pull Down
 175:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
ARM GAS  /tmp/ccLne6l3.s 			page 203


 176:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 177:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PULL_DOWN                0x00000000U    /*!< Select I/O pull down */
 178:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_PULL_UP                  GPIO_ODR_ODR0  /*!< Select I/O pull up */
 179:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 180:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 181:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 182:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 183:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 184:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_EVENTOUT_PIN EVENTOUT Pin
 185:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 186:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 187:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 188:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_0        AFIO_EVCR_PIN_PX0   /*!< EVENTOUT on pin 0 */
 189:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_1        AFIO_EVCR_PIN_PX1   /*!< EVENTOUT on pin 1 */
 190:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_2        AFIO_EVCR_PIN_PX2   /*!< EVENTOUT on pin 2 */
 191:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_3        AFIO_EVCR_PIN_PX3   /*!< EVENTOUT on pin 3 */
 192:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_4        AFIO_EVCR_PIN_PX4   /*!< EVENTOUT on pin 4 */
 193:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_5        AFIO_EVCR_PIN_PX5   /*!< EVENTOUT on pin 5 */
 194:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_6        AFIO_EVCR_PIN_PX6   /*!< EVENTOUT on pin 6 */
 195:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_7        AFIO_EVCR_PIN_PX7   /*!< EVENTOUT on pin 7 */
 196:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_8        AFIO_EVCR_PIN_PX8   /*!< EVENTOUT on pin 8 */
 197:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_9        AFIO_EVCR_PIN_PX9   /*!< EVENTOUT on pin 9 */
 198:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_10       AFIO_EVCR_PIN_PX10  /*!< EVENTOUT on pin 10 */
 199:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_11       AFIO_EVCR_PIN_PX11  /*!< EVENTOUT on pin 11 */
 200:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_12       AFIO_EVCR_PIN_PX12  /*!< EVENTOUT on pin 12 */
 201:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_13       AFIO_EVCR_PIN_PX13  /*!< EVENTOUT on pin 13 */
 202:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_14       AFIO_EVCR_PIN_PX14  /*!< EVENTOUT on pin 14 */
 203:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PIN_15       AFIO_EVCR_PIN_PX15  /*!< EVENTOUT on pin 15 */
 204:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 205:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 206:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 207:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 208:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 209:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_EVENTOUT_PORT EVENTOUT Port
 210:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 211:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 212:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 213:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PORT_A       AFIO_EVCR_PORT_PA  /*!< EVENTOUT on port A */
 214:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PORT_B       AFIO_EVCR_PORT_PB  /*!< EVENTOUT on port B */
 215:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PORT_C       AFIO_EVCR_PORT_PC  /*!< EVENTOUT on port C */
 216:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PORT_D       AFIO_EVCR_PORT_PD  /*!< EVENTOUT on port D */
 217:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EVENTOUT_PORT_E       AFIO_EVCR_PORT_PE  /*!< EVENTOUT on port E */
 218:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 219:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 220:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 221:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 222:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 223:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_EXTI_PORT GPIO EXTI PORT
 224:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 225:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 226:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_PORTA            0U   /*!< EXTI PORT A */
 227:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_PORTB            1U   /*!< EXTI PORT B */
 228:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_PORTC            2U   /*!< EXTI PORT C */
 229:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_PORTD            3U   /*!< EXTI PORT D */
 230:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_PORTE            4U   /*!< EXTI PORT E */
 231:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_PORTF            5U   /*!< EXTI PORT F */
 232:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_PORTG            6U   /*!< EXTI PORT G */
ARM GAS  /tmp/ccLne6l3.s 			page 204


 233:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 234:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 235:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 236:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 237:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_EXTI_LINE GPIO EXTI LINE
 238:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 239:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 240:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE0            (0x000FU << 16U | 0U)  /*!< EXTI_POSITION_0  | EXTICR[0] *
 241:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE1            (0x00F0U << 16U | 0U)  /*!< EXTI_POSITION_4  | EXTICR[0] *
 242:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE2            (0x0F00U << 16U | 0U)  /*!< EXTI_POSITION_8  | EXTICR[0] *
 243:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE3            (0xF000U << 16U | 0U)  /*!< EXTI_POSITION_12 | EXTICR[0] *
 244:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE4            (0x000FU << 16U | 1U)  /*!< EXTI_POSITION_0  | EXTICR[1] *
 245:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE5            (0x00F0U << 16U | 1U)  /*!< EXTI_POSITION_4  | EXTICR[1] *
 246:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE6            (0x0F00U << 16U | 1U)  /*!< EXTI_POSITION_8  | EXTICR[1] *
 247:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE7            (0xF000U << 16U | 1U)  /*!< EXTI_POSITION_12 | EXTICR[1] *
 248:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE8            (0x000FU << 16U | 2U)  /*!< EXTI_POSITION_0  | EXTICR[2] *
 249:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE9            (0x00F0U << 16U | 2U)  /*!< EXTI_POSITION_4  | EXTICR[2] *
 250:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE10           (0x0F00U << 16U | 2U)  /*!< EXTI_POSITION_8  | EXTICR[2] *
 251:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE11           (0xF000U << 16U | 2U)  /*!< EXTI_POSITION_12 | EXTICR[2] *
 252:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE12           (0x000FU << 16U | 3U)  /*!< EXTI_POSITION_0  | EXTICR[3] *
 253:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE13           (0x00F0U << 16U | 3U)  /*!< EXTI_POSITION_4  | EXTICR[3] *
 254:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE14           (0x0F00U << 16U | 3U)  /*!< EXTI_POSITION_8  | EXTICR[3] *
 255:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_AF_EXTI_LINE15           (0xF000U << 16U | 3U)  /*!< EXTI_POSITION_12 | EXTICR[3] *
 256:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 257:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 258:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 259:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 260:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 261:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 262:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 263:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 264:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /* Exported macro ------------------------------------------------------------*/
 265:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Macros GPIO Exported Macros
 266:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 267:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 268:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 269:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_EM_WRITE_READ Common Write and read registers Macros
 270:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 271:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 272:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 273:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 274:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Write a value in GPIO register
 275:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 276:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  __REG__ Register to be written
 277:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  __VALUE__ Value to be written in the register
 278:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 279:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 280:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALU
 281:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 282:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 283:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Read a value in GPIO register
 284:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 285:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  __REG__ Register to be read
 286:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval Register value
 287:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 288:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #define LL_GPIO_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 289:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
ARM GAS  /tmp/ccLne6l3.s 			page 205


 290:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 291:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 292:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 293:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 294:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 295:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 296:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 297:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /* Exported functions --------------------------------------------------------*/
 298:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Functions GPIO Exported Functions
 299:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 300:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 301:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 302:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_EF_Port_Configuration Port Configuration
 303:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 304:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 305:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 306:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 307:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Configure gpio mode for a dedicated pin on dedicated port.
 308:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   I/O mode can be Analog, Floating input, Input with pull-up/pull-down, General purpose O
 309:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         Alternate function Output.
 310:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 311:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRL        CNFy         LL_GPIO_SetPinMode
 312:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRL        MODEy        LL_GPIO_SetPinMode
 313:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRH        CNFy         LL_GPIO_SetPinMode
 314:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRH        MODEy        LL_GPIO_SetPinMode
 315:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 316:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 317:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 318:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 319:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 320:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 321:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 322:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 323:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 324:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 325:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 326:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 327:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 328:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 329:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 330:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 331:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 332:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 333:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  Mode This parameter can be one of the following values:
 334:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 335:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_FLOATING
 336:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 337:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 338:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 339:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 340:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 341:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
 342:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 343:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 344:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSIT
 345:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 346:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 206


 347:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 348:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Return gpio mode for a dedicated pin on dedicated port.
 349:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   I/O mode can be Analog, Floating input, Input with pull-up/pull-down, General purpose O
 350:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         Alternate function Output.
 351:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 352:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRL        CNFy         LL_GPIO_GetPinMode
 353:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRL        MODEy        LL_GPIO_GetPinMode
 354:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRH        CNFy         LL_GPIO_GetPinMode
 355:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRH        MODEy        LL_GPIO_GetPinMode
 356:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 357:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 358:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 359:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 360:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 361:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 362:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 363:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 364:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 365:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 366:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 367:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 368:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 369:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 370:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 371:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 372:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 373:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 374:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 375:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 376:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_FLOATING
 377:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 378:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 379:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 380:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 381:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin)
 382:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 383:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 384:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   return (READ_BIT(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U))) >> (POSIT
 385:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 386:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 387:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 388:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Configure gpio speed for a dedicated pin on dedicated port.
 389:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium or Fast speed.
 390:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 391:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 392:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 393:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRL      MODEy       LL_GPIO_SetPinSpeed
 394:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRH      MODEy       LL_GPIO_SetPinSpeed
 395:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 396:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 397:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 398:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 399:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 400:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 401:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 402:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 403:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
ARM GAS  /tmp/ccLne6l3.s 			page 207


 404:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 405:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 406:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 407:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 408:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 409:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 410:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 411:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 412:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 413:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  Speed This parameter can be one of the following values:
 414:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
 415:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 416:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 417:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 418:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 419:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 420:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 421:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 422:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 423:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****              (Speed << (POSITION_VAL(Pin) * 4U)));
 424:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 425:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 426:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 427:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Return gpio speed for a dedicated pin on dedicated port.
 428:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
 429:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 430:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 431:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 432:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRL      MODEy       LL_GPIO_GetPinSpeed
 433:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRH      MODEy       LL_GPIO_GetPinSpeed
 434:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 435:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 436:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 437:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 438:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 439:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 440:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 441:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 442:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 443:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 444:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 445:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 446:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 447:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 448:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 449:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 450:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 451:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 452:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 453:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
 454:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 455:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 456:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 457:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin)
 458:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 459:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 460:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   return (READ_BIT(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U))) >> (POSITION_VAL(Pin) * 4U)
ARM GAS  /tmp/ccLne6l3.s 			page 208


 461:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 462:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 463:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 464:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Configure gpio output type for several pins on dedicated port.
 465:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 466:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 467:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRL       MODEy           LL_GPIO_SetPinOutputType
 468:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRH       MODEy           LL_GPIO_SetPinOutputType
 469:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 470:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  Pin This parameter can be a combination of the following values:
 471:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 472:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 473:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 474:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 475:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 476:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 477:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 478:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 479:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 480:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 481:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 482:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 483:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 484:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 485:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 486:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 487:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 488:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  OutputType This parameter can be one of the following values:
 489:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 490:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 491:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 492:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 493:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputTyp
 494:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 495:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 496:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 497:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****              (OutputType << (POSITION_VAL(Pin) * 4U)));
 498:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 499:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 500:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 501:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Return gpio output type for several pins on dedicated port.
 502:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 503:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 504:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 505:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRL       MODEy       LL_GPIO_GetPinOutputType
 506:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll CRH       MODEy       LL_GPIO_GetPinOutputType
 507:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 508:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 509:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 510:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 511:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 512:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 513:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 514:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 515:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 516:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 517:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
ARM GAS  /tmp/ccLne6l3.s 			page 209


 518:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 519:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 520:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 521:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 522:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 523:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 524:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 525:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 526:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 527:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 528:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 529:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 530:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin)
 531:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 532:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 533:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   return (READ_BIT(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U))) >> (POSITION_VAL(Pin) * 4U
 534:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 535:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 536:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 537:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 538:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Configure gpio pull-up or pull-down for a dedicated pin on a dedicated port.
 539:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 540:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll ODR        ODR         LL_GPIO_SetPinPull
 541:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 542:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 543:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 544:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 545:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 546:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 547:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 548:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 549:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 550:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 551:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 552:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 553:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 554:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 555:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 556:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 557:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 558:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 559:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  Pull This parameter can be one of the following values:
 560:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 561:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 562:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 563:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 564:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
 565:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 566:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS
 567:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 568:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 569:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 570:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Return gpio pull-up or pull-down for a dedicated pin on a dedicated port
 571:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 572:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll ODR        ODR         LL_GPIO_GetPinPull
 573:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 574:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
ARM GAS  /tmp/ccLne6l3.s 			page 210


 575:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 576:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 577:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 578:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 579:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 580:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 581:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 582:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 583:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 584:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 585:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 586:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 587:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 588:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 589:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 590:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 591:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 592:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 593:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 594:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 595:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin)
 596:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 597:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   return (READ_BIT(GPIOx->ODR, (GPIO_ODR_ODR0 << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)))) >> (POS
 598:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 599:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 600:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 601:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Lock configuration of several pins for a dedicated port.
 602:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   When the lock sequence has been applied on a port bit, the
 603:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         value of this port bit can no longer be modified until the
 604:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         next reset.
 605:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   Each lock bit freezes a specific configuration register
 606:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         (control and alternate function registers).
 607:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll LCKR         LCKK          LL_GPIO_LockPin
 608:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 609:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 610:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 611:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 612:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 613:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 614:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 615:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 616:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 617:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 618:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 619:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 620:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 621:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 622:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 623:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 624:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 625:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 626:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 627:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 628:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 629:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 630:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 631:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   __IO uint32_t temp;
ARM GAS  /tmp/ccLne6l3.s 			page 211


 632:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 633:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 634:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 635:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   temp = READ_REG(GPIOx->LCKR);
 636:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   (void) temp;
 637:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 638:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 639:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 640:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Return 1 if all pins passed as parameter, of a dedicated port, are locked. else Return 
 641:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll LCKR         LCKy          LL_GPIO_IsPinLocked
 642:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 643:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 644:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 645:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 646:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 647:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 648:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 649:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 650:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 651:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 652:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 653:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 654:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 655:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 656:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 657:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 658:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 659:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 660:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 661:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
 662:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 663:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_IsPinLocked(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 664:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 665:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   return (READ_BIT(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU)) == ((PinMask >> GPI
 666:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 667:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 668:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 669:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Return 1 if one of the pin of a dedicated port is locked. else return 0.
 670:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll LCKR         LCKK          LL_GPIO_IsAnyPinLocked
 671:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 672:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
 673:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 674:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_IsAnyPinLocked(GPIO_TypeDef *GPIOx)
 675:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 676:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   return (READ_BIT(GPIOx->LCKR, GPIO_LCKR_LCKK) == (GPIO_LCKR_LCKK));
 677:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 678:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 679:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 680:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 681:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 682:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 683:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_LL_EF_Data_Access Data Access
 684:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 685:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 686:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 687:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 688:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Return full input data register value for a dedicated port.
ARM GAS  /tmp/ccLne6l3.s 			page 212


 689:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
 690:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 691:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval Input data register value of port
 692:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 693:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
 694:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 695:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   return (READ_REG(GPIOx->IDR));
 696:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 697:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 698:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 699:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Return if input data level for several pins of dedicated port is high or low.
 700:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll IDR          IDy           LL_GPIO_IsInputPinSet
 701:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 702:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 703:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 704:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 705:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 706:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 707:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 708:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 709:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 710:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 711:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 712:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 713:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 714:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 715:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 716:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 717:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 718:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 719:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 720:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
 721:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 722:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 723:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 724:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_P
 725:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 726:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 727:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 728:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Write output data register for the port.
 729:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll ODR          ODy           LL_GPIO_WriteOutputPort
 730:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 731:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  PortValue Level value for each pin of the port
 732:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 733:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 734:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_WriteOutputPort(GPIO_TypeDef *GPIOx, uint32_t PortValue)
 735:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 736:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   WRITE_REG(GPIOx->ODR, PortValue);
 737:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 738:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 739:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 740:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Return full output data register value for a dedicated port.
 741:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll ODR          ODy           LL_GPIO_ReadOutputPort
 742:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 743:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval Output data register value of port
 744:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 745:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
ARM GAS  /tmp/ccLne6l3.s 			page 213


 746:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 747:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   return (uint32_t)(READ_REG(GPIOx->ODR));
 748:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 749:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 750:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 751:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Return if input data level for several pins of dedicated port is high or low.
 752:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll ODR          ODy           LL_GPIO_IsOutputPinSet
 753:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 754:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 755:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 756:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 757:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 758:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 759:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 760:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 761:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 762:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 763:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 764:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 765:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 766:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 767:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 768:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 769:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 770:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 771:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 772:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
 773:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 774:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_IsOutputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 775:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 776:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   return (READ_BIT(GPIOx->ODR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_P
 777:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 778:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 779:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 780:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Set several pins to high level on dedicated gpio port.
 781:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll BSRR         BSy           LL_GPIO_SetOutputPin
 782:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 783:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 784:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 785:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 786:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 787:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 788:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 789:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 790:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 791:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 792:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 793:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 794:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 795:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 796:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 797:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 798:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 799:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 800:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 801:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 802:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
ARM GAS  /tmp/ccLne6l3.s 			page 214


 803:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 804:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 805:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 806:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 807:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 808:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 809:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Set several pins to low level on dedicated gpio port.
 810:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll BRR          BRy           LL_GPIO_ResetOutputPin
 811:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 812:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 813:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 814:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 815:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 816:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 817:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 818:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 819:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 820:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 821:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 822:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 823:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 824:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 825:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 826:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 827:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 828:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 829:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 830:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 831:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 832:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 833:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 834:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 835:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 836:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 837:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 838:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Toggle data value for several pin of dedicated port.
 839:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll ODR          ODy           LL_GPIO_TogglePin
 840:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 841:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 842:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 843:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 844:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 845:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 846:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 847:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 848:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 849:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 850:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 851:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 852:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 853:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 854:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 855:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 856:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 857:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 858:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 859:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
ARM GAS  /tmp/ccLne6l3.s 			page 215


 860:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 861:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 862:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 863:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   uint32_t odr = READ_REG(GPIOx->ODR);
 864:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 865:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 866:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 867:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 868:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 869:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @}
 870:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 871:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 872:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /** @defgroup GPIO_AF_REMAPPING Alternate Function Remapping
 873:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief This section propose definition to remap the alternate function to some other port/pins.
 874:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @{
 875:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 876:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 877:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 878:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Enable the remapping of SPI1 alternate function NSS, SCK, MISO and MOSI.
 879:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR          SPI1_REMAP           LL_GPIO_AF_EnableRemap_SPI1
 880:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note   ENABLE: Remap (NSS/PA15, SCK/PB3, MISO/PB4, MOSI/PB5)
 881:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 882:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 883:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_AF_EnableRemap_SPI1(void)
 884:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 885:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   SET_BIT(AFIO->MAPR, AFIO_MAPR_SPI1_REMAP | AFIO_MAPR_SWJ_CFG);
 886:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 887:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 888:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 889:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief Disable the remapping of SPI1 alternate function NSS, SCK, MISO and MOSI.
 890:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR          SPI1_REMAP           LL_GPIO_AF_DisableRemap_SPI1
 891:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note  DISABLE: No remap (NSS/PA4,  SCK/PA5, MISO/PA6, MOSI/PA7)
 892:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 893:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 894:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_AF_DisableRemap_SPI1(void)
 895:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 896:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_SPI1_REMAP | AFIO_MAPR_SWJ_CFG), AFIO_MAPR_SWJ_CFG);
 897:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 898:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 899:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 900:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Check if SPI1 has been remapped or not
 901:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR         SPI1_REMAP         LL_GPIO_AF_IsEnabledRemap_SPI1
 902:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
 903:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 904:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_AF_IsEnabledRemap_SPI1(void)
 905:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 906:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   return (READ_BIT(AFIO->MAPR, AFIO_MAPR_SPI1_REMAP) == (AFIO_MAPR_SPI1_REMAP));
 907:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 908:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 909:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 910:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief Enable the remapping of I2C1 alternate function SCL and SDA.
 911:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
 912:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
 913:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 914:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 915:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
 916:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
ARM GAS  /tmp/ccLne6l3.s 			page 216


 917:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 918:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 919:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 920:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 921:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief Disable the remapping of I2C1 alternate function SCL and SDA.
 922:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_DisableRemap_I2C1
 923:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note  DISABLE: No remap (SCL/PB6, SDA/PB7)
 924:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 925:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 926:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_AF_DisableRemap_I2C1(void)
 927:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 928:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG), AFIO_MAPR_SWJ_CFG);
 929:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 930:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 931:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 932:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Check if I2C1 has been remapped or not
 933:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR         I2C1_REMAP         LL_GPIO_AF_IsEnabledRemap_I2C1
 934:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
 935:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 936:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_AF_IsEnabledRemap_I2C1(void)
 937:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 938:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   return (READ_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP) == (AFIO_MAPR_I2C1_REMAP));
 939:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 940:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 941:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 942:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief Enable the remapping of USART1 alternate function TX and RX.
 943:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
 944:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
 945:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 946:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 947:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
 948:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 949:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 950:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 951:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 952:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 953:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief Disable the remapping of USART1 alternate function TX and RX.
 954:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_DisableRemap_USART1
 955:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note  DISABLE: No remap (TX/PA9, RX/PA10)
 956:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 957:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 958:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_AF_DisableRemap_USART1(void)
 959:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 960:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG), AFIO_MAPR_SWJ_CFG);
 961:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 962:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 963:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 964:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Check if USART1 has been remapped or not
 965:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR         USART1_REMAP         LL_GPIO_AF_IsEnabledRemap_USART1
 966:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
 967:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 968:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_AF_IsEnabledRemap_USART1(void)
 969:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 970:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   return (READ_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP) == (AFIO_MAPR_USART1_REMAP));
 971:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 972:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 973:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
ARM GAS  /tmp/ccLne6l3.s 			page 217


 974:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief Enable the remapping of USART2 alternate function CTS, RTS, CK, TX and RX.
 975:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR          USART2_REMAP           LL_GPIO_AF_EnableRemap_USART2
 976:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note  ENABLE: Remap     (CTS/PD3, RTS/PD4, TX/PD5, RX/PD6, CK/PD7)
 977:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 978:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 979:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART2(void)
 980:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 981:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   SET_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP | AFIO_MAPR_SWJ_CFG);
 982:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 983:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 984:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 985:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief Disable the remapping of USART2 alternate function CTS, RTS, CK, TX and RX.
 986:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR          USART2_REMAP           LL_GPIO_AF_DisableRemap_USART2
 987:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note  DISABLE: No remap (CTS/PA0, RTS/PA1, TX/PA2, RX/PA3, CK/PA4)
 988:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
 989:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
 990:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_AF_DisableRemap_USART2(void)
 991:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 992:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_USART2_REMAP | AFIO_MAPR_SWJ_CFG), AFIO_MAPR_SWJ_CFG);
 993:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 994:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
 995:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
 996:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief  Check if USART2 has been remapped or not
 997:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR         USART2_REMAP         LL_GPIO_AF_IsEnabledRemap_USART2
 998:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
 999:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
1000:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_AF_IsEnabledRemap_USART2(void)
1001:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
1002:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   return (READ_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP) == (AFIO_MAPR_USART2_REMAP));
1003:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
1004:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
1005:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #if defined (AFIO_MAPR_USART3_REMAP)
1006:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
1007:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief Enable the remapping of USART3 alternate function CTS, RTS, CK, TX and RX.
1008:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR          USART3_REMAP           LL_GPIO_AF_EnableRemap_USART3
1009:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note  ENABLE: Full remap     (TX/PD8,  RX/PD9,  CK/PD10, CTS/PD11, RTS/PD12)
1010:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
1011:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
1012:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART3(void)
1013:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
1014:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_USART3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_USART3_REMAP_FULL
1015:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
1016:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
1017:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
1018:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief Enable the remapping of USART3 alternate function CTS, RTS, CK, TX and RX.
1019:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR          USART3_REMAP           LL_GPIO_AF_RemapPartial_USART3
1020:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note  PARTIAL: Partial remap (TX/PC10, RX/PC11, CK/PC12, CTS/PB13, RTS/PB14)
1021:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
1022:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
1023:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_AF_RemapPartial_USART3(void)
1024:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
1025:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_USART3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_USART3_REMAP_PART
1026:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
1027:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
1028:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
1029:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief Disable the remapping of USART3 alternate function CTS, RTS, CK, TX and RX.
1030:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR          USART3_REMAP           LL_GPIO_AF_DisableRemap_USART3
ARM GAS  /tmp/ccLne6l3.s 			page 218


1031:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note  DISABLE: No remap      (TX/PB10, RX/PB11, CK/PB12, CTS/PB13, RTS/PB14)
1032:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
1033:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
1034:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_AF_DisableRemap_USART3(void)
1035:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
1036:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_USART3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_USART3_REMAP_NORE
1037:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
1038:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** #endif
1039:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
1040:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
1041:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief Enable the remapping of TIM1 alternate function channels 1 to 4, 1N to 3N, external trig
1042:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR          TIM1_REMAP           LL_GPIO_AF_EnableRemap_TIM1
1043:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note  ENABLE: Full remap     (ETR/PE7,  CH1/PE9, CH2/PE11, CH3/PE13, CH4/PE14, BKIN/PE15, CH1N
1044:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
1045:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
1046:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_AF_EnableRemap_TIM1(void)
1047:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
1048:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM1_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM1_REMAP_FULLREMA
1049:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
1050:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** 
1051:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** /**
1052:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @brief Enable the remapping of TIM1 alternate function channels 1 to 4, 1N to 3N, external trig
1053:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @rmtoll MAPR          TIM1_REMAP           LL_GPIO_AF_RemapPartial_TIM1
1054:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @note  PARTIAL: Partial remap (ETR/PA12, CH1/PA8, CH2/PA9,  CH3/PA10, CH4/PA11, BKIN/PA6,  CH1N
1055:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   * @retval None
1056:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   */
1057:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM1(void)
1058:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** {
 2206              		.loc 6 1058 1
 2207              		.cfi_startproc
 2208              		@ args = 0, pretend = 0, frame = 0
 2209              		@ frame_needed = 1, uses_anonymous_args = 0
 2210              		@ link register save eliminated.
 2211 0000 80B4     		push	{r7}
 2212              	.LCFI210:
 2213              		.cfi_def_cfa_offset 4
 2214              		.cfi_offset 7, -4
 2215 0002 00AF     		add	r7, sp, #0
 2216              	.LCFI211:
 2217              		.cfi_def_cfa_register 7
1059:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h ****   MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM1_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM1_REMAP_PARTIALR
 2218              		.loc 6 1059 3
 2219 0004 074B     		ldr	r3, .L95
 2220 0006 5B68     		ldr	r3, [r3, #4]
 2221 0008 23F0E063 		bic	r3, r3, #117440512
 2222 000c 23F0C003 		bic	r3, r3, #192
 2223 0010 044A     		ldr	r2, .L95
 2224 0012 43F0E063 		orr	r3, r3, #117440512
 2225 0016 43F04003 		orr	r3, r3, #64
 2226 001a 5360     		str	r3, [r2, #4]
1060:Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_gpio.h **** }
 2227              		.loc 6 1060 1
 2228 001c 00BF     		nop
 2229 001e BD46     		mov	sp, r7
 2230              	.LCFI212:
 2231              		.cfi_def_cfa_register 13
 2232              		@ sp needed
ARM GAS  /tmp/ccLne6l3.s 			page 219


 2233 0020 80BC     		pop	{r7}
 2234              	.LCFI213:
 2235              		.cfi_restore 7
 2236              		.cfi_def_cfa_offset 0
 2237 0022 7047     		bx	lr
 2238              	.L96:
 2239              		.align	2
 2240              	.L95:
 2241 0024 00000140 		.word	1073807360
 2242              		.cfi_endproc
 2243              	.LFE609:
 2245              		.section	.text.us_delay,"ax",%progbits
 2246              		.align	1
 2247              		.syntax unified
 2248              		.thumb
 2249              		.thumb_func
 2251              	us_delay:
 2252              	.LFB670:
 2253              		.file 7 "Core/Inc/delay_class.h"
   1:Core/Inc/delay_class.h **** /* USER CODE BEGIN Header */
   2:Core/Inc/delay_class.h **** /**
   3:Core/Inc/delay_class.h ****   ******************************************************************************
   4:Core/Inc/delay_class.h ****   * @file           : delay_class.h
   5:Core/Inc/delay_class.h ****   * @brief          : Header for main.c file.
   6:Core/Inc/delay_class.h ****   *                   This file contains the common defines of the application.
   7:Core/Inc/delay_class.h ****   ******************************************************************************
   8:Core/Inc/delay_class.h ****   * @attention
   9:Core/Inc/delay_class.h ****   *
  10:Core/Inc/delay_class.h ****   * Copyright (c) 2024 STMicroelectronics.
  11:Core/Inc/delay_class.h ****   * All rights reserved.
  12:Core/Inc/delay_class.h ****   *
  13:Core/Inc/delay_class.h ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Inc/delay_class.h ****   * in the root directory of this software component.
  15:Core/Inc/delay_class.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Inc/delay_class.h ****   *
  17:Core/Inc/delay_class.h ****   ******************************************************************************
  18:Core/Inc/delay_class.h ****   */
  19:Core/Inc/delay_class.h **** /* USER CODE END Header */
  20:Core/Inc/delay_class.h **** 
  21:Core/Inc/delay_class.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  22:Core/Inc/delay_class.h **** #ifndef __DELAY_CLASS_H
  23:Core/Inc/delay_class.h **** #define __DELAY_CLASS_H
  24:Core/Inc/delay_class.h **** 
  25:Core/Inc/delay_class.h **** #ifdef __cplusplus
  26:Core/Inc/delay_class.h **** extern "C" {
  27:Core/Inc/delay_class.h **** #endif
  28:Core/Inc/delay_class.h **** 
  29:Core/Inc/delay_class.h **** /* Includes ------------------------------------------------------------------*/
  30:Core/Inc/delay_class.h **** 
  31:Core/Inc/delay_class.h **** /* Private includes ----------------------------------------------------------*/
  32:Core/Inc/delay_class.h **** /* USER CODE BEGIN Includes */
  33:Core/Inc/delay_class.h **** #include "stm32f1xx_ll_tim.h"
  34:Core/Inc/delay_class.h **** #include "stm32f1xx_hal.h"
  35:Core/Inc/delay_class.h **** #include "stm32f1xx_ll_bus.h"
  36:Core/Inc/delay_class.h **** #include "stm32f1xx.h"
  37:Core/Inc/delay_class.h **** /* USER CODE END Includes */
  38:Core/Inc/delay_class.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 220


  39:Core/Inc/delay_class.h **** /* Exported types ------------------------------------------------------------*/
  40:Core/Inc/delay_class.h **** /* USER CODE BEGIN ET */
  41:Core/Inc/delay_class.h **** //TIM_HandleTypeDef htim7;
  42:Core/Inc/delay_class.h **** 
  43:Core/Inc/delay_class.h **** 
  44:Core/Inc/delay_class.h **** /* USER CODE END ET */
  45:Core/Inc/delay_class.h **** 
  46:Core/Inc/delay_class.h **** /* Exported constants --------------------------------------------------------*/
  47:Core/Inc/delay_class.h **** /* USER CODE BEGIN EC */
  48:Core/Inc/delay_class.h **** 
  49:Core/Inc/delay_class.h **** /* USER CODE END EC */
  50:Core/Inc/delay_class.h **** 
  51:Core/Inc/delay_class.h **** /* Exported macro ------------------------------------------------------------*/
  52:Core/Inc/delay_class.h **** /* USER CODE BEGIN EM */
  53:Core/Inc/delay_class.h **** 
  54:Core/Inc/delay_class.h **** /* USER CODE END EM */
  55:Core/Inc/delay_class.h **** 
  56:Core/Inc/delay_class.h **** /* Exported functions prototypes ---------------------------------------------*/
  57:Core/Inc/delay_class.h **** 
  58:Core/Inc/delay_class.h **** /* USER CODE BEGIN EFP */
  59:Core/Inc/delay_class.h **** /*
  60:Core/Inc/delay_class.h **** *@param TIMX is filled with address ,such as TIM7
  61:Core/Inc/delay_class.h **** *@param ms 1 < ms < xxxx
  62:Core/Inc/delay_class.h **** *@make sure that input clk is 72MHZ
  63:Core/Inc/delay_class.h **** */
  64:Core/Inc/delay_class.h **** __STATIC_INLINE void ms_delay(TIM_TypeDef *TIMX,int ms)
  65:Core/Inc/delay_class.h **** {
  66:Core/Inc/delay_class.h ****     int cnt;
  67:Core/Inc/delay_class.h **** //    TIMX.Instance = TIM7;
  68:Core/Inc/delay_class.h **** //    TIMX.Init.Prescaler = 0;
  69:Core/Inc/delay_class.h **** //    TIMX.Init.CounterMode = TIM_COUNTERMODE_UP;
  70:Core/Inc/delay_class.h **** //    TIMX.Init.Period = 65535;
  71:Core/Inc/delay_class.h **** //    htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  72:Core/Inc/delay_class.h ****      TIMX->CNT=0;
  73:Core/Inc/delay_class.h ****      LL_TIM_DisableCounter(TIMX);
  74:Core/Inc/delay_class.h ****      LL_TIM_ClearFlag_UPDATE(TIMX);
  75:Core/Inc/delay_class.h ****     //LL_TIM_SetUpdateSource(TIMX,LL_TIM_UPDATESOURCE_COUNTER);
  76:Core/Inc/delay_class.h ****    // LL_TIM_SetClockDivision (TIMX,267);
  77:Core/Inc/delay_class.h ****      LL_TIM_SetPrescaler(TIMX,267);
  78:Core/Inc/delay_class.h ****      LL_TIM_SetAutoReload(TIMX,267); 
  79:Core/Inc/delay_class.h ****      LL_TIM_EnableCounter(TIMX);
  80:Core/Inc/delay_class.h ****     for(cnt = 0;cnt < ms;cnt++)
  81:Core/Inc/delay_class.h ****     {
  82:Core/Inc/delay_class.h **** 
  83:Core/Inc/delay_class.h ****             while(LL_TIM_IsActiveFlag_UPDATE(TIMX)==0);
  84:Core/Inc/delay_class.h ****         
  85:Core/Inc/delay_class.h ****             LL_TIM_ClearFlag_UPDATE(TIMX); // 清除更新事件标志
  86:Core/Inc/delay_class.h **** 
  87:Core/Inc/delay_class.h ****             // 在这里执行计数事件触发后的操作
  88:Core/Inc/delay_class.h ****         
  89:Core/Inc/delay_class.h ****     }
  90:Core/Inc/delay_class.h ****     //LL_TIM_ClearFlag_UPDATE(TIMX);
  91:Core/Inc/delay_class.h ****     LL_TIM_DisableCounter(TIMX);
  92:Core/Inc/delay_class.h ****    // return __STATIC_INLINE void();
  93:Core/Inc/delay_class.h **** }
  94:Core/Inc/delay_class.h **** 
  95:Core/Inc/delay_class.h **** __STATIC_INLINE void us_delay(TIM_TypeDef *TIMX,int us)
ARM GAS  /tmp/ccLne6l3.s 			page 221


  96:Core/Inc/delay_class.h **** {
 2254              		.loc 7 96 1
 2255              		.cfi_startproc
 2256              		@ args = 0, pretend = 0, frame = 8
 2257              		@ frame_needed = 1, uses_anonymous_args = 0
 2258 0000 80B5     		push	{r7, lr}
 2259              	.LCFI214:
 2260              		.cfi_def_cfa_offset 8
 2261              		.cfi_offset 7, -8
 2262              		.cfi_offset 14, -4
 2263 0002 82B0     		sub	sp, sp, #8
 2264              	.LCFI215:
 2265              		.cfi_def_cfa_offset 16
 2266 0004 00AF     		add	r7, sp, #0
 2267              	.LCFI216:
 2268              		.cfi_def_cfa_register 7
 2269 0006 7860     		str	r0, [r7, #4]
 2270 0008 3960     		str	r1, [r7]
  97:Core/Inc/delay_class.h ****     int cnt;
  98:Core/Inc/delay_class.h ****     // for(cnt = 0;cnt < us;cnt++)
  99:Core/Inc/delay_class.h ****     // {
 100:Core/Inc/delay_class.h ****      TIMX->CNT=0;
 2271              		.loc 7 100 15
 2272 000a 7B68     		ldr	r3, [r7, #4]
 2273 000c 0022     		movs	r2, #0
 2274 000e 5A62     		str	r2, [r3, #36]
 101:Core/Inc/delay_class.h ****      LL_TIM_DisableCounter(TIMX);
 2275              		.loc 7 101 6
 2276 0010 7868     		ldr	r0, [r7, #4]
 2277 0012 FFF7FEFF 		bl	LL_TIM_DisableCounter
 102:Core/Inc/delay_class.h ****      LL_TIM_ClearFlag_UPDATE(TIMX);
 2278              		.loc 7 102 6
 2279 0016 7868     		ldr	r0, [r7, #4]
 2280 0018 FFF7FEFF 		bl	LL_TIM_ClearFlag_UPDATE
 103:Core/Inc/delay_class.h **** 
 104:Core/Inc/delay_class.h ****      LL_TIM_SetPrescaler(TIMX,6*us);
 2281              		.loc 7 104 32
 2282 001c 3A68     		ldr	r2, [r7]
 2283 001e 1346     		mov	r3, r2
 2284 0020 5B00     		lsls	r3, r3, #1
 2285 0022 1344     		add	r3, r3, r2
 2286 0024 5B00     		lsls	r3, r3, #1
 2287              		.loc 7 104 6
 2288 0026 1946     		mov	r1, r3
 2289 0028 7868     		ldr	r0, [r7, #4]
 2290 002a FFF7FEFF 		bl	LL_TIM_SetPrescaler
 105:Core/Inc/delay_class.h ****      LL_TIM_SetAutoReload(TIMX,120); 
 2291              		.loc 7 105 6
 2292 002e 7821     		movs	r1, #120
 2293 0030 7868     		ldr	r0, [r7, #4]
 2294 0032 FFF7FEFF 		bl	LL_TIM_SetAutoReload
 106:Core/Inc/delay_class.h ****      LL_TIM_EnableCounter(TIMX);
 2295              		.loc 7 106 6
 2296 0036 7868     		ldr	r0, [r7, #4]
 2297 0038 FFF7FEFF 		bl	LL_TIM_EnableCounter
 107:Core/Inc/delay_class.h **** 
 108:Core/Inc/delay_class.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 222


 109:Core/Inc/delay_class.h ****             while(LL_TIM_IsActiveFlag_UPDATE(TIMX)==0);
 2298              		.loc 7 109 18
 2299 003c 00BF     		nop
 2300              	.L98:
 2301              		.loc 7 109 19 discriminator 1
 2302 003e 7868     		ldr	r0, [r7, #4]
 2303 0040 FFF7FEFF 		bl	LL_TIM_IsActiveFlag_UPDATE
 2304 0044 0346     		mov	r3, r0
 2305              		.loc 7 109 18 discriminator 1
 2306 0046 002B     		cmp	r3, #0
 2307 0048 F9D0     		beq	.L98
 110:Core/Inc/delay_class.h ****         
 111:Core/Inc/delay_class.h ****             LL_TIM_ClearFlag_UPDATE(TIMX); // 清除更新事件标志
 2308              		.loc 7 111 13
 2309 004a 7868     		ldr	r0, [r7, #4]
 2310 004c FFF7FEFF 		bl	LL_TIM_ClearFlag_UPDATE
 112:Core/Inc/delay_class.h **** 
 113:Core/Inc/delay_class.h ****             // 在这里执行计数事件触发后的操作
 114:Core/Inc/delay_class.h ****         
 115:Core/Inc/delay_class.h ****   //  }
 116:Core/Inc/delay_class.h ****     //LL_TIM_ClearFlag_UPDATE(TIMX);
 117:Core/Inc/delay_class.h ****     LL_TIM_DisableCounter(TIMX);
 2311              		.loc 7 117 5
 2312 0050 7868     		ldr	r0, [r7, #4]
 2313 0052 FFF7FEFF 		bl	LL_TIM_DisableCounter
 118:Core/Inc/delay_class.h ****    // return __STATIC_INLINE void();
 119:Core/Inc/delay_class.h **** }
 2314              		.loc 7 119 1
 2315 0056 00BF     		nop
 2316 0058 0837     		adds	r7, r7, #8
 2317              	.LCFI217:
 2318              		.cfi_def_cfa_offset 8
 2319 005a BD46     		mov	sp, r7
 2320              	.LCFI218:
 2321              		.cfi_def_cfa_register 13
 2322              		@ sp needed
 2323 005c 80BD     		pop	{r7, pc}
 2324              		.cfi_endproc
 2325              	.LFE670:
 2327              		.section	.text.ID_Judgement,"ax",%progbits
 2328              		.align	1
 2329              		.syntax unified
 2330              		.thumb
 2331              		.thumb_func
 2333              	ID_Judgement:
 2334              	.LFB675:
 2335              		.file 8 "Core/Inc/USART_OPERATION.h"
   1:Core/Inc/USART_OPERATION.h **** /* USER CODE BEGIN Header */
   2:Core/Inc/USART_OPERATION.h **** /**
   3:Core/Inc/USART_OPERATION.h ****   ******************************************************************************
   4:Core/Inc/USART_OPERATION.h ****   * @file           : USART_OPERATION.h
   5:Core/Inc/USART_OPERATION.h ****   * @brief          : Header for USART_OPERATION.c file.
   6:Core/Inc/USART_OPERATION.h ****   *                   This file contains the common defines of the application.
   7:Core/Inc/USART_OPERATION.h ****   ******************************************************************************
   8:Core/Inc/USART_OPERATION.h ****   * @attention
   9:Core/Inc/USART_OPERATION.h ****   *
  10:Core/Inc/USART_OPERATION.h ****   * Copyright (c) 2024 STMicroelectronics.
ARM GAS  /tmp/ccLne6l3.s 			page 223


  11:Core/Inc/USART_OPERATION.h ****   * All rights reserved.
  12:Core/Inc/USART_OPERATION.h ****   *
  13:Core/Inc/USART_OPERATION.h ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Inc/USART_OPERATION.h ****   * in the root directory of this software component.
  15:Core/Inc/USART_OPERATION.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Inc/USART_OPERATION.h ****   *
  17:Core/Inc/USART_OPERATION.h ****   ******************************************************************************
  18:Core/Inc/USART_OPERATION.h ****   */
  19:Core/Inc/USART_OPERATION.h **** /* USER CODE END Header */
  20:Core/Inc/USART_OPERATION.h **** 
  21:Core/Inc/USART_OPERATION.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  22:Core/Inc/USART_OPERATION.h **** #ifndef __USART_OPERATION_H
  23:Core/Inc/USART_OPERATION.h **** #define __USART_OPERATION_H
  24:Core/Inc/USART_OPERATION.h **** 
  25:Core/Inc/USART_OPERATION.h **** #ifdef __cplusplus
  26:Core/Inc/USART_OPERATION.h **** extern "C" {
  27:Core/Inc/USART_OPERATION.h **** #endif
  28:Core/Inc/USART_OPERATION.h **** 
  29:Core/Inc/USART_OPERATION.h **** /* Private includes ----------------------------------------------------------*/
  30:Core/Inc/USART_OPERATION.h **** /* USER CODE BEGIN Includes */
  31:Core/Inc/USART_OPERATION.h **** //#include "stdio.h"
  32:Core/Inc/USART_OPERATION.h **** #include "stm32f1xx_hal.h"
  33:Core/Inc/USART_OPERATION.h **** #include "delay_class.h"
  34:Core/Inc/USART_OPERATION.h **** #include "stm32f1xx.h"
  35:Core/Inc/USART_OPERATION.h **** //#include "PID_Algorithm.h"
  36:Core/Inc/USART_OPERATION.h **** #include "string.h"
  37:Core/Inc/USART_OPERATION.h **** /* USER CODE END Includes */
  38:Core/Inc/USART_OPERATION.h **** /* Exported types ------------------------------------------------------------*/
  39:Core/Inc/USART_OPERATION.h **** /* USER CODE BEGIN ET */
  40:Core/Inc/USART_OPERATION.h **** #define data_length 7
  41:Core/Inc/USART_OPERATION.h **** #define ID 0x01
  42:Core/Inc/USART_OPERATION.h **** 
  43:Core/Inc/USART_OPERATION.h **** typedef enum {true =0,false =1,ack =2}Truth_Value;
  44:Core/Inc/USART_OPERATION.h **** 
  45:Core/Inc/USART_OPERATION.h **** typedef struct config_value
  46:Core/Inc/USART_OPERATION.h **** {
  47:Core/Inc/USART_OPERATION.h ****   /* data */
  48:Core/Inc/USART_OPERATION.h ****   float target;
  49:Core/Inc/USART_OPERATION.h ****   uint32_t interval; 
  50:Core/Inc/USART_OPERATION.h ****   uint32_t ADC_ZERO_INIT;
  51:Core/Inc/USART_OPERATION.h **** 
  52:Core/Inc/USART_OPERATION.h **** }Config_Value;
  53:Core/Inc/USART_OPERATION.h **** 
  54:Core/Inc/USART_OPERATION.h **** 
  55:Core/Inc/USART_OPERATION.h **** 
  56:Core/Inc/USART_OPERATION.h **** 
  57:Core/Inc/USART_OPERATION.h **** void Data_Inspect_By_StateMachine(TIM_HandleTypeDef *htim,uint8_t *buffer,uint8_t *Output_Data,uint
  58:Core/Inc/USART_OPERATION.h **** 
  59:Core/Inc/USART_OPERATION.h **** 
  60:Core/Inc/USART_OPERATION.h **** __STATIC_INLINE Truth_Value ID_Judgement(uint8_t *data_temp)
  61:Core/Inc/USART_OPERATION.h **** {
 2336              		.loc 8 61 1
 2337              		.cfi_startproc
 2338              		@ args = 0, pretend = 0, frame = 8
 2339              		@ frame_needed = 1, uses_anonymous_args = 0
 2340              		@ link register save eliminated.
 2341 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccLne6l3.s 			page 224


 2342              	.LCFI219:
 2343              		.cfi_def_cfa_offset 4
 2344              		.cfi_offset 7, -4
 2345 0002 83B0     		sub	sp, sp, #12
 2346              	.LCFI220:
 2347              		.cfi_def_cfa_offset 16
 2348 0004 00AF     		add	r7, sp, #0
 2349              	.LCFI221:
 2350              		.cfi_def_cfa_register 7
 2351 0006 7860     		str	r0, [r7, #4]
  62:Core/Inc/USART_OPERATION.h ****   //enum truth_value judgement_result;
  63:Core/Inc/USART_OPERATION.h ****   if(*data_temp == ID)
 2352              		.loc 8 63 6
 2353 0008 7B68     		ldr	r3, [r7, #4]
 2354 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2355              		.loc 8 63 5
 2356 000c 012B     		cmp	r3, #1
 2357 000e 01D1     		bne	.L100
  64:Core/Inc/USART_OPERATION.h ****   {
  65:Core/Inc/USART_OPERATION.h ****     return true;
 2358              		.loc 8 65 12
 2359 0010 0023     		movs	r3, #0
 2360 0012 06E0     		b	.L101
 2361              	.L100:
  66:Core/Inc/USART_OPERATION.h ****   }
  67:Core/Inc/USART_OPERATION.h ****   else if (*data_temp == 0XFF)
 2362              		.loc 8 67 12
 2363 0014 7B68     		ldr	r3, [r7, #4]
 2364 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2365              		.loc 8 67 11
 2366 0018 FF2B     		cmp	r3, #255
 2367 001a 01D1     		bne	.L102
  68:Core/Inc/USART_OPERATION.h ****   {
  69:Core/Inc/USART_OPERATION.h ****     return ack;
 2368              		.loc 8 69 12
 2369 001c 0223     		movs	r3, #2
 2370 001e 00E0     		b	.L101
 2371              	.L102:
  70:Core/Inc/USART_OPERATION.h ****   }
  71:Core/Inc/USART_OPERATION.h ****   else
  72:Core/Inc/USART_OPERATION.h ****   return false;
 2372              		.loc 8 72 10
 2373 0020 0123     		movs	r3, #1
 2374              	.L101:
  73:Core/Inc/USART_OPERATION.h **** }
 2375              		.loc 8 73 1
 2376 0022 1846     		mov	r0, r3
 2377 0024 0C37     		adds	r7, r7, #12
 2378              	.LCFI222:
 2379              		.cfi_def_cfa_offset 4
 2380 0026 BD46     		mov	sp, r7
 2381              	.LCFI223:
 2382              		.cfi_def_cfa_register 13
 2383              		@ sp needed
 2384 0028 80BC     		pop	{r7}
 2385              	.LCFI224:
 2386              		.cfi_restore 7
ARM GAS  /tmp/ccLne6l3.s 			page 225


 2387              		.cfi_def_cfa_offset 0
 2388 002a 7047     		bx	lr
 2389              		.cfi_endproc
 2390              	.LFE675:
 2392              		.section	.text.clean_temp,"ax",%progbits
 2393              		.align	1
 2394              		.syntax unified
 2395              		.thumb
 2396              		.thumb_func
 2398              	clean_temp:
 2399              	.LFB676:
  74:Core/Inc/USART_OPERATION.h **** 
  75:Core/Inc/USART_OPERATION.h **** 
  76:Core/Inc/USART_OPERATION.h **** 
  77:Core/Inc/USART_OPERATION.h **** void Set_Current(uint8_t *data_temp,Config_Value *target);
  78:Core/Inc/USART_OPERATION.h **** 
  79:Core/Inc/USART_OPERATION.h **** void Set_Interval(uint8_t *data_temp,Config_Value *target);
  80:Core/Inc/USART_OPERATION.h **** 
  81:Core/Inc/USART_OPERATION.h **** void ACK_Reaction(UART_HandleTypeDef *uart,uint8_t *data_temp);
  82:Core/Inc/USART_OPERATION.h **** 
  83:Core/Inc/USART_OPERATION.h **** void Function_Judge_Action(UART_HandleTypeDef *uart,uint8_t *data_temp,Config_Value *target);
  84:Core/Inc/USART_OPERATION.h **** 
  85:Core/Inc/USART_OPERATION.h **** __STATIC_INLINE void clean_temp(uint8_t *data_temp,uint8_t num)
  86:Core/Inc/USART_OPERATION.h **** {
 2400              		.loc 8 86 1
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 8
 2403              		@ frame_needed = 1, uses_anonymous_args = 0
 2404 0000 80B5     		push	{r7, lr}
 2405              	.LCFI225:
 2406              		.cfi_def_cfa_offset 8
 2407              		.cfi_offset 7, -8
 2408              		.cfi_offset 14, -4
 2409 0002 82B0     		sub	sp, sp, #8
 2410              	.LCFI226:
 2411              		.cfi_def_cfa_offset 16
 2412 0004 00AF     		add	r7, sp, #0
 2413              	.LCFI227:
 2414              		.cfi_def_cfa_register 7
 2415 0006 7860     		str	r0, [r7, #4]
 2416 0008 0B46     		mov	r3, r1
 2417 000a FB70     		strb	r3, [r7, #3]
  87:Core/Inc/USART_OPERATION.h ****   memset(data_temp,0,num);
 2418              		.loc 8 87 3
 2419 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2420 000e 1A46     		mov	r2, r3
 2421 0010 0021     		movs	r1, #0
 2422 0012 7868     		ldr	r0, [r7, #4]
 2423 0014 FFF7FEFF 		bl	memset
  88:Core/Inc/USART_OPERATION.h **** }
 2424              		.loc 8 88 1
 2425 0018 00BF     		nop
 2426 001a 0837     		adds	r7, r7, #8
 2427              	.LCFI228:
 2428              		.cfi_def_cfa_offset 8
 2429 001c BD46     		mov	sp, r7
 2430              	.LCFI229:
ARM GAS  /tmp/ccLne6l3.s 			page 226


 2431              		.cfi_def_cfa_register 13
 2432              		@ sp needed
 2433 001e 80BD     		pop	{r7, pc}
 2434              		.cfi_endproc
 2435              	.LFE676:
 2437              		.section	.text.instruction_handle,"ax",%progbits
 2438              		.align	1
 2439              		.syntax unified
 2440              		.thumb
 2441              		.thumb_func
 2443              	instruction_handle:
 2444              	.LFB677:
  89:Core/Inc/USART_OPERATION.h **** 
  90:Core/Inc/USART_OPERATION.h **** void receiption_success(UART_HandleTypeDef *uart,uint8_t id);
  91:Core/Inc/USART_OPERATION.h **** 
  92:Core/Inc/USART_OPERATION.h **** __STATIC_INLINE void instruction_handle(UART_HandleTypeDef *uart,uint8_t *data_temp,Config_Value *t
  93:Core/Inc/USART_OPERATION.h **** {
 2445              		.loc 8 93 1
 2446              		.cfi_startproc
 2447              		@ args = 0, pretend = 0, frame = 16
 2448              		@ frame_needed = 1, uses_anonymous_args = 0
 2449 0000 80B5     		push	{r7, lr}
 2450              	.LCFI230:
 2451              		.cfi_def_cfa_offset 8
 2452              		.cfi_offset 7, -8
 2453              		.cfi_offset 14, -4
 2454 0002 84B0     		sub	sp, sp, #16
 2455              	.LCFI231:
 2456              		.cfi_def_cfa_offset 24
 2457 0004 00AF     		add	r7, sp, #0
 2458              	.LCFI232:
 2459              		.cfi_def_cfa_register 7
 2460 0006 F860     		str	r0, [r7, #12]
 2461 0008 B960     		str	r1, [r7, #8]
 2462 000a 7A60     		str	r2, [r7, #4]
  94:Core/Inc/USART_OPERATION.h ****   //enum truth_value judgement_result;
  95:Core/Inc/USART_OPERATION.h ****   if(ID_Judgement(data_temp) == true)
 2463              		.loc 8 95 6
 2464 000c B868     		ldr	r0, [r7, #8]
 2465 000e FFF7FEFF 		bl	ID_Judgement
 2466 0012 0346     		mov	r3, r0
 2467              		.loc 8 95 5
 2468 0014 002B     		cmp	r3, #0
 2469 0016 05D1     		bne	.L105
  96:Core/Inc/USART_OPERATION.h ****   {
  97:Core/Inc/USART_OPERATION.h ****                // HAL_UART_Transmit(uart,"ok",strlen("ok"),1000);//receiption_success(uart,data_tem
  98:Core/Inc/USART_OPERATION.h ****     Function_Judge_Action(uart,data_temp,target);
 2470              		.loc 8 98 5
 2471 0018 7A68     		ldr	r2, [r7, #4]
 2472 001a B968     		ldr	r1, [r7, #8]
 2473 001c F868     		ldr	r0, [r7, #12]
 2474 001e FFF7FEFF 		bl	Function_Judge_Action
 2475 0022 09E0     		b	.L106
 2476              	.L105:
  99:Core/Inc/USART_OPERATION.h **** 
 100:Core/Inc/USART_OPERATION.h ****   }
 101:Core/Inc/USART_OPERATION.h ****   else if(ID_Judgement(data_temp) == ack)
ARM GAS  /tmp/ccLne6l3.s 			page 227


 2477              		.loc 8 101 11
 2478 0024 B868     		ldr	r0, [r7, #8]
 2479 0026 FFF7FEFF 		bl	ID_Judgement
 2480 002a 0346     		mov	r3, r0
 2481              		.loc 8 101 10
 2482 002c 022B     		cmp	r3, #2
 2483 002e 03D1     		bne	.L106
 102:Core/Inc/USART_OPERATION.h ****   {
 103:Core/Inc/USART_OPERATION.h ****     ACK_Reaction(uart,data_temp);
 2484              		.loc 8 103 5
 2485 0030 B968     		ldr	r1, [r7, #8]
 2486 0032 F868     		ldr	r0, [r7, #12]
 2487 0034 FFF7FEFF 		bl	ACK_Reaction
 2488              	.L106:
 104:Core/Inc/USART_OPERATION.h **** 
 105:Core/Inc/USART_OPERATION.h ****   }
 106:Core/Inc/USART_OPERATION.h ****   else
 107:Core/Inc/USART_OPERATION.h ****   {
 108:Core/Inc/USART_OPERATION.h ****     //judgement_result = false;
 109:Core/Inc/USART_OPERATION.h ****   }
 110:Core/Inc/USART_OPERATION.h ****   clean_temp(data_temp,sizeof(data_temp));
 2489              		.loc 8 110 3
 2490 0038 0421     		movs	r1, #4
 2491 003a B868     		ldr	r0, [r7, #8]
 2492 003c FFF7FEFF 		bl	clean_temp
 111:Core/Inc/USART_OPERATION.h **** }
 2493              		.loc 8 111 1
 2494 0040 00BF     		nop
 2495 0042 1037     		adds	r7, r7, #16
 2496              	.LCFI233:
 2497              		.cfi_def_cfa_offset 8
 2498 0044 BD46     		mov	sp, r7
 2499              	.LCFI234:
 2500              		.cfi_def_cfa_register 13
 2501              		@ sp needed
 2502 0046 80BD     		pop	{r7, pc}
 2503              		.cfi_endproc
 2504              	.LFE677:
 2506              		.section	.text.Advance_TIMX_PWM_INIGTION,"ax",%progbits
 2507              		.align	1
 2508              		.syntax unified
 2509              		.thumb
 2510              		.thumb_func
 2512              	Advance_TIMX_PWM_INIGTION:
 2513              	.LFB678:
 2514              		.file 9 "Core/Inc/PWM_Ctrl.h"
   1:Core/Inc/PWM_Ctrl.h **** /* USER CODE BEGIN Header */
   2:Core/Inc/PWM_Ctrl.h **** /**
   3:Core/Inc/PWM_Ctrl.h ****   ******************************************************************************
   4:Core/Inc/PWM_Ctrl.h ****   * @file           : PWM_Ctrl.h
   5:Core/Inc/PWM_Ctrl.h ****   * @brief          : Header for main.c file.
   6:Core/Inc/PWM_Ctrl.h ****   *                   This file contains the common defines of the application.
   7:Core/Inc/PWM_Ctrl.h ****   ******************************************************************************
   8:Core/Inc/PWM_Ctrl.h ****   * @attention
   9:Core/Inc/PWM_Ctrl.h ****   *
  10:Core/Inc/PWM_Ctrl.h ****   * Copyright (c) 2024 STMicroelectronics.
  11:Core/Inc/PWM_Ctrl.h ****   * All rights reserved.
ARM GAS  /tmp/ccLne6l3.s 			page 228


  12:Core/Inc/PWM_Ctrl.h ****   *
  13:Core/Inc/PWM_Ctrl.h ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Inc/PWM_Ctrl.h ****   * in the root directory of this software component.
  15:Core/Inc/PWM_Ctrl.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Inc/PWM_Ctrl.h ****   *
  17:Core/Inc/PWM_Ctrl.h ****   ******************************************************************************
  18:Core/Inc/PWM_Ctrl.h ****   */
  19:Core/Inc/PWM_Ctrl.h **** /* USER CODE END Header */
  20:Core/Inc/PWM_Ctrl.h **** 
  21:Core/Inc/PWM_Ctrl.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  22:Core/Inc/PWM_Ctrl.h **** #ifndef __PWM_CTRL_H
  23:Core/Inc/PWM_Ctrl.h **** #define __PWM_CTRL_H
  24:Core/Inc/PWM_Ctrl.h **** 
  25:Core/Inc/PWM_Ctrl.h **** #ifdef __cplusplus
  26:Core/Inc/PWM_Ctrl.h **** extern "C" {
  27:Core/Inc/PWM_Ctrl.h **** #endif
  28:Core/Inc/PWM_Ctrl.h **** 
  29:Core/Inc/PWM_Ctrl.h **** /* Includes ------------------------------------------------------------------*/
  30:Core/Inc/PWM_Ctrl.h **** 
  31:Core/Inc/PWM_Ctrl.h **** 
  32:Core/Inc/PWM_Ctrl.h **** /* Private includes ----------------------------------------------------------*/
  33:Core/Inc/PWM_Ctrl.h **** /* USER CODE BEGIN Includes */
  34:Core/Inc/PWM_Ctrl.h **** #include "delay_class.h"
  35:Core/Inc/PWM_Ctrl.h **** #include "stdio.h"
  36:Core/Inc/PWM_Ctrl.h **** #include "USART_OPERATION.h"
  37:Core/Inc/PWM_Ctrl.h **** 
  38:Core/Inc/PWM_Ctrl.h **** #include "stm32f1xx_ll_tim.h"
  39:Core/Inc/PWM_Ctrl.h **** #include "stm32f1xx.h"
  40:Core/Inc/PWM_Ctrl.h **** #include "stm32f1xx_hal.h"
  41:Core/Inc/PWM_Ctrl.h **** /* USER CODE END Includes */
  42:Core/Inc/PWM_Ctrl.h **** 
  43:Core/Inc/PWM_Ctrl.h **** /* Exported types ------------------------------------------------------------*/
  44:Core/Inc/PWM_Ctrl.h **** /* USER CODE BEGIN ET */
  45:Core/Inc/PWM_Ctrl.h **** 
  46:Core/Inc/PWM_Ctrl.h **** /* USER CODE END ET */
  47:Core/Inc/PWM_Ctrl.h **** 
  48:Core/Inc/PWM_Ctrl.h **** /* Exported constants --------------------------------------------------------*/
  49:Core/Inc/PWM_Ctrl.h **** /* USER CODE BEGIN EC */
  50:Core/Inc/PWM_Ctrl.h **** 
  51:Core/Inc/PWM_Ctrl.h **** /* USER CODE END EC */
  52:Core/Inc/PWM_Ctrl.h **** 
  53:Core/Inc/PWM_Ctrl.h **** /* Exported macro ------------------------------------------------------------*/
  54:Core/Inc/PWM_Ctrl.h **** /* USER CODE BEGIN EM */
  55:Core/Inc/PWM_Ctrl.h **** 
  56:Core/Inc/PWM_Ctrl.h **** /* USER CODE END EM */
  57:Core/Inc/PWM_Ctrl.h **** 
  58:Core/Inc/PWM_Ctrl.h **** /* Exported functions prototypes ---------------------------------------------*/
  59:Core/Inc/PWM_Ctrl.h **** 
  60:Core/Inc/PWM_Ctrl.h **** 
  61:Core/Inc/PWM_Ctrl.h **** /* USER CODE BEGIN EFP */
  62:Core/Inc/PWM_Ctrl.h **** /*
  63:Core/Inc/PWM_Ctrl.h **** *   start Advance_TIMX_PWM
  64:Core/Inc/PWM_Ctrl.h **** *
  65:Core/Inc/PWM_Ctrl.h **** */
  66:Core/Inc/PWM_Ctrl.h **** __STATIC_INLINE void Advance_TIMX_PWM_INIGTION(TIM_TypeDef *TIMX)
  67:Core/Inc/PWM_Ctrl.h **** {
 2515              		.loc 9 67 1
ARM GAS  /tmp/ccLne6l3.s 			page 229


 2516              		.cfi_startproc
 2517              		@ args = 0, pretend = 0, frame = 8
 2518              		@ frame_needed = 1, uses_anonymous_args = 0
 2519 0000 80B5     		push	{r7, lr}
 2520              	.LCFI235:
 2521              		.cfi_def_cfa_offset 8
 2522              		.cfi_offset 7, -8
 2523              		.cfi_offset 14, -4
 2524 0002 82B0     		sub	sp, sp, #8
 2525              	.LCFI236:
 2526              		.cfi_def_cfa_offset 16
 2527 0004 00AF     		add	r7, sp, #0
 2528              	.LCFI237:
 2529              		.cfi_def_cfa_register 7
 2530 0006 7860     		str	r0, [r7, #4]
  68:Core/Inc/PWM_Ctrl.h ****       /* Enable counter */
  69:Core/Inc/PWM_Ctrl.h ****   /* Enable TIM1 main output */
  70:Core/Inc/PWM_Ctrl.h ****   LL_TIM_CC_EnableChannel(TIMX, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH1N);
 2531              		.loc 9 70 3
 2532 0008 0521     		movs	r1, #5
 2533 000a 7868     		ldr	r0, [r7, #4]
 2534 000c FFF7FEFF 		bl	LL_TIM_CC_EnableChannel
  71:Core/Inc/PWM_Ctrl.h ****   LL_TIM_EnableCounter(TIMX);
 2535              		.loc 9 71 3
 2536 0010 7868     		ldr	r0, [r7, #4]
 2537 0012 FFF7FEFF 		bl	LL_TIM_EnableCounter
  72:Core/Inc/PWM_Ctrl.h ****   LL_TIM_EnableAllOutputs(TIMX);
 2538              		.loc 9 72 3
 2539 0016 7868     		ldr	r0, [r7, #4]
 2540 0018 FFF7FEFF 		bl	LL_TIM_EnableAllOutputs
  73:Core/Inc/PWM_Ctrl.h ****   LL_TIM_EnableAutomaticOutput(TIMX);
 2541              		.loc 9 73 3
 2542 001c 7868     		ldr	r0, [r7, #4]
 2543 001e FFF7FEFF 		bl	LL_TIM_EnableAutomaticOutput
  74:Core/Inc/PWM_Ctrl.h **** 
  75:Core/Inc/PWM_Ctrl.h **** }
 2544              		.loc 9 75 1
 2545 0022 00BF     		nop
 2546 0024 0837     		adds	r7, r7, #8
 2547              	.LCFI238:
 2548              		.cfi_def_cfa_offset 8
 2549 0026 BD46     		mov	sp, r7
 2550              	.LCFI239:
 2551              		.cfi_def_cfa_register 13
 2552              		@ sp needed
 2553 0028 80BD     		pop	{r7, pc}
 2554              		.cfi_endproc
 2555              	.LFE678:
 2557              		.section	.text.Set_And_Convert_Duty_ALL,"ax",%progbits
 2558              		.align	1
 2559              		.syntax unified
 2560              		.thumb
 2561              		.thumb_func
 2563              	Set_And_Convert_Duty_ALL:
 2564              	.LFB679:
  76:Core/Inc/PWM_Ctrl.h **** 
  77:Core/Inc/PWM_Ctrl.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 230


  78:Core/Inc/PWM_Ctrl.h **** 
  79:Core/Inc/PWM_Ctrl.h **** //void Set_And_Convert_Duty_Int(TIM_TypeDef *TIMX,int duty);
  80:Core/Inc/PWM_Ctrl.h **** 
  81:Core/Inc/PWM_Ctrl.h **** 
  82:Core/Inc/PWM_Ctrl.h **** void Set_And_Convert_Duty(TIM_TypeDef *TIMX,int duty);
  83:Core/Inc/PWM_Ctrl.h **** 
  84:Core/Inc/PWM_Ctrl.h **** 
  85:Core/Inc/PWM_Ctrl.h **** void Set_And_Convert_Duty_Float(TIM_TypeDef *TIMX,float duty);
  86:Core/Inc/PWM_Ctrl.h **** 
  87:Core/Inc/PWM_Ctrl.h **** __STATIC_INLINE void Set_And_Convert_Duty_ALL(float duty)
  88:Core/Inc/PWM_Ctrl.h **** {
 2565              		.loc 9 88 1
 2566              		.cfi_startproc
 2567              		@ args = 0, pretend = 0, frame = 8
 2568              		@ frame_needed = 1, uses_anonymous_args = 0
 2569 0000 80B5     		push	{r7, lr}
 2570              	.LCFI240:
 2571              		.cfi_def_cfa_offset 8
 2572              		.cfi_offset 7, -8
 2573              		.cfi_offset 14, -4
 2574 0002 82B0     		sub	sp, sp, #8
 2575              	.LCFI241:
 2576              		.cfi_def_cfa_offset 16
 2577 0004 00AF     		add	r7, sp, #0
 2578              	.LCFI242:
 2579              		.cfi_def_cfa_register 7
 2580 0006 7860     		str	r0, [r7, #4]	@ float
  89:Core/Inc/PWM_Ctrl.h ****   Set_And_Convert_Duty_Float(TIM1,duty);
 2581              		.loc 9 89 3
 2582 0008 7968     		ldr	r1, [r7, #4]	@ float
 2583 000a 0348     		ldr	r0, .L109
 2584 000c FFF7FEFF 		bl	Set_And_Convert_Duty_Float
  90:Core/Inc/PWM_Ctrl.h **** }
 2585              		.loc 9 90 1
 2586 0010 00BF     		nop
 2587 0012 0837     		adds	r7, r7, #8
 2588              	.LCFI243:
 2589              		.cfi_def_cfa_offset 8
 2590 0014 BD46     		mov	sp, r7
 2591              	.LCFI244:
 2592              		.cfi_def_cfa_register 13
 2593              		@ sp needed
 2594 0016 80BD     		pop	{r7, pc}
 2595              	.L110:
 2596              		.align	2
 2597              	.L109:
 2598 0018 002C0140 		.word	1073818624
 2599              		.cfi_endproc
 2600              	.LFE679:
 2602              		.section	.text.ADC_By_Consultant,"ax",%progbits
 2603              		.align	1
 2604              		.syntax unified
 2605              		.thumb
 2606              		.thumb_func
 2608              	ADC_By_Consultant:
 2609              	.LFB680:
 2610              		.file 10 "Core/Inc/ADC_config.h"
ARM GAS  /tmp/ccLne6l3.s 			page 231


   1:Core/Inc/ADC_config.h **** /* USER CODE BEGIN Header */
   2:Core/Inc/ADC_config.h **** /**
   3:Core/Inc/ADC_config.h ****   ******************************************************************************
   4:Core/Inc/ADC_config.h ****   * @file           : ADC_config.h
   5:Core/Inc/ADC_config.h ****   * @brief          : Header for main.c file.
   6:Core/Inc/ADC_config.h ****   *                   This file contains the common defines of the application.
   7:Core/Inc/ADC_config.h ****   ******************************************************************************
   8:Core/Inc/ADC_config.h ****   * @attention
   9:Core/Inc/ADC_config.h ****   *
  10:Core/Inc/ADC_config.h ****   * Copyright (c) 2024 STMicroelectronics.
  11:Core/Inc/ADC_config.h ****   * All rights reserved.
  12:Core/Inc/ADC_config.h ****   *
  13:Core/Inc/ADC_config.h ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Inc/ADC_config.h ****   * in the root directory of this software component.
  15:Core/Inc/ADC_config.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Inc/ADC_config.h ****   *
  17:Core/Inc/ADC_config.h ****   ******************************************************************************
  18:Core/Inc/ADC_config.h ****   */
  19:Core/Inc/ADC_config.h **** /* USER CODE END Header */
  20:Core/Inc/ADC_config.h **** 
  21:Core/Inc/ADC_config.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  22:Core/Inc/ADC_config.h **** #ifndef _ADC_CONFIG_H
  23:Core/Inc/ADC_config.h **** #define _ADC_CONFIG_H
  24:Core/Inc/ADC_config.h **** 
  25:Core/Inc/ADC_config.h **** #ifdef __cplusplus
  26:Core/Inc/ADC_config.h **** extern "C" {
  27:Core/Inc/ADC_config.h **** #endif
  28:Core/Inc/ADC_config.h **** 
  29:Core/Inc/ADC_config.h **** /* Includes ------------------------------------------------------------------*/
  30:Core/Inc/ADC_config.h **** 
  31:Core/Inc/ADC_config.h **** /* Private includes ----------------------------------------------------------*/
  32:Core/Inc/ADC_config.h **** /* USER CODE BEGIN Includes */
  33:Core/Inc/ADC_config.h **** #include "stm32f1xx_ll_adc.h"
  34:Core/Inc/ADC_config.h **** #include "stm32f1xx_hal.h"
  35:Core/Inc/ADC_config.h **** #include "stm32f1xx_ll_bus.h"
  36:Core/Inc/ADC_config.h **** #include "stm32f1xx.h"
  37:Core/Inc/ADC_config.h **** /* USER CODE END Includes */
  38:Core/Inc/ADC_config.h **** 
  39:Core/Inc/ADC_config.h **** /* Exported types ------------------------------------------------------------*/
  40:Core/Inc/ADC_config.h **** /* USER CODE BEGIN ET */
  41:Core/Inc/ADC_config.h **** //TIM_HandleTypeDef htim7;
  42:Core/Inc/ADC_config.h **** 
  43:Core/Inc/ADC_config.h **** 
  44:Core/Inc/ADC_config.h **** /* USER CODE END ET */
  45:Core/Inc/ADC_config.h **** 
  46:Core/Inc/ADC_config.h **** /* Exported constants --------------------------------------------------------*/
  47:Core/Inc/ADC_config.h **** /* USER CODE BEGIN EC */
  48:Core/Inc/ADC_config.h **** 
  49:Core/Inc/ADC_config.h **** /* USER CODE END EC */
  50:Core/Inc/ADC_config.h **** 
  51:Core/Inc/ADC_config.h **** /* Exported macro ------------------------------------------------------------*/
  52:Core/Inc/ADC_config.h **** /* USER CODE BEGIN EM */
  53:Core/Inc/ADC_config.h **** 
  54:Core/Inc/ADC_config.h **** /* USER CODE END EM */
  55:Core/Inc/ADC_config.h **** 
  56:Core/Inc/ADC_config.h **** /* Exported functions prototypes ---------------------------------------------*/
  57:Core/Inc/ADC_config.h **** 
ARM GAS  /tmp/ccLne6l3.s 			page 232


  58:Core/Inc/ADC_config.h **** /* USER CODE BEGIN EFP */
  59:Core/Inc/ADC_config.h **** /*
  60:Core/Inc/ADC_config.h **** *@param TIMX is filled with address ,such as TIM7
  61:Core/Inc/ADC_config.h **** *@param ms 1 < ms < xxxx
  62:Core/Inc/ADC_config.h **** *@make sure that input clk is 72MHZ
  63:Core/Inc/ADC_config.h **** */
  64:Core/Inc/ADC_config.h **** __STATIC_INLINE uint32_t ADC_By_Consultant(ADC_TypeDef *ADCx)
  65:Core/Inc/ADC_config.h **** {
 2611              		.loc 10 65 1
 2612              		.cfi_startproc
 2613              		@ args = 0, pretend = 0, frame = 8
 2614              		@ frame_needed = 1, uses_anonymous_args = 0
 2615 0000 80B5     		push	{r7, lr}
 2616              	.LCFI245:
 2617              		.cfi_def_cfa_offset 8
 2618              		.cfi_offset 7, -8
 2619              		.cfi_offset 14, -4
 2620 0002 82B0     		sub	sp, sp, #8
 2621              	.LCFI246:
 2622              		.cfi_def_cfa_offset 16
 2623 0004 00AF     		add	r7, sp, #0
 2624              	.LCFI247:
 2625              		.cfi_def_cfa_register 7
 2626 0006 7860     		str	r0, [r7, #4]
  66:Core/Inc/ADC_config.h **** 
  67:Core/Inc/ADC_config.h ****     LL_ADC_REG_StartConversionSWStart (ADCx);
 2627              		.loc 10 67 5
 2628 0008 7868     		ldr	r0, [r7, #4]
 2629 000a FFF7FEFF 		bl	LL_ADC_REG_StartConversionSWStart
  68:Core/Inc/ADC_config.h ****     while(LL_ADC_IsActiveFlag_EOS (ADCx)==0);
 2630              		.loc 10 68 10
 2631 000e 00BF     		nop
 2632              	.L112:
 2633              		.loc 10 68 11 discriminator 1
 2634 0010 7868     		ldr	r0, [r7, #4]
 2635 0012 FFF7FEFF 		bl	LL_ADC_IsActiveFlag_EOS
 2636 0016 0346     		mov	r3, r0
 2637              		.loc 10 68 10 discriminator 1
 2638 0018 002B     		cmp	r3, #0
 2639 001a F9D0     		beq	.L112
  69:Core/Inc/ADC_config.h **** 
  70:Core/Inc/ADC_config.h **** 
  71:Core/Inc/ADC_config.h ****     LL_ADC_ClearFlag_EOS(ADCx);
 2640              		.loc 10 71 5
 2641 001c 7868     		ldr	r0, [r7, #4]
 2642 001e FFF7FEFF 		bl	LL_ADC_ClearFlag_EOS
  72:Core/Inc/ADC_config.h **** 
  73:Core/Inc/ADC_config.h ****     return (LL_ADC_REG_ReadConversionData12(ADCx));
 2643              		.loc 10 73 13
 2644 0022 7868     		ldr	r0, [r7, #4]
 2645 0024 FFF7FEFF 		bl	LL_ADC_REG_ReadConversionData12
 2646 0028 0346     		mov	r3, r0
  74:Core/Inc/ADC_config.h **** }
 2647              		.loc 10 74 1
 2648 002a 1846     		mov	r0, r3
 2649 002c 0837     		adds	r7, r7, #8
 2650              	.LCFI248:
ARM GAS  /tmp/ccLne6l3.s 			page 233


 2651              		.cfi_def_cfa_offset 8
 2652 002e BD46     		mov	sp, r7
 2653              	.LCFI249:
 2654              		.cfi_def_cfa_register 13
 2655              		@ sp needed
 2656 0030 80BD     		pop	{r7, pc}
 2657              		.cfi_endproc
 2658              	.LFE680:
 2660              		.section	.text.ADC1_Operation,"ax",%progbits
 2661              		.align	1
 2662              		.syntax unified
 2663              		.thumb
 2664              		.thumb_func
 2666              	ADC1_Operation:
 2667              	.LFB681:
  75:Core/Inc/ADC_config.h **** /*
  76:Core/Inc/ADC_config.h **** *@param TIMX is filled with address ,such as TIM7
  77:Core/Inc/ADC_config.h **** *@param ms 1 < ms < xxxx
  78:Core/Inc/ADC_config.h **** *@make sure that input clk is 72MHZ
  79:Core/Inc/ADC_config.h **** */
  80:Core/Inc/ADC_config.h **** 
  81:Core/Inc/ADC_config.h **** __STATIC_INLINE uint32_t ADC1_Operation()
  82:Core/Inc/ADC_config.h **** {
 2668              		.loc 10 82 1
 2669              		.cfi_startproc
 2670              		@ args = 0, pretend = 0, frame = 0
 2671              		@ frame_needed = 1, uses_anonymous_args = 0
 2672 0000 80B5     		push	{r7, lr}
 2673              	.LCFI250:
 2674              		.cfi_def_cfa_offset 8
 2675              		.cfi_offset 7, -8
 2676              		.cfi_offset 14, -4
 2677 0002 00AF     		add	r7, sp, #0
 2678              	.LCFI251:
 2679              		.cfi_def_cfa_register 7
  83:Core/Inc/ADC_config.h ****   return ADC_By_Consultant(ADC1);
 2680              		.loc 10 83 10
 2681 0004 0248     		ldr	r0, .L116
 2682 0006 FFF7FEFF 		bl	ADC_By_Consultant
 2683 000a 0346     		mov	r3, r0
  84:Core/Inc/ADC_config.h **** }
 2684              		.loc 10 84 1
 2685 000c 1846     		mov	r0, r3
 2686 000e 80BD     		pop	{r7, pc}
 2687              	.L117:
 2688              		.align	2
 2689              	.L116:
 2690 0010 00240140 		.word	1073816576
 2691              		.cfi_endproc
 2692              	.LFE681:
 2694              		.section	.text.Get_ADC_INIT_VALUE,"ax",%progbits
 2695              		.align	1
 2696              		.syntax unified
 2697              		.thumb
 2698              		.thumb_func
 2700              	Get_ADC_INIT_VALUE:
 2701              	.LFB683:
ARM GAS  /tmp/ccLne6l3.s 			page 234


  85:Core/Inc/ADC_config.h **** /*
  86:Core/Inc/ADC_config.h **** *@param TIMX is filled with address ,such as TIM7
  87:Core/Inc/ADC_config.h **** *@param ms 1 < ms < xxxx
  88:Core/Inc/ADC_config.h **** *@make sure that input clk is 72MHZ
  89:Core/Inc/ADC_config.h **** */
  90:Core/Inc/ADC_config.h **** __STATIC_INLINE uint32_t ADC1_Operation_CALIB(uint32_t Calibrated_Value)
  91:Core/Inc/ADC_config.h **** {
  92:Core/Inc/ADC_config.h ****   return (ADC_By_Consultant(ADC1)-Calibrated_Value);
  93:Core/Inc/ADC_config.h **** }
  94:Core/Inc/ADC_config.h **** 
  95:Core/Inc/ADC_config.h **** /*
  96:Core/Inc/ADC_config.h **** *get the initial value of ADC1
  97:Core/Inc/ADC_config.h **** *
  98:Core/Inc/ADC_config.h **** *
  99:Core/Inc/ADC_config.h **** */
 100:Core/Inc/ADC_config.h **** __STATIC_INLINE void Get_ADC_INIT_VALUE(uint32_t *Output)
 101:Core/Inc/ADC_config.h **** {
 2702              		.loc 10 101 1
 2703              		.cfi_startproc
 2704              		@ args = 0, pretend = 0, frame = 8
 2705              		@ frame_needed = 1, uses_anonymous_args = 0
 2706 0000 80B5     		push	{r7, lr}
 2707              	.LCFI252:
 2708              		.cfi_def_cfa_offset 8
 2709              		.cfi_offset 7, -8
 2710              		.cfi_offset 14, -4
 2711 0002 82B0     		sub	sp, sp, #8
 2712              	.LCFI253:
 2713              		.cfi_def_cfa_offset 16
 2714 0004 00AF     		add	r7, sp, #0
 2715              	.LCFI254:
 2716              		.cfi_def_cfa_register 7
 2717 0006 7860     		str	r0, [r7, #4]
 102:Core/Inc/ADC_config.h ****   Set_And_Convert_Duty(TIM1,0);   ////////////close the PWM
 2718              		.loc 10 102 3
 2719 0008 0021     		movs	r1, #0
 2720 000a 0648     		ldr	r0, .L119
 2721 000c FFF7FEFF 		bl	Set_And_Convert_Duty
 103:Core/Inc/ADC_config.h **** 
 104:Core/Inc/ADC_config.h ****   *Output = ADC_By_Consultant(ADC1);
 2722              		.loc 10 104 13
 2723 0010 0548     		ldr	r0, .L119+4
 2724 0012 FFF7FEFF 		bl	ADC_By_Consultant
 2725 0016 0246     		mov	r2, r0
 2726              		.loc 10 104 11
 2727 0018 7B68     		ldr	r3, [r7, #4]
 2728 001a 1A60     		str	r2, [r3]
 105:Core/Inc/ADC_config.h **** }
 2729              		.loc 10 105 1
 2730 001c 00BF     		nop
 2731 001e 0837     		adds	r7, r7, #8
 2732              	.LCFI255:
 2733              		.cfi_def_cfa_offset 8
 2734 0020 BD46     		mov	sp, r7
 2735              	.LCFI256:
 2736              		.cfi_def_cfa_register 13
 2737              		@ sp needed
ARM GAS  /tmp/ccLne6l3.s 			page 235


 2738 0022 80BD     		pop	{r7, pc}
 2739              	.L120:
 2740              		.align	2
 2741              	.L119:
 2742 0024 002C0140 		.word	1073818624
 2743 0028 00240140 		.word	1073816576
 2744              		.cfi_endproc
 2745              	.LFE683:
 2747              		.global	TARGET
 2748              		.section	.data.TARGET,"aw"
 2749              		.align	2
 2752              	TARGET:
 2753 0000 0000C842 		.word	1120403456
 2754 0004 64000000 		.word	100
 2755 0008 00000000 		.word	0
 2756              		.global	Exceed_Time_Flag
 2757              		.section	.bss.Exceed_Time_Flag,"aw",%nobits
 2760              	Exceed_Time_Flag:
 2761 0000 00       		.space	1
 2762              		.global	uart_temp
 2763              		.section	.bss.uart_temp,"aw",%nobits
 2766              	uart_temp:
 2767 0000 00       		.space	1
 2768              		.global	uart_receive_data
 2769              		.section	.bss.uart_receive_data,"aw",%nobits
 2770              		.align	2
 2773              	uart_receive_data:
 2774 0000 00000000 		.space	7
 2774      000000
 2775              		.global	htim6
 2776              		.section	.bss.htim6,"aw",%nobits
 2777              		.align	2
 2780              	htim6:
 2781 0000 00000000 		.space	72
 2781      00000000 
 2781      00000000 
 2781      00000000 
 2781      00000000 
 2782              		.global	huart1
 2783              		.section	.bss.huart1,"aw",%nobits
 2784              		.align	2
 2787              	huart1:
 2788 0000 00000000 		.space	72
 2788      00000000 
 2788      00000000 
 2788      00000000 
 2788      00000000 
 2789              		.section	.text.main,"ax",%progbits
 2790              		.align	1
 2791              		.global	main
 2792              		.syntax unified
 2793              		.thumb
 2794              		.thumb_func
 2796              	main:
 2797              	.LFB684:
 2798              		.file 11 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
ARM GAS  /tmp/ccLne6l3.s 			page 236


   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** Config_Value TARGET = {100,100,0};
  30:Core/Src/main.c **** uint8_t Exceed_Time_Flag =0;
  31:Core/Src/main.c **** unsigned char uart_temp;
  32:Core/Src/main.c **** uint8_t uart_receive_data[7];
  33:Core/Src/main.c **** /* USER CODE END PTD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  36:Core/Src/main.c **** /* USER CODE BEGIN PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** TIM_HandleTypeDef htim6;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** UART_HandleTypeDef huart1;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE BEGIN PV */
  52:Core/Src/main.c **** // #define __GNUC__ 11
  53:Core/Src/main.c **** // #ifdef __GNUC__
  54:Core/Src/main.c **** // #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  55:Core/Src/main.c **** // #else
  56:Core/Src/main.c **** // #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
  57:Core/Src/main.c **** // #endif
  58:Core/Src/main.c **** // PUTCHAR_PROTOTYPE
ARM GAS  /tmp/ccLne6l3.s 			page 237


  59:Core/Src/main.c **** // {
  60:Core/Src/main.c **** //     HAL_UART_Transmit(&huart1 , (__uint8_t *)&ch, 1, 0xFFFF);
  61:Core/Src/main.c **** //     return ch;
  62:Core/Src/main.c **** // }
  63:Core/Src/main.c **** // int _write(int file, char *ptr, int len)
  64:Core/Src/main.c **** // {
  65:Core/Src/main.c **** //       int DataIdx;
  66:Core/Src/main.c **** //       for (DataIdx = 0; DataIdx < len;DataIdx++)
  67:Core/Src/main.c **** //      {
  68:Core/Src/main.c **** //            //__io_putchar(*ptr++);
  69:Core/Src/main.c **** //            HAL_UART_Transmit(&huart1 ,ptr++, 1, 0xFFFF);
  70:Core/Src/main.c **** //      }
  71:Core/Src/main.c **** //       return len;
  72:Core/Src/main.c **** // }
  73:Core/Src/main.c **** /* USER CODE END PV */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  76:Core/Src/main.c **** void SystemClock_Config(void);
  77:Core/Src/main.c **** static void MX_GPIO_Init(void);
  78:Core/Src/main.c **** static void MX_DMA_Init(void);
  79:Core/Src/main.c **** static void MX_TIM6_Init(void);
  80:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  81:Core/Src/main.c **** static void MX_TIM1_Init(void);
  82:Core/Src/main.c **** static void MX_TIM7_Init(void);
  83:Core/Src/main.c **** static void MX_ADC1_Init(void);
  84:Core/Src/main.c **** static void MX_NVIC_Init(void);
  85:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** /* USER CODE END PFP */
  88:Core/Src/main.c **** 
  89:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  90:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** /* USER CODE END 0 */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** /**
  95:Core/Src/main.c ****   * @brief  The application entry point.
  96:Core/Src/main.c ****   * @retval int
  97:Core/Src/main.c ****   */
  98:Core/Src/main.c **** int main(void)
  99:Core/Src/main.c **** {
 2799              		.loc 11 99 1
 2800              		.cfi_startproc
 2801              		@ args = 0, pretend = 0, frame = 56
 2802              		@ frame_needed = 1, uses_anonymous_args = 0
 2803 0000 80B5     		push	{r7, lr}
 2804              	.LCFI257:
 2805              		.cfi_def_cfa_offset 8
 2806              		.cfi_offset 7, -8
 2807              		.cfi_offset 14, -4
 2808 0002 90B0     		sub	sp, sp, #64
 2809              	.LCFI258:
 2810              		.cfi_def_cfa_offset 72
 2811 0004 02AF     		add	r7, sp, #8
 2812              	.LCFI259:
 2813              		.cfi_def_cfa 7, 64
 100:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
ARM GAS  /tmp/ccLne6l3.s 			page 238


 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE END 1 */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 107:Core/Src/main.c ****   HAL_Init();
 2814              		.loc 11 107 3
 2815 0006 FFF7FEFF 		bl	HAL_Init
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* USER CODE END Init */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* Configure the system clock */
 114:Core/Src/main.c ****   SystemClock_Config();
 2816              		.loc 11 114 3
 2817 000a FFF7FEFF 		bl	SystemClock_Config
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 117:Core/Src/main.c ****  // MX_TIM7_INIT(TIM7);
 118:Core/Src/main.c ****   /* USER CODE END SysInit */
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /* Initialize all configured peripherals */
 121:Core/Src/main.c ****   MX_GPIO_Init();
 2818              		.loc 11 121 3
 2819 000e FFF7FEFF 		bl	MX_GPIO_Init
 122:Core/Src/main.c ****   MX_DMA_Init();
 2820              		.loc 11 122 3
 2821 0012 FFF7FEFF 		bl	MX_DMA_Init
 123:Core/Src/main.c ****   MX_TIM6_Init();
 2822              		.loc 11 123 3
 2823 0016 FFF7FEFF 		bl	MX_TIM6_Init
 124:Core/Src/main.c ****   MX_USART1_UART_Init();
 2824              		.loc 11 124 3
 2825 001a FFF7FEFF 		bl	MX_USART1_UART_Init
 125:Core/Src/main.c ****   MX_TIM1_Init();
 2826              		.loc 11 125 3
 2827 001e FFF7FEFF 		bl	MX_TIM1_Init
 126:Core/Src/main.c ****   MX_TIM7_Init();
 2828              		.loc 11 126 3
 2829 0022 FFF7FEFF 		bl	MX_TIM7_Init
 127:Core/Src/main.c ****   MX_ADC1_Init();
 2830              		.loc 11 127 3
 2831 0026 FFF7FEFF 		bl	MX_ADC1_Init
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /* Initialize interrupts */
 130:Core/Src/main.c ****   MX_NVIC_Init();
 2832              		.loc 11 130 3
 2833 002a FFF7FEFF 		bl	MX_NVIC_Init
 131:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 132:Core/Src/main.c ****   //__HAL_USART_ENABLE_IT();
 133:Core/Src/main.c ****   //HAL_UART_Receive_IT(&huart1,uart_temp,5);
 134:Core/Src/main.c ****   Advance_TIMX_PWM_INIGTION(TIM1);
 2834              		.loc 11 134 3
 2835 002e 2348     		ldr	r0, .L126
 2836 0030 FFF7FEFF 		bl	Advance_TIMX_PWM_INIGTION
ARM GAS  /tmp/ccLne6l3.s 			page 239


 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   int Sys_Led_Cnt_Flag = 0;
 2837              		.loc 11 136 7
 2838 0034 0023     		movs	r3, #0
 2839 0036 7B63     		str	r3, [r7, #52]
 137:Core/Src/main.c ****   unsigned char temp1=0;
 2840              		.loc 11 137 17
 2841 0038 0023     		movs	r3, #0
 2842 003a 87F83330 		strb	r3, [r7, #51]
 138:Core/Src/main.c ****   uint32_t ADC_TEMP;
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   PID_Controller temp2;
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   // ADC_Operation FUNC1 = ADC1_Operation;
 143:Core/Src/main.c ****   // Set_Duty FUNC2 = Set_And_Convert_Duty_ALL;
 144:Core/Src/main.c ****   
 145:Core/Src/main.c ****   Get_ADC_INIT_VALUE(&(TARGET.ADC_ZERO_INIT));  /////////get a init value of zero duty PWM
 2843              		.loc 11 145 3
 2844 003e 2048     		ldr	r0, .L126+4
 2845 0040 FFF7FEFF 		bl	Get_ADC_INIT_VALUE
 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****    
 148:Core/Src/main.c ****   // Set_And_Convert_Duty_Float(TIM1, 0.04);
 149:Core/Src/main.c **** 
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   PID_Parameters_Init(&temp2,0.02,0.00002,0.0,ADC1_Operation,Set_And_Convert_Duty_ALL);
 2846              		.loc 11 151 3
 2847 0044 381D     		adds	r0, r7, #4
 2848 0046 1F4B     		ldr	r3, .L126+8
 2849 0048 0193     		str	r3, [sp, #4]
 2850 004a 1F4B     		ldr	r3, .L126+12
 2851 004c 0093     		str	r3, [sp]
 2852 004e 4FF00003 		mov	r3, #0
 2853 0052 1E4A     		ldr	r2, .L126+16
 2854 0054 1E49     		ldr	r1, .L126+20
 2855 0056 FFF7FEFF 		bl	PID_Parameters_Init
 2856              	.L125:
 152:Core/Src/main.c ****   /* USER CODE END 2 */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /* Infinite loop */
 155:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 156:Core/Src/main.c ****   while (1)
 157:Core/Src/main.c ****   {
 158:Core/Src/main.c ****        // LL_TIM_OC_SetCompareCH1(TIM1, 269);
 159:Core/Src/main.c ****        Set_And_Convert_Duty_ALL(100);
 2857              		.loc 11 159 8
 2858 005a 1E48     		ldr	r0, .L126+24
 2859 005c FFF7FEFF 		bl	Set_And_Convert_Duty_ALL
 160:Core/Src/main.c ****        //PID_Process(TARGET,&temp2,ADC1_Operation,Set_And_Convert_Duty_ALL);
 161:Core/Src/main.c ****         //ms_delay(TIM7,10);
 162:Core/Src/main.c ****        us_delay(TIM7,(int)(TARGET.interval));
 2860              		.loc 11 162 34
 2861 0060 1D4B     		ldr	r3, .L126+28
 2862 0062 5B68     		ldr	r3, [r3, #4]
 2863              		.loc 11 162 8
 2864 0064 1946     		mov	r1, r3
 2865 0066 1D48     		ldr	r0, .L126+32
ARM GAS  /tmp/ccLne6l3.s 			page 240


 2866 0068 FFF7FEFF 		bl	us_delay
 163:Core/Src/main.c ****        //us_delay(TIM7,100);
 164:Core/Src/main.c ****     // LL_ADC_REG_StartConversionSWStart (ADC1);
 165:Core/Src/main.c ****     // while(LL_ADC_IsActiveFlag_EOS (ADC1)==0);
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****     // ADC_TEMP = LL_ADC_REG_ReadConversionData12(ADC1);
 168:Core/Src/main.c ****     // LL_ADC_ClearFlag_EOS(ADC1);
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****        instruction_handle(&huart1,uart_receive_data,&TARGET);
 2867              		.loc 11 170 8
 2868 006c 1A4A     		ldr	r2, .L126+28
 2869 006e 1C49     		ldr	r1, .L126+36
 2870 0070 1C48     		ldr	r0, .L126+40
 2871 0072 FFF7FEFF 		bl	instruction_handle
 171:Core/Src/main.c ****       // us_delay(TIM7,10);
 172:Core/Src/main.c ****        auto_report_handle(&huart1,&TARGET);
 2872              		.loc 11 172 8
 2873 0076 1849     		ldr	r1, .L126+28
 2874 0078 1A48     		ldr	r0, .L126+40
 2875 007a FFF7FEFF 		bl	auto_report_handle
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****        //ADC_TEMP = ADC_By_Consultant(ADC1);
 175:Core/Src/main.c **** 
 176:Core/Src/main.c **** 
 177:Core/Src/main.c **** 
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****     /////////// SYS LED RUN ////////////////
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****     if(Sys_Led_Cnt_Flag <= 100)
 2876              		.loc 11 181 7
 2877 007e 7B6B     		ldr	r3, [r7, #52]
 2878 0080 642B     		cmp	r3, #100
 2879 0082 05DC     		bgt	.L122
 182:Core/Src/main.c ****     {
 183:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,GPIO_PIN_SET);
 2880              		.loc 11 183 7
 2881 0084 0122     		movs	r2, #1
 2882 0086 0421     		movs	r1, #4
 2883 0088 1748     		ldr	r0, .L126+44
 2884 008a FFF7FEFF 		bl	HAL_GPIO_WritePin
 2885 008e 10E0     		b	.L123
 2886              	.L122:
 184:Core/Src/main.c ****       //Sys_Led_Cnt_Flag =0;
 185:Core/Src/main.c ****     }
 186:Core/Src/main.c ****     else if ((Sys_Led_Cnt_Flag >100)&&(Sys_Led_Cnt_Flag <=200))
 2887              		.loc 11 186 13
 2888 0090 7B6B     		ldr	r3, [r7, #52]
 2889 0092 642B     		cmp	r3, #100
 2890 0094 08DD     		ble	.L124
 2891              		.loc 11 186 37 discriminator 1
 2892 0096 7B6B     		ldr	r3, [r7, #52]
 2893 0098 C82B     		cmp	r3, #200
 2894 009a 05DC     		bgt	.L124
 187:Core/Src/main.c ****     {
 188:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,GPIO_PIN_RESET);
 2895              		.loc 11 188 7
 2896 009c 0022     		movs	r2, #0
ARM GAS  /tmp/ccLne6l3.s 			page 241


 2897 009e 0421     		movs	r1, #4
 2898 00a0 1148     		ldr	r0, .L126+44
 2899 00a2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2900 00a6 04E0     		b	.L123
 2901              	.L124:
 189:Core/Src/main.c ****     }
 190:Core/Src/main.c ****     else if (Sys_Led_Cnt_Flag > 200)
 2902              		.loc 11 190 13
 2903 00a8 7B6B     		ldr	r3, [r7, #52]
 2904 00aa C82B     		cmp	r3, #200
 2905 00ac 01DD     		ble	.L123
 191:Core/Src/main.c ****     {
 192:Core/Src/main.c ****       Sys_Led_Cnt_Flag =0;
 2906              		.loc 11 192 24
 2907 00ae 0023     		movs	r3, #0
 2908 00b0 7B63     		str	r3, [r7, #52]
 2909              	.L123:
 193:Core/Src/main.c ****     }
 194:Core/Src/main.c ****     Sys_Led_Cnt_Flag++;
 2910              		.loc 11 194 21
 2911 00b2 7B6B     		ldr	r3, [r7, #52]
 2912 00b4 0133     		adds	r3, r3, #1
 2913 00b6 7B63     		str	r3, [r7, #52]
 159:Core/Src/main.c ****        //PID_Process(TARGET,&temp2,ADC1_Operation,Set_And_Convert_Duty_ALL);
 2914              		.loc 11 159 8
 2915 00b8 CFE7     		b	.L125
 2916              	.L127:
 2917 00ba 00BF     		.align	2
 2918              	.L126:
 2919 00bc 002C0140 		.word	1073818624
 2920 00c0 08000000 		.word	TARGET+8
 2921 00c4 00000000 		.word	Set_And_Convert_Duty_ALL
 2922 00c8 00000000 		.word	ADC1_Operation
 2923 00cc ACC5A737 		.word	933741996
 2924 00d0 0AD7A33C 		.word	1017370378
 2925 00d4 0000C842 		.word	1120403456
 2926 00d8 00000000 		.word	TARGET
 2927 00dc 00140040 		.word	1073746944
 2928 00e0 00000000 		.word	uart_receive_data
 2929 00e4 00000000 		.word	huart1
 2930 00e8 00140140 		.word	1073812480
 2931              		.cfi_endproc
 2932              	.LFE684:
 2934              		.section	.text.SystemClock_Config,"ax",%progbits
 2935              		.align	1
 2936              		.global	SystemClock_Config
 2937              		.syntax unified
 2938              		.thumb
 2939              		.thumb_func
 2941              	SystemClock_Config:
 2942              	.LFB685:
 195:Core/Src/main.c ****     ///////////////////////////////////////////////////
 196:Core/Src/main.c **** 
 197:Core/Src/main.c **** 
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****     /* USER CODE END WHILE */
 200:Core/Src/main.c **** 
ARM GAS  /tmp/ccLne6l3.s 			page 242


 201:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 202:Core/Src/main.c ****   }
 203:Core/Src/main.c ****   /* USER CODE END 3 */
 204:Core/Src/main.c **** }
 205:Core/Src/main.c **** 
 206:Core/Src/main.c **** /**
 207:Core/Src/main.c ****   * @brief System Clock Configuration
 208:Core/Src/main.c ****   * @retval None
 209:Core/Src/main.c ****   */
 210:Core/Src/main.c **** void SystemClock_Config(void)
 211:Core/Src/main.c **** {
 2943              		.loc 11 211 1
 2944              		.cfi_startproc
 2945              		@ args = 0, pretend = 0, frame = 88
 2946              		@ frame_needed = 1, uses_anonymous_args = 0
 2947 0000 80B5     		push	{r7, lr}
 2948              	.LCFI260:
 2949              		.cfi_def_cfa_offset 8
 2950              		.cfi_offset 7, -8
 2951              		.cfi_offset 14, -4
 2952 0002 96B0     		sub	sp, sp, #88
 2953              	.LCFI261:
 2954              		.cfi_def_cfa_offset 96
 2955 0004 00AF     		add	r7, sp, #0
 2956              	.LCFI262:
 2957              		.cfi_def_cfa_register 7
 212:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2958              		.loc 11 212 22
 2959 0006 07F13003 		add	r3, r7, #48
 2960 000a 2822     		movs	r2, #40
 2961 000c 0021     		movs	r1, #0
 2962 000e 1846     		mov	r0, r3
 2963 0010 FFF7FEFF 		bl	memset
 213:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2964              		.loc 11 213 22
 2965 0014 07F11C03 		add	r3, r7, #28
 2966 0018 0022     		movs	r2, #0
 2967 001a 1A60     		str	r2, [r3]
 2968 001c 5A60     		str	r2, [r3, #4]
 2969 001e 9A60     		str	r2, [r3, #8]
 2970 0020 DA60     		str	r2, [r3, #12]
 2971 0022 1A61     		str	r2, [r3, #16]
 214:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 2972              		.loc 11 214 28
 2973 0024 3B1D     		adds	r3, r7, #4
 2974 0026 0022     		movs	r2, #0
 2975 0028 1A60     		str	r2, [r3]
 2976 002a 5A60     		str	r2, [r3, #4]
 2977 002c 9A60     		str	r2, [r3, #8]
 2978 002e DA60     		str	r2, [r3, #12]
 2979 0030 1A61     		str	r2, [r3, #16]
 2980 0032 5A61     		str	r2, [r3, #20]
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 217:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 218:Core/Src/main.c ****   */
 219:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
ARM GAS  /tmp/ccLne6l3.s 			page 243


 2981              		.loc 11 219 36
 2982 0034 0123     		movs	r3, #1
 2983 0036 3B63     		str	r3, [r7, #48]
 220:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 2984              		.loc 11 220 30
 2985 0038 4FF48033 		mov	r3, #65536
 2986 003c 7B63     		str	r3, [r7, #52]
 221:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 2987              		.loc 11 221 36
 2988 003e 0023     		movs	r3, #0
 2989 0040 BB63     		str	r3, [r7, #56]
 222:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2990              		.loc 11 222 30
 2991 0042 0123     		movs	r3, #1
 2992 0044 3B64     		str	r3, [r7, #64]
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2993              		.loc 11 223 34
 2994 0046 0223     		movs	r3, #2
 2995 0048 FB64     		str	r3, [r7, #76]
 224:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 2996              		.loc 11 224 35
 2997 004a 4FF48033 		mov	r3, #65536
 2998 004e 3B65     		str	r3, [r7, #80]
 225:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 2999              		.loc 11 225 32
 3000 0050 4FF4E013 		mov	r3, #1835008
 3001 0054 7B65     		str	r3, [r7, #84]
 226:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 3002              		.loc 11 226 7
 3003 0056 07F13003 		add	r3, r7, #48
 3004 005a 1846     		mov	r0, r3
 3005 005c FFF7FEFF 		bl	HAL_RCC_OscConfig
 3006 0060 0346     		mov	r3, r0
 3007              		.loc 11 226 6
 3008 0062 002B     		cmp	r3, #0
 3009 0064 01D0     		beq	.L129
 227:Core/Src/main.c ****   {
 228:Core/Src/main.c ****     Error_Handler();
 3010              		.loc 11 228 5
 3011 0066 FFF7FEFF 		bl	Error_Handler
 3012              	.L129:
 229:Core/Src/main.c ****   }
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 232:Core/Src/main.c ****   */
 233:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 3013              		.loc 11 233 31
 3014 006a 0F23     		movs	r3, #15
 3015 006c FB61     		str	r3, [r7, #28]
 234:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 235:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 3016              		.loc 11 235 34
 3017 006e 0223     		movs	r3, #2
 3018 0070 3B62     		str	r3, [r7, #32]
 236:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 3019              		.loc 11 236 35
 3020 0072 0023     		movs	r3, #0
ARM GAS  /tmp/ccLne6l3.s 			page 244


 3021 0074 7B62     		str	r3, [r7, #36]
 237:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 3022              		.loc 11 237 36
 3023 0076 4FF48063 		mov	r3, #1024
 3024 007a BB62     		str	r3, [r7, #40]
 238:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 3025              		.loc 11 238 36
 3026 007c 0023     		movs	r3, #0
 3027 007e FB62     		str	r3, [r7, #44]
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 3028              		.loc 11 240 7
 3029 0080 07F11C03 		add	r3, r7, #28
 3030 0084 0221     		movs	r1, #2
 3031 0086 1846     		mov	r0, r3
 3032 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 3033 008c 0346     		mov	r3, r0
 3034              		.loc 11 240 6
 3035 008e 002B     		cmp	r3, #0
 3036 0090 01D0     		beq	.L130
 241:Core/Src/main.c ****   {
 242:Core/Src/main.c ****     Error_Handler();
 3037              		.loc 11 242 5
 3038 0092 FFF7FEFF 		bl	Error_Handler
 3039              	.L130:
 243:Core/Src/main.c ****   }
 244:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 3040              		.loc 11 244 38
 3041 0096 0223     		movs	r3, #2
 3042 0098 7B60     		str	r3, [r7, #4]
 245:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 3043              		.loc 11 245 35
 3044 009a 4FF40043 		mov	r3, #32768
 3045 009e FB60     		str	r3, [r7, #12]
 246:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 3046              		.loc 11 246 7
 3047 00a0 3B1D     		adds	r3, r7, #4
 3048 00a2 1846     		mov	r0, r3
 3049 00a4 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 3050 00a8 0346     		mov	r3, r0
 3051              		.loc 11 246 6
 3052 00aa 002B     		cmp	r3, #0
 3053 00ac 01D0     		beq	.L132
 247:Core/Src/main.c ****   {
 248:Core/Src/main.c ****     Error_Handler();
 3054              		.loc 11 248 5
 3055 00ae FFF7FEFF 		bl	Error_Handler
 3056              	.L132:
 249:Core/Src/main.c ****   }
 250:Core/Src/main.c **** }
 3057              		.loc 11 250 1
 3058 00b2 00BF     		nop
 3059 00b4 5837     		adds	r7, r7, #88
 3060              	.LCFI263:
 3061              		.cfi_def_cfa_offset 8
 3062 00b6 BD46     		mov	sp, r7
 3063              	.LCFI264:
ARM GAS  /tmp/ccLne6l3.s 			page 245


 3064              		.cfi_def_cfa_register 13
 3065              		@ sp needed
 3066 00b8 80BD     		pop	{r7, pc}
 3067              		.cfi_endproc
 3068              	.LFE685:
 3070              		.section	.text.MX_NVIC_Init,"ax",%progbits
 3071              		.align	1
 3072              		.syntax unified
 3073              		.thumb
 3074              		.thumb_func
 3076              	MX_NVIC_Init:
 3077              	.LFB686:
 251:Core/Src/main.c **** 
 252:Core/Src/main.c **** /**
 253:Core/Src/main.c ****   * @brief NVIC Configuration.
 254:Core/Src/main.c ****   * @retval None
 255:Core/Src/main.c ****   */
 256:Core/Src/main.c **** static void MX_NVIC_Init(void)
 257:Core/Src/main.c **** {
 3078              		.loc 11 257 1
 3079              		.cfi_startproc
 3080              		@ args = 0, pretend = 0, frame = 0
 3081              		@ frame_needed = 1, uses_anonymous_args = 0
 3082 0000 80B5     		push	{r7, lr}
 3083              	.LCFI265:
 3084              		.cfi_def_cfa_offset 8
 3085              		.cfi_offset 7, -8
 3086              		.cfi_offset 14, -4
 3087 0002 00AF     		add	r7, sp, #0
 3088              	.LCFI266:
 3089              		.cfi_def_cfa_register 7
 258:Core/Src/main.c ****   /* TIM6_IRQn interrupt configuration */
 259:Core/Src/main.c ****   HAL_NVIC_SetPriority(TIM6_IRQn, 15, 0);
 3090              		.loc 11 259 3
 3091 0004 0022     		movs	r2, #0
 3092 0006 0F21     		movs	r1, #15
 3093 0008 3620     		movs	r0, #54
 3094 000a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 260:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(TIM6_IRQn);
 3095              		.loc 11 260 3
 3096 000e 3620     		movs	r0, #54
 3097 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 261:Core/Src/main.c ****   /* USART1_IRQn interrupt configuration */
 262:Core/Src/main.c ****   HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 3098              		.loc 11 262 3
 3099 0014 0022     		movs	r2, #0
 3100 0016 0421     		movs	r1, #4
 3101 0018 2520     		movs	r0, #37
 3102 001a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 263:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(USART1_IRQn);
 3103              		.loc 11 263 3
 3104 001e 2520     		movs	r0, #37
 3105 0020 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 264:Core/Src/main.c **** }
 3106              		.loc 11 264 1
 3107 0024 00BF     		nop
 3108 0026 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccLne6l3.s 			page 246


 3109              		.cfi_endproc
 3110              	.LFE686:
 3112              		.section	.text.MX_ADC1_Init,"ax",%progbits
 3113              		.align	1
 3114              		.syntax unified
 3115              		.thumb
 3116              		.thumb_func
 3118              	MX_ADC1_Init:
 3119              	.LFB687:
 265:Core/Src/main.c **** 
 266:Core/Src/main.c **** /**
 267:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 268:Core/Src/main.c ****   * @param None
 269:Core/Src/main.c ****   * @retval None
 270:Core/Src/main.c ****   */
 271:Core/Src/main.c **** static void MX_ADC1_Init(void)
 272:Core/Src/main.c **** {
 3120              		.loc 11 272 1
 3121              		.cfi_startproc
 3122              		@ args = 0, pretend = 0, frame = 56
 3123              		@ frame_needed = 1, uses_anonymous_args = 0
 3124 0000 80B5     		push	{r7, lr}
 3125              	.LCFI267:
 3126              		.cfi_def_cfa_offset 8
 3127              		.cfi_offset 7, -8
 3128              		.cfi_offset 14, -4
 3129 0002 8EB0     		sub	sp, sp, #56
 3130              	.LCFI268:
 3131              		.cfi_def_cfa_offset 64
 3132 0004 00AF     		add	r7, sp, #0
 3133              	.LCFI269:
 3134              		.cfi_def_cfa_register 7
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 275:Core/Src/main.c **** 
 276:Core/Src/main.c ****   /*ADC Calibration*/
 277:Core/Src/main.c ****   LL_ADC_Disable(ADC1);
 3135              		.loc 11 277 3
 3136 0006 4848     		ldr	r0, .L136
 3137 0008 FFF7FEFF 		bl	LL_ADC_Disable
 278:Core/Src/main.c ****   LL_ADC_StartCalibration (ADC1);
 3138              		.loc 11 278 3
 3139 000c 4648     		ldr	r0, .L136
 3140 000e FFF7FEFF 		bl	LL_ADC_StartCalibration
 279:Core/Src/main.c ****   while (LL_ADC_IsCalibrationOnGoing(ADC1));
 3141              		.loc 11 279 9
 3142 0012 00BF     		nop
 3143              	.L135:
 3144              		.loc 11 279 10 discriminator 1
 3145 0014 4448     		ldr	r0, .L136
 3146 0016 FFF7FEFF 		bl	LL_ADC_IsCalibrationOnGoing
 3147 001a 0346     		mov	r3, r0
 3148              		.loc 11 279 9 discriminator 1
 3149 001c 002B     		cmp	r3, #0
 3150 001e F9D1     		bne	.L135
 280:Core/Src/main.c **** 
 281:Core/Src/main.c **** 
ARM GAS  /tmp/ccLne6l3.s 			page 247


 282:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   LL_ADC_InitTypeDef ADC_InitStruct = {0};
 3151              		.loc 11 284 22
 3152 0020 07F13003 		add	r3, r7, #48
 3153 0024 0022     		movs	r2, #0
 3154 0026 1A60     		str	r2, [r3]
 3155 0028 5A60     		str	r2, [r3, #4]
 285:Core/Src/main.c ****   LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 3156              		.loc 11 285 28
 3157 002a 0023     		movs	r3, #0
 3158 002c FB62     		str	r3, [r7, #44]
 286:Core/Src/main.c ****   LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 3159              		.loc 11 286 26
 3160 002e 07F11803 		add	r3, r7, #24
 3161 0032 0022     		movs	r2, #0
 3162 0034 1A60     		str	r2, [r3]
 3163 0036 5A60     		str	r2, [r3, #4]
 3164 0038 9A60     		str	r2, [r3, #8]
 3165 003a DA60     		str	r2, [r3, #12]
 3166 003c 1A61     		str	r2, [r3, #16]
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****   LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 3167              		.loc 11 288 23
 3168 003e 3B1D     		adds	r3, r7, #4
 3169 0040 0022     		movs	r2, #0
 3170 0042 1A60     		str	r2, [r3]
 3171 0044 5A60     		str	r2, [r3, #4]
 3172 0046 9A60     		str	r2, [r3, #8]
 3173 0048 DA60     		str	r2, [r3, #12]
 3174 004a 1A61     		str	r2, [r3, #16]
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****   /* Peripheral clock enable */
 291:Core/Src/main.c ****   LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 3175              		.loc 11 291 3
 3176 004c 4FF40070 		mov	r0, #512
 3177 0050 FFF7FEFF 		bl	LL_APB2_GRP1_EnableClock
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****   LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 3178              		.loc 11 293 3
 3179 0054 0420     		movs	r0, #4
 3180 0056 FFF7FEFF 		bl	LL_APB2_GRP1_EnableClock
 294:Core/Src/main.c ****   /**ADC1 GPIO Configuration
 295:Core/Src/main.c ****   PA1   ------> ADC1_IN1
 296:Core/Src/main.c ****   */
 297:Core/Src/main.c ****   GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 3181              		.loc 11 297 23
 3182 005a 40F20223 		movw	r3, #514
 3183 005e 7B60     		str	r3, [r7, #4]
 298:Core/Src/main.c ****   GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 3184              		.loc 11 298 24
 3185 0060 0023     		movs	r3, #0
 3186 0062 BB60     		str	r3, [r7, #8]
 299:Core/Src/main.c ****   LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 3187              		.loc 11 299 3
 3188 0064 3B1D     		adds	r3, r7, #4
 3189 0066 1946     		mov	r1, r3
ARM GAS  /tmp/ccLne6l3.s 			page 248


 3190 0068 3048     		ldr	r0, .L136+4
 3191 006a FFF7FEFF 		bl	LL_GPIO_Init
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /* ADC1 DMA Init */
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /* ADC1 Init */
 304:Core/Src/main.c ****   LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 3192              		.loc 11 304 3
 3193 006e 0022     		movs	r2, #0
 3194 0070 0121     		movs	r1, #1
 3195 0072 2F48     		ldr	r0, .L136+8
 3196 0074 FFF7FEFF 		bl	LL_DMA_SetDataTransferDirection
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 3197              		.loc 11 306 3
 3198 0078 0022     		movs	r2, #0
 3199 007a 0121     		movs	r1, #1
 3200 007c 2C48     		ldr	r0, .L136+8
 3201 007e FFF7FEFF 		bl	LL_DMA_SetChannelPriorityLevel
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 3202              		.loc 11 308 3
 3203 0082 0022     		movs	r2, #0
 3204 0084 0121     		movs	r1, #1
 3205 0086 2A48     		ldr	r0, .L136+8
 3206 0088 FFF7FEFF 		bl	LL_DMA_SetMode
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 3207              		.loc 11 310 3
 3208 008c 0022     		movs	r2, #0
 3209 008e 0121     		movs	r1, #1
 3210 0090 2748     		ldr	r0, .L136+8
 3211 0092 FFF7FEFF 		bl	LL_DMA_SetPeriphIncMode
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****   LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 3212              		.loc 11 312 3
 3213 0096 8022     		movs	r2, #128
 3214 0098 0121     		movs	r1, #1
 3215 009a 2548     		ldr	r0, .L136+8
 3216 009c FFF7FEFF 		bl	LL_DMA_SetMemoryIncMode
 313:Core/Src/main.c **** 
 314:Core/Src/main.c ****   LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 3217              		.loc 11 314 3
 3218 00a0 4FF48072 		mov	r2, #256
 3219 00a4 0121     		movs	r1, #1
 3220 00a6 2248     		ldr	r0, .L136+8
 3221 00a8 FFF7FEFF 		bl	LL_DMA_SetPeriphSize
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****   LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 3222              		.loc 11 316 3
 3223 00ac 4FF48062 		mov	r2, #1024
 3224 00b0 0121     		movs	r1, #1
 3225 00b2 1F48     		ldr	r0, .L136+8
 3226 00b4 FFF7FEFF 		bl	LL_DMA_SetMemorySize
 317:Core/Src/main.c **** 
 318:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 319:Core/Src/main.c **** 
ARM GAS  /tmp/ccLne6l3.s 			page 249


 320:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /** Common config
 323:Core/Src/main.c ****   */
 324:Core/Src/main.c ****   ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 3227              		.loc 11 324 32
 3228 00b8 0023     		movs	r3, #0
 3229 00ba 3B63     		str	r3, [r7, #48]
 325:Core/Src/main.c ****   ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 3230              		.loc 11 325 37
 3231 00bc 4FF48073 		mov	r3, #256
 3232 00c0 7B63     		str	r3, [r7, #52]
 326:Core/Src/main.c ****   LL_ADC_Init(ADC1, &ADC_InitStruct);
 3233              		.loc 11 326 3
 3234 00c2 07F13003 		add	r3, r7, #48
 3235 00c6 1946     		mov	r1, r3
 3236 00c8 1748     		ldr	r0, .L136
 3237 00ca FFF7FEFF 		bl	LL_ADC_Init
 327:Core/Src/main.c ****   ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 3238              		.loc 11 327 34
 3239 00ce 0023     		movs	r3, #0
 3240 00d0 FB62     		str	r3, [r7, #44]
 328:Core/Src/main.c ****   LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 3241              		.loc 11 328 3
 3242 00d2 07F12C03 		add	r3, r7, #44
 3243 00d6 1946     		mov	r1, r3
 3244 00d8 1348     		ldr	r0, .L136
 3245 00da FFF7FEFF 		bl	LL_ADC_CommonInit
 329:Core/Src/main.c ****   ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 3246              		.loc 11 329 36
 3247 00de 4FF46023 		mov	r3, #917504
 3248 00e2 BB61     		str	r3, [r7, #24]
 330:Core/Src/main.c ****   ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 3249              		.loc 11 330 38
 3250 00e4 0023     		movs	r3, #0
 3251 00e6 FB61     		str	r3, [r7, #28]
 331:Core/Src/main.c ****   ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 3252              		.loc 11 331 39
 3253 00e8 0023     		movs	r3, #0
 3254 00ea 3B62     		str	r3, [r7, #32]
 332:Core/Src/main.c ****   ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 3255              		.loc 11 332 37
 3256 00ec 0223     		movs	r3, #2
 3257 00ee 7B62     		str	r3, [r7, #36]
 333:Core/Src/main.c ****   ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 3258              		.loc 11 333 34
 3259 00f0 4FF48073 		mov	r3, #256
 3260 00f4 BB62     		str	r3, [r7, #40]
 334:Core/Src/main.c ****   LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 3261              		.loc 11 334 3
 3262 00f6 07F11803 		add	r3, r7, #24
 3263 00fa 1946     		mov	r1, r3
 3264 00fc 0A48     		ldr	r0, .L136
 3265 00fe FFF7FEFF 		bl	LL_ADC_REG_Init
 335:Core/Src/main.c **** 
 336:Core/Src/main.c ****   /** Configure Regular Channel
 337:Core/Src/main.c ****   */
ARM GAS  /tmp/ccLne6l3.s 			page 250


 338:Core/Src/main.c ****   LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 3266              		.loc 11 338 3
 3267 0102 0C4A     		ldr	r2, .L136+12
 3268 0104 4FF40071 		mov	r1, #512
 3269 0108 0748     		ldr	r0, .L136
 3270 010a FFF7FEFF 		bl	LL_ADC_REG_SetSequencerRanks
 339:Core/Src/main.c ****   LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 3271              		.loc 11 339 3
 3272 010e 0022     		movs	r2, #0
 3273 0110 0849     		ldr	r1, .L136+12
 3274 0112 0548     		ldr	r0, .L136
 3275 0114 FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
 340:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   //LL_ADC_SetChannelSamplingTime (ADC1, LL_ADC_CHANNEL_1,LL_ADC_SAMPLINGTIME_239CYCLES_5);
 343:Core/Src/main.c ****   LL_ADC_Enable (ADC1);
 3276              		.loc 11 343 3
 3277 0118 0348     		ldr	r0, .L136
 3278 011a FFF7FEFF 		bl	LL_ADC_Enable
 344:Core/Src/main.c ****   
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****   
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 349:Core/Src/main.c **** 
 350:Core/Src/main.c **** }
 3279              		.loc 11 350 1
 3280 011e 00BF     		nop
 3281 0120 3837     		adds	r7, r7, #56
 3282              	.LCFI270:
 3283              		.cfi_def_cfa_offset 8
 3284 0122 BD46     		mov	sp, r7
 3285              	.LCFI271:
 3286              		.cfi_def_cfa_register 13
 3287              		@ sp needed
 3288 0124 80BD     		pop	{r7, pc}
 3289              	.L137:
 3290 0126 00BF     		.align	2
 3291              	.L136:
 3292 0128 00240140 		.word	1073816576
 3293 012c 00080140 		.word	1073809408
 3294 0130 00000240 		.word	1073872896
 3295 0134 01003002 		.word	36700161
 3296              		.cfi_endproc
 3297              	.LFE687:
 3299              		.section	.text.MX_TIM1_Init,"ax",%progbits
 3300              		.align	1
 3301              		.syntax unified
 3302              		.thumb
 3303              		.thumb_func
 3305              	MX_TIM1_Init:
 3306              	.LFB688:
 351:Core/Src/main.c **** 
 352:Core/Src/main.c **** /**
 353:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 354:Core/Src/main.c ****   * @param None
 355:Core/Src/main.c ****   * @retval None
ARM GAS  /tmp/ccLne6l3.s 			page 251


 356:Core/Src/main.c ****   */
 357:Core/Src/main.c **** static void MX_TIM1_Init(void)
 358:Core/Src/main.c **** {
 3307              		.loc 11 358 1
 3308              		.cfi_startproc
 3309              		@ args = 0, pretend = 0, frame = 96
 3310              		@ frame_needed = 1, uses_anonymous_args = 0
 3311 0000 80B5     		push	{r7, lr}
 3312              	.LCFI272:
 3313              		.cfi_def_cfa_offset 8
 3314              		.cfi_offset 7, -8
 3315              		.cfi_offset 14, -4
 3316 0002 98B0     		sub	sp, sp, #96
 3317              	.LCFI273:
 3318              		.cfi_def_cfa_offset 104
 3319 0004 00AF     		add	r7, sp, #0
 3320              	.LCFI274:
 3321              		.cfi_def_cfa_register 7
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 361:Core/Src/main.c **** 
 362:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 363:Core/Src/main.c **** 
 364:Core/Src/main.c ****   LL_TIM_InitTypeDef TIM_InitStruct = {0};
 3322              		.loc 11 364 22
 3323 0006 07F14C03 		add	r3, r7, #76
 3324 000a 0022     		movs	r2, #0
 3325 000c 1A60     		str	r2, [r3]
 3326 000e 5A60     		str	r2, [r3, #4]
 3327 0010 9A60     		str	r2, [r3, #8]
 3328 0012 DA60     		str	r2, [r3, #12]
 3329 0014 1A61     		str	r2, [r3, #16]
 365:Core/Src/main.c ****   LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 3330              		.loc 11 365 25
 3331 0016 07F12C03 		add	r3, r7, #44
 3332 001a 2022     		movs	r2, #32
 3333 001c 0021     		movs	r1, #0
 3334 001e 1846     		mov	r0, r3
 3335 0020 FFF7FEFF 		bl	memset
 366:Core/Src/main.c ****   LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 3336              		.loc 11 366 27
 3337 0024 07F11403 		add	r3, r7, #20
 3338 0028 0022     		movs	r2, #0
 3339 002a 1A60     		str	r2, [r3]
 3340 002c 5A60     		str	r2, [r3, #4]
 3341 002e 9A60     		str	r2, [r3, #8]
 3342 0030 DA60     		str	r2, [r3, #12]
 3343 0032 1A61     		str	r2, [r3, #16]
 3344 0034 5A61     		str	r2, [r3, #20]
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 3345              		.loc 11 368 23
 3346 0036 3B46     		mov	r3, r7
 3347 0038 0022     		movs	r2, #0
 3348 003a 1A60     		str	r2, [r3]
 3349 003c 5A60     		str	r2, [r3, #4]
 3350 003e 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccLne6l3.s 			page 252


 3351 0040 DA60     		str	r2, [r3, #12]
 3352 0042 1A61     		str	r2, [r3, #16]
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   /* Peripheral clock enable */
 371:Core/Src/main.c ****   LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 3353              		.loc 11 371 3
 3354 0044 4FF40060 		mov	r0, #2048
 3355 0048 FFF7FEFF 		bl	LL_APB2_GRP1_EnableClock
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 374:Core/Src/main.c **** 
 375:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 376:Core/Src/main.c ****   TIM_InitStruct.Prescaler = 1;
 3356              		.loc 11 376 28
 3357 004c 0123     		movs	r3, #1
 3358 004e A7F84C30 		strh	r3, [r7, #76]	@ movhi
 377:Core/Src/main.c ****   TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 3359              		.loc 11 377 30
 3360 0052 0023     		movs	r3, #0
 3361 0054 3B65     		str	r3, [r7, #80]
 378:Core/Src/main.c ****   TIM_InitStruct.Autoreload = 3600;
 3362              		.loc 11 378 29
 3363 0056 4FF46163 		mov	r3, #3600
 3364 005a 7B65     		str	r3, [r7, #84]
 379:Core/Src/main.c ****   TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 3365              		.loc 11 379 32
 3366 005c 0023     		movs	r3, #0
 3367 005e BB65     		str	r3, [r7, #88]
 380:Core/Src/main.c ****   TIM_InitStruct.RepetitionCounter = 0;
 3368              		.loc 11 380 36
 3369 0060 0023     		movs	r3, #0
 3370 0062 FB65     		str	r3, [r7, #92]
 381:Core/Src/main.c ****   LL_TIM_Init(TIM1, &TIM_InitStruct);
 3371              		.loc 11 381 3
 3372 0064 07F14C03 		add	r3, r7, #76
 3373 0068 1946     		mov	r1, r3
 3374 006a 2F48     		ldr	r0, .L139
 3375 006c FFF7FEFF 		bl	LL_TIM_Init
 382:Core/Src/main.c ****   LL_TIM_EnableARRPreload(TIM1);
 3376              		.loc 11 382 3
 3377 0070 2D48     		ldr	r0, .L139
 3378 0072 FFF7FEFF 		bl	LL_TIM_EnableARRPreload
 383:Core/Src/main.c ****   LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 3379              		.loc 11 383 3
 3380 0076 0021     		movs	r1, #0
 3381 0078 2B48     		ldr	r0, .L139
 3382 007a FFF7FEFF 		bl	LL_TIM_SetClockSource
 384:Core/Src/main.c ****   LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 3383              		.loc 11 384 3
 3384 007e 0121     		movs	r1, #1
 3385 0080 2948     		ldr	r0, .L139
 3386 0082 FFF7FEFF 		bl	LL_TIM_OC_EnablePreload
 385:Core/Src/main.c ****   TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 3387              		.loc 11 385 28
 3388 0086 6023     		movs	r3, #96
 3389 0088 FB62     		str	r3, [r7, #44]
 386:Core/Src/main.c ****   TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
ARM GAS  /tmp/ccLne6l3.s 			page 253


 3390              		.loc 11 386 29
 3391 008a 0023     		movs	r3, #0
 3392 008c 3B63     		str	r3, [r7, #48]
 387:Core/Src/main.c ****   TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 3393              		.loc 11 387 30
 3394 008e 0023     		movs	r3, #0
 3395 0090 7B63     		str	r3, [r7, #52]
 388:Core/Src/main.c ****   TIM_OC_InitStruct.CompareValue = 0;
 3396              		.loc 11 388 34
 3397 0092 0023     		movs	r3, #0
 3398 0094 BB63     		str	r3, [r7, #56]
 389:Core/Src/main.c ****   TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 3399              		.loc 11 389 32
 3400 0096 0023     		movs	r3, #0
 3401 0098 FB63     		str	r3, [r7, #60]
 390:Core/Src/main.c ****   TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 3402              		.loc 11 390 33
 3403 009a 0023     		movs	r3, #0
 3404 009c 3B64     		str	r3, [r7, #64]
 391:Core/Src/main.c ****   TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_HIGH;
 3405              		.loc 11 391 33
 3406 009e 4FF48073 		mov	r3, #256
 3407 00a2 7B64     		str	r3, [r7, #68]
 392:Core/Src/main.c ****   TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_HIGH;
 3408              		.loc 11 392 34
 3409 00a4 4FF48073 		mov	r3, #256
 3410 00a8 BB64     		str	r3, [r7, #72]
 393:Core/Src/main.c ****   LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 3411              		.loc 11 393 3
 3412 00aa 07F12C03 		add	r3, r7, #44
 3413 00ae 1A46     		mov	r2, r3
 3414 00b0 0121     		movs	r1, #1
 3415 00b2 1D48     		ldr	r0, .L139
 3416 00b4 FFF7FEFF 		bl	LL_TIM_OC_Init
 394:Core/Src/main.c ****   LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 3417              		.loc 11 394 3
 3418 00b8 0121     		movs	r1, #1
 3419 00ba 1B48     		ldr	r0, .L139
 3420 00bc FFF7FEFF 		bl	LL_TIM_OC_DisableFast
 395:Core/Src/main.c ****   LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 3421              		.loc 11 395 3
 3422 00c0 0021     		movs	r1, #0
 3423 00c2 1948     		ldr	r0, .L139
 3424 00c4 FFF7FEFF 		bl	LL_TIM_SetTriggerOutput
 396:Core/Src/main.c ****   LL_TIM_DisableMasterSlaveMode(TIM1);
 3425              		.loc 11 396 3
 3426 00c8 1748     		ldr	r0, .L139
 3427 00ca FFF7FEFF 		bl	LL_TIM_DisableMasterSlaveMode
 397:Core/Src/main.c ****   TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 3428              		.loc 11 397 32
 3429 00ce 0023     		movs	r3, #0
 3430 00d0 7B61     		str	r3, [r7, #20]
 398:Core/Src/main.c ****   TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 3431              		.loc 11 398 32
 3432 00d2 0023     		movs	r3, #0
 3433 00d4 BB61     		str	r3, [r7, #24]
 399:Core/Src/main.c ****   TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
ARM GAS  /tmp/ccLne6l3.s 			page 254


 3434              		.loc 11 399 32
 3435 00d6 0023     		movs	r3, #0
 3436 00d8 FB61     		str	r3, [r7, #28]
 400:Core/Src/main.c ****   TIM_BDTRInitStruct.DeadTime = 0;
 3437              		.loc 11 400 31
 3438 00da 0023     		movs	r3, #0
 3439 00dc 87F82030 		strb	r3, [r7, #32]
 401:Core/Src/main.c ****   TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 3440              		.loc 11 401 33
 3441 00e0 0023     		movs	r3, #0
 3442 00e2 7B84     		strh	r3, [r7, #34]	@ movhi
 402:Core/Src/main.c ****   TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 3443              		.loc 11 402 36
 3444 00e4 4FF40053 		mov	r3, #8192
 3445 00e8 7B62     		str	r3, [r7, #36]
 403:Core/Src/main.c ****   TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 3446              		.loc 11 403 38
 3447 00ea 0023     		movs	r3, #0
 3448 00ec BB62     		str	r3, [r7, #40]
 404:Core/Src/main.c ****   LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 3449              		.loc 11 404 3
 3450 00ee 07F11403 		add	r3, r7, #20
 3451 00f2 1946     		mov	r1, r3
 3452 00f4 0C48     		ldr	r0, .L139
 3453 00f6 FFF7FEFF 		bl	LL_TIM_BDTR_Init
 405:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 406:Core/Src/main.c ****   LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 3454              		.loc 11 406 3
 3455 00fa 0120     		movs	r0, #1
 3456 00fc FFF7FEFF 		bl	LL_APB2_GRP1_EnableClock
 407:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 408:Core/Src/main.c ****   //LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   /**TIM1 GPIO Configuration
 411:Core/Src/main.c ****   PA7   ------> TIM1_CH1N
 412:Core/Src/main.c ****   PA8   ------> TIM1_CH1
 413:Core/Src/main.c ****   */
 414:Core/Src/main.c ****   GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 3457              		.loc 11 414 23
 3458 0100 0A4B     		ldr	r3, .L139+4
 3459 0102 3B60     		str	r3, [r7]
 415:Core/Src/main.c ****   GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 3460              		.loc 11 415 24
 3461 0104 0923     		movs	r3, #9
 3462 0106 7B60     		str	r3, [r7, #4]
 416:Core/Src/main.c ****   GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 3463              		.loc 11 416 25
 3464 0108 0223     		movs	r3, #2
 3465 010a BB60     		str	r3, [r7, #8]
 417:Core/Src/main.c ****   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 3466              		.loc 11 417 30
 3467 010c 0023     		movs	r3, #0
 3468 010e FB60     		str	r3, [r7, #12]
 418:Core/Src/main.c ****   LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 3469              		.loc 11 418 3
 3470 0110 3B46     		mov	r3, r7
 3471 0112 1946     		mov	r1, r3
ARM GAS  /tmp/ccLne6l3.s 			page 255


 3472 0114 0648     		ldr	r0, .L139+8
 3473 0116 FFF7FEFF 		bl	LL_GPIO_Init
 419:Core/Src/main.c **** 
 420:Core/Src/main.c ****   LL_GPIO_AF_RemapPartial_TIM1();
 3474              		.loc 11 420 3
 3475 011a FFF7FEFF 		bl	LL_GPIO_AF_RemapPartial_TIM1
 421:Core/Src/main.c **** 
 422:Core/Src/main.c **** }
 3476              		.loc 11 422 1
 3477 011e 00BF     		nop
 3478 0120 6037     		adds	r7, r7, #96
 3479              	.LCFI275:
 3480              		.cfi_def_cfa_offset 8
 3481 0122 BD46     		mov	sp, r7
 3482              	.LCFI276:
 3483              		.cfi_def_cfa_register 13
 3484              		@ sp needed
 3485 0124 80BD     		pop	{r7, pc}
 3486              	.L140:
 3487 0126 00BF     		.align	2
 3488              	.L139:
 3489 0128 002C0140 		.word	1073818624
 3490 012c 81800104 		.word	67207297
 3491 0130 00080140 		.word	1073809408
 3492              		.cfi_endproc
 3493              	.LFE688:
 3495              		.section	.text.MX_TIM6_Init,"ax",%progbits
 3496              		.align	1
 3497              		.syntax unified
 3498              		.thumb
 3499              		.thumb_func
 3501              	MX_TIM6_Init:
 3502              	.LFB689:
 423:Core/Src/main.c **** 
 424:Core/Src/main.c **** /**
 425:Core/Src/main.c ****   * @brief TIM6 Initialization Function
 426:Core/Src/main.c ****   * @param None
 427:Core/Src/main.c ****   * @retval None
 428:Core/Src/main.c ****   */
 429:Core/Src/main.c **** static void MX_TIM6_Init(void)
 430:Core/Src/main.c **** {
 3503              		.loc 11 430 1
 3504              		.cfi_startproc
 3505              		@ args = 0, pretend = 0, frame = 8
 3506              		@ frame_needed = 1, uses_anonymous_args = 0
 3507 0000 80B5     		push	{r7, lr}
 3508              	.LCFI277:
 3509              		.cfi_def_cfa_offset 8
 3510              		.cfi_offset 7, -8
 3511              		.cfi_offset 14, -4
 3512 0002 82B0     		sub	sp, sp, #8
 3513              	.LCFI278:
 3514              		.cfi_def_cfa_offset 16
 3515 0004 00AF     		add	r7, sp, #0
 3516              	.LCFI279:
 3517              		.cfi_def_cfa_register 7
 431:Core/Src/main.c **** 
ARM GAS  /tmp/ccLne6l3.s 			page 256


 432:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 0 */
 433:Core/Src/main.c ****   // __HAL_RCC_TIM6_CLK_ENABLE();
 434:Core/Src/main.c ****   /* USER CODE END TIM6_Init 0 */
 435:Core/Src/main.c **** 
 436:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 3518              		.loc 11 436 27
 3519 0006 3B46     		mov	r3, r7
 3520 0008 0022     		movs	r2, #0
 3521 000a 1A60     		str	r2, [r3]
 3522 000c 5A60     		str	r2, [r3, #4]
 437:Core/Src/main.c **** 
 438:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 1 */
 439:Core/Src/main.c **** 
 440:Core/Src/main.c ****   /* USER CODE END TIM6_Init 1 */
 441:Core/Src/main.c ****   htim6.Instance = TIM6;
 3523              		.loc 11 441 18
 3524 000e 174B     		ldr	r3, .L144
 3525 0010 174A     		ldr	r2, .L144+4
 3526 0012 1A60     		str	r2, [r3]
 442:Core/Src/main.c ****   htim6.Init.Prescaler = 2670;
 3527              		.loc 11 442 24
 3528 0014 154B     		ldr	r3, .L144
 3529 0016 40F66E22 		movw	r2, #2670
 3530 001a 5A60     		str	r2, [r3, #4]
 443:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 3531              		.loc 11 443 26
 3532 001c 134B     		ldr	r3, .L144
 3533 001e 0022     		movs	r2, #0
 3534 0020 9A60     		str	r2, [r3, #8]
 444:Core/Src/main.c ****   htim6.Init.Period = 2670;
 3535              		.loc 11 444 21
 3536 0022 124B     		ldr	r3, .L144
 3537 0024 40F66E22 		movw	r2, #2670
 3538 0028 DA60     		str	r2, [r3, #12]
 445:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 3539              		.loc 11 445 32
 3540 002a 104B     		ldr	r3, .L144
 3541 002c 8022     		movs	r2, #128
 3542 002e 9A61     		str	r2, [r3, #24]
 446:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 3543              		.loc 11 446 7
 3544 0030 0E48     		ldr	r0, .L144
 3545 0032 FFF7FEFF 		bl	HAL_TIM_Base_Init
 3546 0036 0346     		mov	r3, r0
 3547              		.loc 11 446 6
 3548 0038 002B     		cmp	r3, #0
 3549 003a 01D0     		beq	.L142
 447:Core/Src/main.c ****   {
 448:Core/Src/main.c ****     Error_Handler();
 3550              		.loc 11 448 5
 3551 003c FFF7FEFF 		bl	Error_Handler
 3552              	.L142:
 449:Core/Src/main.c ****   }
 450:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 3553              		.loc 11 450 37
 3554 0040 0023     		movs	r3, #0
 3555 0042 3B60     		str	r3, [r7]
ARM GAS  /tmp/ccLne6l3.s 			page 257


 451:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 3556              		.loc 11 451 33
 3557 0044 0023     		movs	r3, #0
 3558 0046 7B60     		str	r3, [r7, #4]
 452:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 3559              		.loc 11 452 7
 3560 0048 3B46     		mov	r3, r7
 3561 004a 1946     		mov	r1, r3
 3562 004c 0748     		ldr	r0, .L144
 3563 004e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 3564 0052 0346     		mov	r3, r0
 3565              		.loc 11 452 6
 3566 0054 002B     		cmp	r3, #0
 3567 0056 01D0     		beq	.L143
 453:Core/Src/main.c ****   {
 454:Core/Src/main.c ****     Error_Handler();
 3568              		.loc 11 454 5
 3569 0058 FFF7FEFF 		bl	Error_Handler
 3570              	.L143:
 455:Core/Src/main.c ****   }
 456:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 2 */
 457:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim6);
 3571              		.loc 11 457 3
 3572 005c 0348     		ldr	r0, .L144
 3573 005e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 458:Core/Src/main.c ****  // HAL_NVIC_EnableIRQ(TIM6_IRQn);
 459:Core/Src/main.c ****   // htim6.Instance->CNT=0;       ////////clear the cnt 
 460:Core/Src/main.c ****   // htim6.Instance->SR=0;        ////////clear the irq flag
 461:Core/Src/main.c ****   // HAL_TIM_Base_Stop_IT(&htim6);
 462:Core/Src/main.c ****   /* USER CODE END TIM6_Init 2 */
 463:Core/Src/main.c **** 
 464:Core/Src/main.c **** }
 3574              		.loc 11 464 1
 3575 0062 00BF     		nop
 3576 0064 0837     		adds	r7, r7, #8
 3577              	.LCFI280:
 3578              		.cfi_def_cfa_offset 8
 3579 0066 BD46     		mov	sp, r7
 3580              	.LCFI281:
 3581              		.cfi_def_cfa_register 13
 3582              		@ sp needed
 3583 0068 80BD     		pop	{r7, pc}
 3584              	.L145:
 3585 006a 00BF     		.align	2
 3586              	.L144:
 3587 006c 00000000 		.word	htim6
 3588 0070 00100040 		.word	1073745920
 3589              		.cfi_endproc
 3590              	.LFE689:
 3592              		.section	.text.MX_TIM7_Init,"ax",%progbits
 3593              		.align	1
 3594              		.syntax unified
 3595              		.thumb
 3596              		.thumb_func
 3598              	MX_TIM7_Init:
 3599              	.LFB690:
 465:Core/Src/main.c **** 
ARM GAS  /tmp/ccLne6l3.s 			page 258


 466:Core/Src/main.c **** /**
 467:Core/Src/main.c ****   * @brief TIM7 Initialization Function
 468:Core/Src/main.c ****   * @param None
 469:Core/Src/main.c ****   * @retval None
 470:Core/Src/main.c ****   */
 471:Core/Src/main.c **** static void MX_TIM7_Init(void)
 472:Core/Src/main.c **** {
 3600              		.loc 11 472 1
 3601              		.cfi_startproc
 3602              		@ args = 0, pretend = 0, frame = 24
 3603              		@ frame_needed = 1, uses_anonymous_args = 0
 3604 0000 80B5     		push	{r7, lr}
 3605              	.LCFI282:
 3606              		.cfi_def_cfa_offset 8
 3607              		.cfi_offset 7, -8
 3608              		.cfi_offset 14, -4
 3609 0002 86B0     		sub	sp, sp, #24
 3610              	.LCFI283:
 3611              		.cfi_def_cfa_offset 32
 3612 0004 00AF     		add	r7, sp, #0
 3613              	.LCFI284:
 3614              		.cfi_def_cfa_register 7
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 0 */
 475:Core/Src/main.c **** 
 476:Core/Src/main.c ****   /* USER CODE END TIM7_Init 0 */
 477:Core/Src/main.c **** 
 478:Core/Src/main.c ****   LL_TIM_InitTypeDef TIM_InitStruct = {0};
 3615              		.loc 11 478 22
 3616 0006 3B1D     		adds	r3, r7, #4
 3617 0008 0022     		movs	r2, #0
 3618 000a 1A60     		str	r2, [r3]
 3619 000c 5A60     		str	r2, [r3, #4]
 3620 000e 9A60     		str	r2, [r3, #8]
 3621 0010 DA60     		str	r2, [r3, #12]
 3622 0012 1A61     		str	r2, [r3, #16]
 479:Core/Src/main.c **** 
 480:Core/Src/main.c ****   /* Peripheral clock enable */
 481:Core/Src/main.c ****   LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 3623              		.loc 11 481 3
 3624 0014 2020     		movs	r0, #32
 3625 0016 FFF7FEFF 		bl	LL_APB1_GRP1_EnableClock
 482:Core/Src/main.c **** 
 483:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 1 */
 484:Core/Src/main.c **** 
 485:Core/Src/main.c ****   /* USER CODE END TIM7_Init 1 */
 486:Core/Src/main.c ****   TIM_InitStruct.Prescaler = 0;
 3626              		.loc 11 486 28
 3627 001a 0023     		movs	r3, #0
 3628 001c BB80     		strh	r3, [r7, #4]	@ movhi
 487:Core/Src/main.c ****   TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 3629              		.loc 11 487 30
 3630 001e 0023     		movs	r3, #0
 3631 0020 BB60     		str	r3, [r7, #8]
 488:Core/Src/main.c ****   TIM_InitStruct.Autoreload = 65535;
 3632              		.loc 11 488 29
 3633 0022 4FF6FF73 		movw	r3, #65535
ARM GAS  /tmp/ccLne6l3.s 			page 259


 3634 0026 FB60     		str	r3, [r7, #12]
 489:Core/Src/main.c ****   LL_TIM_Init(TIM7, &TIM_InitStruct);
 3635              		.loc 11 489 3
 3636 0028 3B1D     		adds	r3, r7, #4
 3637 002a 1946     		mov	r1, r3
 3638 002c 0948     		ldr	r0, .L147
 3639 002e FFF7FEFF 		bl	LL_TIM_Init
 490:Core/Src/main.c ****   LL_TIM_EnableARRPreload(TIM7);
 3640              		.loc 11 490 3
 3641 0032 0848     		ldr	r0, .L147
 3642 0034 FFF7FEFF 		bl	LL_TIM_EnableARRPreload
 491:Core/Src/main.c ****   LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 3643              		.loc 11 491 3
 3644 0038 0021     		movs	r1, #0
 3645 003a 0648     		ldr	r0, .L147
 3646 003c FFF7FEFF 		bl	LL_TIM_SetTriggerOutput
 492:Core/Src/main.c ****   LL_TIM_DisableMasterSlaveMode(TIM7);
 3647              		.loc 11 492 3
 3648 0040 0448     		ldr	r0, .L147
 3649 0042 FFF7FEFF 		bl	LL_TIM_DisableMasterSlaveMode
 493:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 2 */
 494:Core/Src/main.c **** 
 495:Core/Src/main.c **** 
 496:Core/Src/main.c ****   //LL_TIM_EnableAllOutputs (TIM1);
 497:Core/Src/main.c ****   LL_TIM_EnableCounter (TIM7);
 3650              		.loc 11 497 3
 3651 0046 0348     		ldr	r0, .L147
 3652 0048 FFF7FEFF 		bl	LL_TIM_EnableCounter
 498:Core/Src/main.c **** 
 499:Core/Src/main.c **** 
 500:Core/Src/main.c **** 
 501:Core/Src/main.c **** 
 502:Core/Src/main.c ****   /* USER CODE END TIM7_Init 2 */
 503:Core/Src/main.c **** 
 504:Core/Src/main.c **** }
 3653              		.loc 11 504 1
 3654 004c 00BF     		nop
 3655 004e 1837     		adds	r7, r7, #24
 3656              	.LCFI285:
 3657              		.cfi_def_cfa_offset 8
 3658 0050 BD46     		mov	sp, r7
 3659              	.LCFI286:
 3660              		.cfi_def_cfa_register 13
 3661              		@ sp needed
 3662 0052 80BD     		pop	{r7, pc}
 3663              	.L148:
 3664              		.align	2
 3665              	.L147:
 3666 0054 00140040 		.word	1073746944
 3667              		.cfi_endproc
 3668              	.LFE690:
 3670              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 3671              		.align	1
 3672              		.syntax unified
 3673              		.thumb
 3674              		.thumb_func
 3676              	MX_USART1_UART_Init:
ARM GAS  /tmp/ccLne6l3.s 			page 260


 3677              	.LFB691:
 505:Core/Src/main.c **** 
 506:Core/Src/main.c **** /**
 507:Core/Src/main.c ****   * @brief USART1 Initialization Function
 508:Core/Src/main.c ****   * @param None
 509:Core/Src/main.c ****   * @retval None
 510:Core/Src/main.c ****   */
 511:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 512:Core/Src/main.c **** {
 3678              		.loc 11 512 1
 3679              		.cfi_startproc
 3680              		@ args = 0, pretend = 0, frame = 0
 3681              		@ frame_needed = 1, uses_anonymous_args = 0
 3682 0000 80B5     		push	{r7, lr}
 3683              	.LCFI287:
 3684              		.cfi_def_cfa_offset 8
 3685              		.cfi_offset 7, -8
 3686              		.cfi_offset 14, -4
 3687 0002 00AF     		add	r7, sp, #0
 3688              	.LCFI288:
 3689              		.cfi_def_cfa_register 7
 513:Core/Src/main.c **** 
 514:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 515:Core/Src/main.c ****  // #define USE_HAL_UART_REGISTER_CALLBACKS 1
 516:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 517:Core/Src/main.c **** 
 518:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 519:Core/Src/main.c **** 
 520:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 521:Core/Src/main.c ****   huart1.Instance = USART1;
 3690              		.loc 11 521 19
 3691 0004 134B     		ldr	r3, .L151
 3692 0006 144A     		ldr	r2, .L151+4
 3693 0008 1A60     		str	r2, [r3]
 522:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 3694              		.loc 11 522 24
 3695 000a 124B     		ldr	r3, .L151
 3696 000c 4FF4E132 		mov	r2, #115200
 3697 0010 5A60     		str	r2, [r3, #4]
 523:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 3698              		.loc 11 523 26
 3699 0012 104B     		ldr	r3, .L151
 3700 0014 0022     		movs	r2, #0
 3701 0016 9A60     		str	r2, [r3, #8]
 524:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 3702              		.loc 11 524 24
 3703 0018 0E4B     		ldr	r3, .L151
 3704 001a 0022     		movs	r2, #0
 3705 001c DA60     		str	r2, [r3, #12]
 525:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 3706              		.loc 11 525 22
 3707 001e 0D4B     		ldr	r3, .L151
 3708 0020 0022     		movs	r2, #0
 3709 0022 1A61     		str	r2, [r3, #16]
 526:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 3710              		.loc 11 526 20
 3711 0024 0B4B     		ldr	r3, .L151
ARM GAS  /tmp/ccLne6l3.s 			page 261


 3712 0026 0C22     		movs	r2, #12
 3713 0028 5A61     		str	r2, [r3, #20]
 527:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 3714              		.loc 11 527 25
 3715 002a 0A4B     		ldr	r3, .L151
 3716 002c 0022     		movs	r2, #0
 3717 002e 9A61     		str	r2, [r3, #24]
 528:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 3718              		.loc 11 528 28
 3719 0030 084B     		ldr	r3, .L151
 3720 0032 0022     		movs	r2, #0
 3721 0034 DA61     		str	r2, [r3, #28]
 529:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 3722              		.loc 11 529 7
 3723 0036 0748     		ldr	r0, .L151
 3724 0038 FFF7FEFF 		bl	HAL_UART_Init
 3725 003c 0346     		mov	r3, r0
 3726              		.loc 11 529 6
 3727 003e 002B     		cmp	r3, #0
 3728 0040 01D0     		beq	.L150
 530:Core/Src/main.c ****   {
 531:Core/Src/main.c ****     Error_Handler();
 3729              		.loc 11 531 5
 3730 0042 FFF7FEFF 		bl	Error_Handler
 3731              	.L150:
 532:Core/Src/main.c ****   }
 533:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 534:Core/Src/main.c **** 
 535:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart1,&uart_temp,1);
 3732              		.loc 11 535 3
 3733 0046 0122     		movs	r2, #1
 3734 0048 0449     		ldr	r1, .L151+8
 3735 004a 0248     		ldr	r0, .L151
 3736 004c FFF7FEFF 		bl	HAL_UART_Receive_IT
 536:Core/Src/main.c **** 
 537:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 538:Core/Src/main.c **** 
 539:Core/Src/main.c **** }
 3737              		.loc 11 539 1
 3738 0050 00BF     		nop
 3739 0052 80BD     		pop	{r7, pc}
 3740              	.L152:
 3741              		.align	2
 3742              	.L151:
 3743 0054 00000000 		.word	huart1
 3744 0058 00380140 		.word	1073821696
 3745 005c 00000000 		.word	uart_temp
 3746              		.cfi_endproc
 3747              	.LFE691:
 3749              		.section	.text.MX_DMA_Init,"ax",%progbits
 3750              		.align	1
 3751              		.syntax unified
 3752              		.thumb
 3753              		.thumb_func
 3755              	MX_DMA_Init:
 3756              	.LFB692:
 540:Core/Src/main.c **** 
ARM GAS  /tmp/ccLne6l3.s 			page 262


 541:Core/Src/main.c **** /**
 542:Core/Src/main.c ****   * Enable DMA controller clock
 543:Core/Src/main.c ****   */
 544:Core/Src/main.c **** static void MX_DMA_Init(void)
 545:Core/Src/main.c **** {
 3757              		.loc 11 545 1
 3758              		.cfi_startproc
 3759              		@ args = 0, pretend = 0, frame = 0
 3760              		@ frame_needed = 1, uses_anonymous_args = 0
 3761 0000 80B5     		push	{r7, lr}
 3762              	.LCFI289:
 3763              		.cfi_def_cfa_offset 8
 3764              		.cfi_offset 7, -8
 3765              		.cfi_offset 14, -4
 3766 0002 00AF     		add	r7, sp, #0
 3767              	.LCFI290:
 3768              		.cfi_def_cfa_register 7
 546:Core/Src/main.c **** 
 547:Core/Src/main.c ****   /* Init with LL driver */
 548:Core/Src/main.c ****   /* DMA controller clock enable */
 549:Core/Src/main.c ****   LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 3769              		.loc 11 549 3
 3770 0004 0120     		movs	r0, #1
 3771 0006 FFF7FEFF 		bl	LL_AHB1_GRP1_EnableClock
 550:Core/Src/main.c **** 
 551:Core/Src/main.c **** }
 3772              		.loc 11 551 1
 3773 000a 00BF     		nop
 3774 000c 80BD     		pop	{r7, pc}
 3775              		.cfi_endproc
 3776              	.LFE692:
 3778              		.section	.text.MX_GPIO_Init,"ax",%progbits
 3779              		.align	1
 3780              		.syntax unified
 3781              		.thumb
 3782              		.thumb_func
 3784              	MX_GPIO_Init:
 3785              	.LFB693:
 552:Core/Src/main.c **** 
 553:Core/Src/main.c **** /**
 554:Core/Src/main.c ****   * @brief GPIO Initialization Function
 555:Core/Src/main.c ****   * @param None
 556:Core/Src/main.c ****   * @retval None
 557:Core/Src/main.c ****   */
 558:Core/Src/main.c **** static void MX_GPIO_Init(void)
 559:Core/Src/main.c **** {
 3786              		.loc 11 559 1
 3787              		.cfi_startproc
 3788              		@ args = 0, pretend = 0, frame = 24
 3789              		@ frame_needed = 1, uses_anonymous_args = 0
 3790 0000 80B5     		push	{r7, lr}
 3791              	.LCFI291:
 3792              		.cfi_def_cfa_offset 8
 3793              		.cfi_offset 7, -8
 3794              		.cfi_offset 14, -4
 3795 0002 86B0     		sub	sp, sp, #24
 3796              	.LCFI292:
ARM GAS  /tmp/ccLne6l3.s 			page 263


 3797              		.cfi_def_cfa_offset 32
 3798 0004 00AF     		add	r7, sp, #0
 3799              	.LCFI293:
 3800              		.cfi_def_cfa_register 7
 560:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 3801              		.loc 11 560 20
 3802 0006 07F10803 		add	r3, r7, #8
 3803 000a 0022     		movs	r2, #0
 3804 000c 1A60     		str	r2, [r3]
 3805 000e 5A60     		str	r2, [r3, #4]
 3806 0010 9A60     		str	r2, [r3, #8]
 3807 0012 DA60     		str	r2, [r3, #12]
 3808              	.LBB20:
 561:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 562:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 563:Core/Src/main.c **** 
 564:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 565:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 3809              		.loc 11 565 3
 3810 0014 174B     		ldr	r3, .L155
 3811 0016 9B69     		ldr	r3, [r3, #24]
 3812 0018 164A     		ldr	r2, .L155
 3813 001a 43F02003 		orr	r3, r3, #32
 3814 001e 9361     		str	r3, [r2, #24]
 3815 0020 144B     		ldr	r3, .L155
 3816 0022 9B69     		ldr	r3, [r3, #24]
 3817 0024 03F02003 		and	r3, r3, #32
 3818 0028 7B60     		str	r3, [r7, #4]
 3819 002a 7B68     		ldr	r3, [r7, #4]
 3820              	.LBE20:
 3821              	.LBB21:
 566:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 3822              		.loc 11 566 3
 3823 002c 114B     		ldr	r3, .L155
 3824 002e 9B69     		ldr	r3, [r3, #24]
 3825 0030 104A     		ldr	r2, .L155
 3826 0032 43F00403 		orr	r3, r3, #4
 3827 0036 9361     		str	r3, [r2, #24]
 3828 0038 0E4B     		ldr	r3, .L155
 3829 003a 9B69     		ldr	r3, [r3, #24]
 3830 003c 03F00403 		and	r3, r3, #4
 3831 0040 3B60     		str	r3, [r7]
 3832 0042 3B68     		ldr	r3, [r7]
 3833              	.LBE21:
 567:Core/Src/main.c **** 
 568:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 569:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 3834              		.loc 11 569 3
 3835 0044 0022     		movs	r2, #0
 3836 0046 0421     		movs	r1, #4
 3837 0048 0B48     		ldr	r0, .L155+4
 3838 004a FFF7FEFF 		bl	HAL_GPIO_WritePin
 570:Core/Src/main.c **** 
 571:Core/Src/main.c ****   /*Configure GPIO pin : PD2 */
 572:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 3839              		.loc 11 572 23
 3840 004e 0423     		movs	r3, #4
ARM GAS  /tmp/ccLne6l3.s 			page 264


 3841 0050 BB60     		str	r3, [r7, #8]
 573:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 3842              		.loc 11 573 24
 3843 0052 0123     		movs	r3, #1
 3844 0054 FB60     		str	r3, [r7, #12]
 574:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 3845              		.loc 11 574 24
 3846 0056 0023     		movs	r3, #0
 3847 0058 3B61     		str	r3, [r7, #16]
 575:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 3848              		.loc 11 575 25
 3849 005a 0223     		movs	r3, #2
 3850 005c 7B61     		str	r3, [r7, #20]
 576:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 3851              		.loc 11 576 3
 3852 005e 07F10803 		add	r3, r7, #8
 3853 0062 1946     		mov	r1, r3
 3854 0064 0448     		ldr	r0, .L155+4
 3855 0066 FFF7FEFF 		bl	HAL_GPIO_Init
 577:Core/Src/main.c **** 
 578:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 579:Core/Src/main.c **** 
 580:Core/Src/main.c ****   //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 581:Core/Src/main.c **** 
 582:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 583:Core/Src/main.c **** }
 3856              		.loc 11 583 1
 3857 006a 00BF     		nop
 3858 006c 1837     		adds	r7, r7, #24
 3859              	.LCFI294:
 3860              		.cfi_def_cfa_offset 8
 3861 006e BD46     		mov	sp, r7
 3862              	.LCFI295:
 3863              		.cfi_def_cfa_register 13
 3864              		@ sp needed
 3865 0070 80BD     		pop	{r7, pc}
 3866              	.L156:
 3867 0072 00BF     		.align	2
 3868              	.L155:
 3869 0074 00100240 		.word	1073876992
 3870 0078 00140140 		.word	1073812480
 3871              		.cfi_endproc
 3872              	.LFE693:
 3874              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 3875              		.align	1
 3876              		.global	HAL_TIM_PeriodElapsedCallback
 3877              		.syntax unified
 3878              		.thumb
 3879              		.thumb_func
 3881              	HAL_TIM_PeriodElapsedCallback:
 3882              	.LFB694:
 584:Core/Src/main.c **** 
 585:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 586:Core/Src/main.c **** HAL_TIM_PeriodElapsedCallback(htim)
 587:Core/Src/main.c **** {
 3883              		.loc 11 587 1
 3884              		.cfi_startproc
ARM GAS  /tmp/ccLne6l3.s 			page 265


 3885              		@ args = 0, pretend = 0, frame = 8
 3886              		@ frame_needed = 1, uses_anonymous_args = 0
 3887              		@ link register save eliminated.
 3888 0000 80B4     		push	{r7}
 3889              	.LCFI296:
 3890              		.cfi_def_cfa_offset 4
 3891              		.cfi_offset 7, -4
 3892 0002 83B0     		sub	sp, sp, #12
 3893              	.LCFI297:
 3894              		.cfi_def_cfa_offset 16
 3895 0004 00AF     		add	r7, sp, #0
 3896              	.LCFI298:
 3897              		.cfi_def_cfa_register 7
 3898 0006 7860     		str	r0, [r7, #4]
 588:Core/Src/main.c ****     //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 589:Core/Src/main.c ****     UNUSED(htim);
 590:Core/Src/main.c ****     static unsigned char temp,cnt=0;
 591:Core/Src/main.c ****     static unsigned char a,cnt1=0;
 592:Core/Src/main.c ****     // if(cnt++ ==1)
 593:Core/Src/main.c ****     Exceed_Time_Flag =1;
 3899              		.loc 11 593 22
 3900 0008 034B     		ldr	r3, .L158
 3901 000a 0122     		movs	r2, #1
 3902 000c 1A70     		strb	r2, [r3]
 594:Core/Src/main.c ****         // Set_And_Convert_Duty(TIM1,cnt1++);
 595:Core/Src/main.c ****         // if(cnt1 == 100)
 596:Core/Src/main.c ****         // {
 597:Core/Src/main.c ****         //   cnt1 = 0;
 598:Core/Src/main.c ****         // }
 599:Core/Src/main.c ****  
 600:Core/Src/main.c ****   //   if(Sys_Led_Cnt_Flag >1000)
 601:Core/Src/main.c ****   //   {
 602:Core/Src/main.c ****   //     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 603:Core/Src/main.c ****   //     Sys_Led_Cnt_Flag =0;
 604:Core/Src/main.c ****   //  // HAL_UART_Transmit(&huart1,"usart_temp1",7,1000);
 605:Core/Src/main.c ****   //     //s_printf(a,'a');
 606:Core/Src/main.c ****   //     //printf("sdfsf");
 607:Core/Src/main.c ****   //   }
 608:Core/Src/main.c ****   //   else
 609:Core/Src/main.c ****   //   {
 610:Core/Src/main.c ****   //     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 611:Core/Src/main.c ****   //   }
 612:Core/Src/main.c ****     // if(cnt <= 10)
 613:Core/Src/main.c ****     // {   
 614:Core/Src/main.c **** 
 615:Core/Src/main.c ****     //       cnt++;
 616:Core/Src/main.c ****     // }
 617:Core/Src/main.c ****     // else
 618:Core/Src/main.c ****     // {
 619:Core/Src/main.c ****     //  cnt=1;
 620:Core/Src/main.c ****     //  temp ^= 0xFF;
 621:Core/Src/main.c ****     // }
 622:Core/Src/main.c **** 
 623:Core/Src/main.c **** }
 3903              		.loc 11 623 1
 3904 000e 00BF     		nop
 3905 0010 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccLne6l3.s 			page 266


 3906              	.LCFI299:
 3907              		.cfi_def_cfa_offset 4
 3908 0012 BD46     		mov	sp, r7
 3909              	.LCFI300:
 3910              		.cfi_def_cfa_register 13
 3911              		@ sp needed
 3912 0014 80BC     		pop	{r7}
 3913              	.LCFI301:
 3914              		.cfi_restore 7
 3915              		.cfi_def_cfa_offset 0
 3916 0016 7047     		bx	lr
 3917              	.L159:
 3918              		.align	2
 3919              	.L158:
 3920 0018 00000000 		.word	Exceed_Time_Flag
 3921              		.cfi_endproc
 3922              	.LFE694:
 3924              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 3925              		.align	1
 3926              		.global	HAL_UART_RxCpltCallback
 3927              		.syntax unified
 3928              		.thumb
 3929              		.thumb_func
 3931              	HAL_UART_RxCpltCallback:
 3932              	.LFB695:
 624:Core/Src/main.c **** 
 625:Core/Src/main.c **** HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 626:Core/Src/main.c **** {
 3933              		.loc 11 626 1
 3934              		.cfi_startproc
 3935              		@ args = 0, pretend = 0, frame = 8
 3936              		@ frame_needed = 1, uses_anonymous_args = 0
 3937 0000 80B5     		push	{r7, lr}
 3938              	.LCFI302:
 3939              		.cfi_def_cfa_offset 8
 3940              		.cfi_offset 7, -8
 3941              		.cfi_offset 14, -4
 3942 0002 82B0     		sub	sp, sp, #8
 3943              	.LCFI303:
 3944              		.cfi_def_cfa_offset 16
 3945 0004 00AF     		add	r7, sp, #0
 3946              	.LCFI304:
 3947              		.cfi_def_cfa_register 7
 3948 0006 7860     		str	r0, [r7, #4]
 627:Core/Src/main.c ****     //   if(uart_temp == 'f')
 628:Core/Src/main.c ****     // {
 629:Core/Src/main.c ****     //   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 630:Core/Src/main.c ****     // }
 631:Core/Src/main.c ****     // else
 632:Core/Src/main.c ****     // {
 633:Core/Src/main.c ****     //   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 634:Core/Src/main.c ****     // }
 635:Core/Src/main.c ****       Data_Inspect_By_StateMachine(&htim6,&uart_temp,uart_receive_data,&Exceed_Time_Flag);
 3949              		.loc 11 635 7
 3950 0008 074B     		ldr	r3, .L161
 3951 000a 084A     		ldr	r2, .L161+4
 3952 000c 0849     		ldr	r1, .L161+8
ARM GAS  /tmp/ccLne6l3.s 			page 267


 3953 000e 0948     		ldr	r0, .L161+12
 3954 0010 FFF7FEFF 		bl	Data_Inspect_By_StateMachine
 636:Core/Src/main.c **** 
 637:Core/Src/main.c **** 
 638:Core/Src/main.c ****       HAL_UART_Receive_IT(&huart1,&uart_temp,1);
 3955              		.loc 11 638 7
 3956 0014 0122     		movs	r2, #1
 3957 0016 0649     		ldr	r1, .L161+8
 3958 0018 0748     		ldr	r0, .L161+16
 3959 001a FFF7FEFF 		bl	HAL_UART_Receive_IT
 639:Core/Src/main.c **** 
 640:Core/Src/main.c **** }
 3960              		.loc 11 640 1
 3961 001e 00BF     		nop
 3962 0020 0837     		adds	r7, r7, #8
 3963              	.LCFI305:
 3964              		.cfi_def_cfa_offset 8
 3965 0022 BD46     		mov	sp, r7
 3966              	.LCFI306:
 3967              		.cfi_def_cfa_register 13
 3968              		@ sp needed
 3969 0024 80BD     		pop	{r7, pc}
 3970              	.L162:
 3971 0026 00BF     		.align	2
 3972              	.L161:
 3973 0028 00000000 		.word	Exceed_Time_Flag
 3974 002c 00000000 		.word	uart_receive_data
 3975 0030 00000000 		.word	uart_temp
 3976 0034 00000000 		.word	htim6
 3977 0038 00000000 		.word	huart1
 3978              		.cfi_endproc
 3979              	.LFE695:
 3981              		.section	.text.Error_Handler,"ax",%progbits
 3982              		.align	1
 3983              		.global	Error_Handler
 3984              		.syntax unified
 3985              		.thumb
 3986              		.thumb_func
 3988              	Error_Handler:
 3989              	.LFB696:
 641:Core/Src/main.c **** 
 642:Core/Src/main.c **** 
 643:Core/Src/main.c **** /* USER CODE END 4 */
 644:Core/Src/main.c **** 
 645:Core/Src/main.c **** /**
 646:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 647:Core/Src/main.c ****   * @retval None
 648:Core/Src/main.c ****   */
 649:Core/Src/main.c **** void Error_Handler(void)
 650:Core/Src/main.c **** {
 3990              		.loc 11 650 1
 3991              		.cfi_startproc
 3992              		@ args = 0, pretend = 0, frame = 0
 3993              		@ frame_needed = 1, uses_anonymous_args = 0
 3994              		@ link register save eliminated.
 3995 0000 80B4     		push	{r7}
 3996              	.LCFI307:
ARM GAS  /tmp/ccLne6l3.s 			page 268


 3997              		.cfi_def_cfa_offset 4
 3998              		.cfi_offset 7, -4
 3999 0002 00AF     		add	r7, sp, #0
 4000              	.LCFI308:
 4001              		.cfi_def_cfa_register 7
 4002              	.LBB22:
 4003              	.LBB23:
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4004              		.loc 2 142 3
 4005              		.syntax unified
 4006              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4007 0004 72B6     		cpsid i
 4008              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 4009              		.loc 2 143 1
 4010              		.thumb
 4011              		.syntax unified
 4012 0006 00BF     		nop
 4013              	.L164:
 4014              	.LBE23:
 4015              	.LBE22:
 651:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 652:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 653:Core/Src/main.c ****   __disable_irq();
 654:Core/Src/main.c ****   while (1)
 4016              		.loc 11 654 9 discriminator 1
 4017 0008 FEE7     		b	.L164
 4018              		.cfi_endproc
 4019              	.LFE696:
 4021              		.section	.bss.cnt1.3,"aw",%nobits
 4024              	cnt1.3:
 4025 0000 00       		.space	1
 4026              		.section	.bss.a.2,"aw",%nobits
 4029              	a.2:
 4030 0000 00       		.space	1
 4031              		.section	.bss.cnt.1,"aw",%nobits
 4034              	cnt.1:
 4035 0000 00       		.space	1
 4036              		.section	.bss.temp.0,"aw",%nobits
 4039              	temp.0:
 4040 0000 00       		.space	1
 4041              		.text
 4042              	.Letext0:
 4043              		.file 12 "/usr/local/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h
 4044              		.file 13 "/usr/local/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 4045              		.file 14 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 4046              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 4047              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 4048              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 4049              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 4050              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 4051              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 4052              		.file 21 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 4053              		.file 22 "Core/Inc/PID_Algorithm.h"
 4054              		.file 23 "Core/Inc/main.h"
ARM GAS  /tmp/ccLne6l3.s 			page 269


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccLne6l3.s:18     .text.LL_ADC_REG_SetSequencerRanks:0000000000000000 $t
     /tmp/ccLne6l3.s:23     .text.LL_ADC_REG_SetSequencerRanks:0000000000000000 LL_ADC_REG_SetSequencerRanks
     /tmp/ccLne6l3.s:111    .text.LL_ADC_SetChannelSamplingTime:0000000000000000 $t
     /tmp/ccLne6l3.s:116    .text.LL_ADC_SetChannelSamplingTime:0000000000000000 LL_ADC_SetChannelSamplingTime
     /tmp/ccLne6l3.s:243    .text.LL_ADC_Enable:0000000000000000 $t
     /tmp/ccLne6l3.s:248    .text.LL_ADC_Enable:0000000000000000 LL_ADC_Enable
     /tmp/ccLne6l3.s:290    .text.LL_ADC_Disable:0000000000000000 $t
     /tmp/ccLne6l3.s:295    .text.LL_ADC_Disable:0000000000000000 LL_ADC_Disable
     /tmp/ccLne6l3.s:337    .text.LL_ADC_StartCalibration:0000000000000000 $t
     /tmp/ccLne6l3.s:342    .text.LL_ADC_StartCalibration:0000000000000000 LL_ADC_StartCalibration
     /tmp/ccLne6l3.s:384    .text.LL_ADC_IsCalibrationOnGoing:0000000000000000 $t
     /tmp/ccLne6l3.s:389    .text.LL_ADC_IsCalibrationOnGoing:0000000000000000 LL_ADC_IsCalibrationOnGoing
     /tmp/ccLne6l3.s:435    .text.LL_ADC_REG_StartConversionSWStart:0000000000000000 $t
     /tmp/ccLne6l3.s:440    .text.LL_ADC_REG_StartConversionSWStart:0000000000000000 LL_ADC_REG_StartConversionSWStart
     /tmp/ccLne6l3.s:482    .text.LL_ADC_REG_ReadConversionData12:0000000000000000 $t
     /tmp/ccLne6l3.s:487    .text.LL_ADC_REG_ReadConversionData12:0000000000000000 LL_ADC_REG_ReadConversionData12
     /tmp/ccLne6l3.s:528    .text.LL_ADC_IsActiveFlag_EOS:0000000000000000 $t
     /tmp/ccLne6l3.s:533    .text.LL_ADC_IsActiveFlag_EOS:0000000000000000 LL_ADC_IsActiveFlag_EOS
     /tmp/ccLne6l3.s:579    .text.LL_ADC_ClearFlag_EOS:0000000000000000 $t
     /tmp/ccLne6l3.s:584    .text.LL_ADC_ClearFlag_EOS:0000000000000000 LL_ADC_ClearFlag_EOS
     /tmp/ccLne6l3.s:624    .rodata.CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/ccLne6l3.s:627    .rodata.CHANNEL_OFFSET_TAB:0000000000000000 CHANNEL_OFFSET_TAB
     /tmp/ccLne6l3.s:630    .text.LL_DMA_SetDataTransferDirection:0000000000000000 $t
     /tmp/ccLne6l3.s:635    .text.LL_DMA_SetDataTransferDirection:0000000000000000 LL_DMA_SetDataTransferDirection
     /tmp/ccLne6l3.s:695    .text.LL_DMA_SetDataTransferDirection:0000000000000044 $d
     /tmp/ccLne6l3.s:700    .text.LL_DMA_SetMode:0000000000000000 $t
     /tmp/ccLne6l3.s:705    .text.LL_DMA_SetMode:0000000000000000 LL_DMA_SetMode
     /tmp/ccLne6l3.s:763    .text.LL_DMA_SetMode:0000000000000040 $d
     /tmp/ccLne6l3.s:768    .text.LL_DMA_SetPeriphIncMode:0000000000000000 $t
     /tmp/ccLne6l3.s:773    .text.LL_DMA_SetPeriphIncMode:0000000000000000 LL_DMA_SetPeriphIncMode
     /tmp/ccLne6l3.s:831    .text.LL_DMA_SetPeriphIncMode:0000000000000040 $d
     /tmp/ccLne6l3.s:836    .text.LL_DMA_SetMemoryIncMode:0000000000000000 $t
     /tmp/ccLne6l3.s:841    .text.LL_DMA_SetMemoryIncMode:0000000000000000 LL_DMA_SetMemoryIncMode
     /tmp/ccLne6l3.s:899    .text.LL_DMA_SetMemoryIncMode:0000000000000040 $d
     /tmp/ccLne6l3.s:904    .text.LL_DMA_SetPeriphSize:0000000000000000 $t
     /tmp/ccLne6l3.s:909    .text.LL_DMA_SetPeriphSize:0000000000000000 LL_DMA_SetPeriphSize
     /tmp/ccLne6l3.s:967    .text.LL_DMA_SetPeriphSize:0000000000000040 $d
     /tmp/ccLne6l3.s:972    .text.LL_DMA_SetMemorySize:0000000000000000 $t
     /tmp/ccLne6l3.s:977    .text.LL_DMA_SetMemorySize:0000000000000000 LL_DMA_SetMemorySize
     /tmp/ccLne6l3.s:1035   .text.LL_DMA_SetMemorySize:0000000000000040 $d
     /tmp/ccLne6l3.s:1040   .text.LL_DMA_SetChannelPriorityLevel:0000000000000000 $t
     /tmp/ccLne6l3.s:1045   .text.LL_DMA_SetChannelPriorityLevel:0000000000000000 LL_DMA_SetChannelPriorityLevel
     /tmp/ccLne6l3.s:1103   .text.LL_DMA_SetChannelPriorityLevel:0000000000000040 $d
     /tmp/ccLne6l3.s:1108   .rodata.OFFSET_TAB_CCMRx:0000000000000000 $d
     /tmp/ccLne6l3.s:1111   .rodata.OFFSET_TAB_CCMRx:0000000000000000 OFFSET_TAB_CCMRx
     /tmp/ccLne6l3.s:1114   .rodata.SHIFT_TAB_OCxx:0000000000000000 $d
     /tmp/ccLne6l3.s:1117   .rodata.SHIFT_TAB_OCxx:0000000000000000 SHIFT_TAB_OCxx
     /tmp/ccLne6l3.s:1120   .rodata.SHIFT_TAB_ICxx:0000000000000000 $d
     /tmp/ccLne6l3.s:1123   .rodata.SHIFT_TAB_ICxx:0000000000000000 SHIFT_TAB_ICxx
     /tmp/ccLne6l3.s:1126   .rodata.SHIFT_TAB_CCxP:0000000000000000 $d
     /tmp/ccLne6l3.s:1129   .rodata.SHIFT_TAB_CCxP:0000000000000000 SHIFT_TAB_CCxP
     /tmp/ccLne6l3.s:1132   .rodata.SHIFT_TAB_OISx:0000000000000000 $d
     /tmp/ccLne6l3.s:1135   .rodata.SHIFT_TAB_OISx:0000000000000000 SHIFT_TAB_OISx
     /tmp/ccLne6l3.s:1138   .text.LL_TIM_EnableCounter:0000000000000000 $t
     /tmp/ccLne6l3.s:1143   .text.LL_TIM_EnableCounter:0000000000000000 LL_TIM_EnableCounter
ARM GAS  /tmp/ccLne6l3.s 			page 270


     /tmp/ccLne6l3.s:1186   .text.LL_TIM_DisableCounter:0000000000000000 $t
     /tmp/ccLne6l3.s:1191   .text.LL_TIM_DisableCounter:0000000000000000 LL_TIM_DisableCounter
     /tmp/ccLne6l3.s:1233   .text.LL_TIM_EnableARRPreload:0000000000000000 $t
     /tmp/ccLne6l3.s:1238   .text.LL_TIM_EnableARRPreload:0000000000000000 LL_TIM_EnableARRPreload
     /tmp/ccLne6l3.s:1280   .text.LL_TIM_SetPrescaler:0000000000000000 $t
     /tmp/ccLne6l3.s:1285   .text.LL_TIM_SetPrescaler:0000000000000000 LL_TIM_SetPrescaler
     /tmp/ccLne6l3.s:1326   .text.LL_TIM_SetAutoReload:0000000000000000 $t
     /tmp/ccLne6l3.s:1331   .text.LL_TIM_SetAutoReload:0000000000000000 LL_TIM_SetAutoReload
     /tmp/ccLne6l3.s:1372   .text.LL_TIM_CC_EnableChannel:0000000000000000 $t
     /tmp/ccLne6l3.s:1377   .text.LL_TIM_CC_EnableChannel:0000000000000000 LL_TIM_CC_EnableChannel
     /tmp/ccLne6l3.s:1421   .text.LL_TIM_OC_DisableFast:0000000000000000 $t
     /tmp/ccLne6l3.s:1426   .text.LL_TIM_OC_DisableFast:0000000000000000 LL_TIM_OC_DisableFast
     /tmp/ccLne6l3.s:1541   .text.LL_TIM_OC_DisableFast:0000000000000080 $d
     /tmp/ccLne6l3.s:1547   .text.LL_TIM_OC_EnablePreload:0000000000000000 $t
     /tmp/ccLne6l3.s:1552   .text.LL_TIM_OC_EnablePreload:0000000000000000 LL_TIM_OC_EnablePreload
     /tmp/ccLne6l3.s:1666   .text.LL_TIM_OC_EnablePreload:0000000000000080 $d
     /tmp/ccLne6l3.s:1672   .text.LL_TIM_SetClockSource:0000000000000000 $t
     /tmp/ccLne6l3.s:1677   .text.LL_TIM_SetClockSource:0000000000000000 LL_TIM_SetClockSource
     /tmp/ccLne6l3.s:1723   .text.LL_TIM_SetTriggerOutput:0000000000000000 $t
     /tmp/ccLne6l3.s:1728   .text.LL_TIM_SetTriggerOutput:0000000000000000 LL_TIM_SetTriggerOutput
     /tmp/ccLne6l3.s:1773   .text.LL_TIM_DisableMasterSlaveMode:0000000000000000 $t
     /tmp/ccLne6l3.s:1778   .text.LL_TIM_DisableMasterSlaveMode:0000000000000000 LL_TIM_DisableMasterSlaveMode
     /tmp/ccLne6l3.s:1820   .text.LL_TIM_EnableAutomaticOutput:0000000000000000 $t
     /tmp/ccLne6l3.s:1825   .text.LL_TIM_EnableAutomaticOutput:0000000000000000 LL_TIM_EnableAutomaticOutput
     /tmp/ccLne6l3.s:1867   .text.LL_TIM_EnableAllOutputs:0000000000000000 $t
     /tmp/ccLne6l3.s:1872   .text.LL_TIM_EnableAllOutputs:0000000000000000 LL_TIM_EnableAllOutputs
     /tmp/ccLne6l3.s:1914   .text.LL_TIM_ClearFlag_UPDATE:0000000000000000 $t
     /tmp/ccLne6l3.s:1919   .text.LL_TIM_ClearFlag_UPDATE:0000000000000000 LL_TIM_ClearFlag_UPDATE
     /tmp/ccLne6l3.s:1959   .text.LL_TIM_IsActiveFlag_UPDATE:0000000000000000 $t
     /tmp/ccLne6l3.s:1964   .text.LL_TIM_IsActiveFlag_UPDATE:0000000000000000 LL_TIM_IsActiveFlag_UPDATE
     /tmp/ccLne6l3.s:2014   .text.LL_AHB1_GRP1_EnableClock:0000000000000000 $t
     /tmp/ccLne6l3.s:2019   .text.LL_AHB1_GRP1_EnableClock:0000000000000000 LL_AHB1_GRP1_EnableClock
     /tmp/ccLne6l3.s:2071   .text.LL_AHB1_GRP1_EnableClock:000000000000002c $d
     /tmp/ccLne6l3.s:2076   .text.LL_APB1_GRP1_EnableClock:0000000000000000 $t
     /tmp/ccLne6l3.s:2081   .text.LL_APB1_GRP1_EnableClock:0000000000000000 LL_APB1_GRP1_EnableClock
     /tmp/ccLne6l3.s:2132   .text.LL_APB1_GRP1_EnableClock:000000000000002c $d
     /tmp/ccLne6l3.s:2137   .text.LL_APB2_GRP1_EnableClock:0000000000000000 $t
     /tmp/ccLne6l3.s:2142   .text.LL_APB2_GRP1_EnableClock:0000000000000000 LL_APB2_GRP1_EnableClock
     /tmp/ccLne6l3.s:2193   .text.LL_APB2_GRP1_EnableClock:000000000000002c $d
     /tmp/ccLne6l3.s:2198   .text.LL_GPIO_AF_RemapPartial_TIM1:0000000000000000 $t
     /tmp/ccLne6l3.s:2203   .text.LL_GPIO_AF_RemapPartial_TIM1:0000000000000000 LL_GPIO_AF_RemapPartial_TIM1
     /tmp/ccLne6l3.s:2241   .text.LL_GPIO_AF_RemapPartial_TIM1:0000000000000024 $d
     /tmp/ccLne6l3.s:2246   .text.us_delay:0000000000000000 $t
     /tmp/ccLne6l3.s:2251   .text.us_delay:0000000000000000 us_delay
     /tmp/ccLne6l3.s:2328   .text.ID_Judgement:0000000000000000 $t
     /tmp/ccLne6l3.s:2333   .text.ID_Judgement:0000000000000000 ID_Judgement
     /tmp/ccLne6l3.s:2393   .text.clean_temp:0000000000000000 $t
     /tmp/ccLne6l3.s:2398   .text.clean_temp:0000000000000000 clean_temp
     /tmp/ccLne6l3.s:2438   .text.instruction_handle:0000000000000000 $t
     /tmp/ccLne6l3.s:2443   .text.instruction_handle:0000000000000000 instruction_handle
     /tmp/ccLne6l3.s:2507   .text.Advance_TIMX_PWM_INIGTION:0000000000000000 $t
     /tmp/ccLne6l3.s:2512   .text.Advance_TIMX_PWM_INIGTION:0000000000000000 Advance_TIMX_PWM_INIGTION
     /tmp/ccLne6l3.s:2558   .text.Set_And_Convert_Duty_ALL:0000000000000000 $t
     /tmp/ccLne6l3.s:2563   .text.Set_And_Convert_Duty_ALL:0000000000000000 Set_And_Convert_Duty_ALL
     /tmp/ccLne6l3.s:2598   .text.Set_And_Convert_Duty_ALL:0000000000000018 $d
     /tmp/ccLne6l3.s:2603   .text.ADC_By_Consultant:0000000000000000 $t
     /tmp/ccLne6l3.s:2608   .text.ADC_By_Consultant:0000000000000000 ADC_By_Consultant
ARM GAS  /tmp/ccLne6l3.s 			page 271


     /tmp/ccLne6l3.s:2661   .text.ADC1_Operation:0000000000000000 $t
     /tmp/ccLne6l3.s:2666   .text.ADC1_Operation:0000000000000000 ADC1_Operation
     /tmp/ccLne6l3.s:2690   .text.ADC1_Operation:0000000000000010 $d
     /tmp/ccLne6l3.s:2695   .text.Get_ADC_INIT_VALUE:0000000000000000 $t
     /tmp/ccLne6l3.s:2700   .text.Get_ADC_INIT_VALUE:0000000000000000 Get_ADC_INIT_VALUE
     /tmp/ccLne6l3.s:2742   .text.Get_ADC_INIT_VALUE:0000000000000024 $d
     /tmp/ccLne6l3.s:2752   .data.TARGET:0000000000000000 TARGET
     /tmp/ccLne6l3.s:2749   .data.TARGET:0000000000000000 $d
     /tmp/ccLne6l3.s:2760   .bss.Exceed_Time_Flag:0000000000000000 Exceed_Time_Flag
     /tmp/ccLne6l3.s:2761   .bss.Exceed_Time_Flag:0000000000000000 $d
     /tmp/ccLne6l3.s:2766   .bss.uart_temp:0000000000000000 uart_temp
     /tmp/ccLne6l3.s:2767   .bss.uart_temp:0000000000000000 $d
     /tmp/ccLne6l3.s:2773   .bss.uart_receive_data:0000000000000000 uart_receive_data
     /tmp/ccLne6l3.s:2770   .bss.uart_receive_data:0000000000000000 $d
     /tmp/ccLne6l3.s:2780   .bss.htim6:0000000000000000 htim6
     /tmp/ccLne6l3.s:2777   .bss.htim6:0000000000000000 $d
     /tmp/ccLne6l3.s:2787   .bss.huart1:0000000000000000 huart1
     /tmp/ccLne6l3.s:2784   .bss.huart1:0000000000000000 $d
     /tmp/ccLne6l3.s:2790   .text.main:0000000000000000 $t
     /tmp/ccLne6l3.s:2796   .text.main:0000000000000000 main
     /tmp/ccLne6l3.s:2941   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccLne6l3.s:3784   .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccLne6l3.s:3755   .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccLne6l3.s:3501   .text.MX_TIM6_Init:0000000000000000 MX_TIM6_Init
     /tmp/ccLne6l3.s:3676   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccLne6l3.s:3305   .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccLne6l3.s:3598   .text.MX_TIM7_Init:0000000000000000 MX_TIM7_Init
     /tmp/ccLne6l3.s:3118   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccLne6l3.s:3076   .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/ccLne6l3.s:2919   .text.main:00000000000000bc $d
     /tmp/ccLne6l3.s:2935   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccLne6l3.s:3988   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccLne6l3.s:3071   .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/ccLne6l3.s:3113   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccLne6l3.s:3292   .text.MX_ADC1_Init:0000000000000128 $d
     /tmp/ccLne6l3.s:3300   .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccLne6l3.s:3489   .text.MX_TIM1_Init:0000000000000128 $d
     /tmp/ccLne6l3.s:3496   .text.MX_TIM6_Init:0000000000000000 $t
     /tmp/ccLne6l3.s:3587   .text.MX_TIM6_Init:000000000000006c $d
     /tmp/ccLne6l3.s:3593   .text.MX_TIM7_Init:0000000000000000 $t
     /tmp/ccLne6l3.s:3666   .text.MX_TIM7_Init:0000000000000054 $d
     /tmp/ccLne6l3.s:3671   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccLne6l3.s:3743   .text.MX_USART1_UART_Init:0000000000000054 $d
     /tmp/ccLne6l3.s:3750   .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccLne6l3.s:3779   .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccLne6l3.s:3869   .text.MX_GPIO_Init:0000000000000074 $d
     /tmp/ccLne6l3.s:3875   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccLne6l3.s:3881   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccLne6l3.s:3920   .text.HAL_TIM_PeriodElapsedCallback:0000000000000018 $d
     /tmp/ccLne6l3.s:3925   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccLne6l3.s:3931   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccLne6l3.s:3973   .text.HAL_UART_RxCpltCallback:0000000000000028 $d
     /tmp/ccLne6l3.s:3982   .text.Error_Handler:0000000000000000 $t
     /tmp/ccLne6l3.s:4024   .bss.cnt1.3:0000000000000000 cnt1.3
     /tmp/ccLne6l3.s:4025   .bss.cnt1.3:0000000000000000 $d
     /tmp/ccLne6l3.s:4029   .bss.a.2:0000000000000000 a.2
     /tmp/ccLne6l3.s:4030   .bss.a.2:0000000000000000 $d
ARM GAS  /tmp/ccLne6l3.s 			page 272


     /tmp/ccLne6l3.s:4034   .bss.cnt.1:0000000000000000 cnt.1
     /tmp/ccLne6l3.s:4035   .bss.cnt.1:0000000000000000 $d
     /tmp/ccLne6l3.s:4039   .bss.temp.0:0000000000000000 temp.0
     /tmp/ccLne6l3.s:4040   .bss.temp.0:0000000000000000 $d

UNDEFINED SYMBOLS
memset
Function_Judge_Action
ACK_Reaction
Set_And_Convert_Duty_Float
Set_And_Convert_Duty
HAL_Init
PID_Parameters_Init
auto_report_handle
HAL_GPIO_WritePin
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
LL_GPIO_Init
LL_ADC_Init
LL_ADC_CommonInit
LL_ADC_REG_Init
LL_TIM_Init
LL_TIM_OC_Init
LL_TIM_BDTR_Init
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_Base_Start_IT
HAL_UART_Init
HAL_UART_Receive_IT
HAL_GPIO_Init
Data_Inspect_By_StateMachine
